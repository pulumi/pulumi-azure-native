// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AutoDeleteCondition = {
    CreatedGreaterThan: "CreatedGreaterThan",
    LastAccessedGreaterThan: "LastAccessedGreaterThan",
} as const;

/**
 * When to check if an asset is expired
 */
export type AutoDeleteCondition = (typeof AutoDeleteCondition)[keyof typeof AutoDeleteCondition];

export const EmailNotificationEnableType = {
    JobCompleted: "JobCompleted",
    JobFailed: "JobFailed",
    JobCancelled: "JobCancelled",
} as const;

/**
 * Enum to determine the email notification type.
 */
export type EmailNotificationEnableType = (typeof EmailNotificationEnableType)[keyof typeof EmailNotificationEnableType];

export const EncryptionStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Indicates whether or not the encryption is enabled for the workspace.
 */
export type EncryptionStatus = (typeof EncryptionStatus)[keyof typeof EncryptionStatus];

export const FeatureDataType = {
    String: "String",
    Integer: "Integer",
    Long: "Long",
    Float: "Float",
    Double: "Double",
    Binary: "Binary",
    Datetime: "Datetime",
    Boolean: "Boolean",
} as const;

/**
 * Specifies the data type
 */
export type FeatureDataType = (typeof FeatureDataType)[keyof typeof FeatureDataType];

export const IdentityConfigurationType = {
    Managed: "Managed",
    AMLToken: "AMLToken",
    UserIdentity: "UserIdentity",
} as const;

/**
 * [Required] Specifies the type of identity framework.
 */
export type IdentityConfigurationType = (typeof IdentityConfigurationType)[keyof typeof IdentityConfigurationType];

export const ImageAnnotationType = {
    Classification: "Classification",
    BoundingBox: "BoundingBox",
    InstanceSegmentation: "InstanceSegmentation",
} as const;

/**
 * Annotation type of image labeling job.
 */
export type ImageAnnotationType = (typeof ImageAnnotationType)[keyof typeof ImageAnnotationType];

export const IncrementalDataRefresh = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Indicates whether to enable incremental data refresh.
 */
export type IncrementalDataRefresh = (typeof IncrementalDataRefresh)[keyof typeof IncrementalDataRefresh];

export const IsolationMode = {
    Disabled: "Disabled",
    AllowInternetOutbound: "AllowInternetOutbound",
    AllowOnlyApprovedOutbound: "AllowOnlyApprovedOutbound",
} as const;

/**
 * Isolation mode for the managed network of a machine learning workspace.
 */
export type IsolationMode = (typeof IsolationMode)[keyof typeof IsolationMode];

export const JobType = {
    AutoML: "AutoML",
    Command: "Command",
    Labeling: "Labeling",
    Sweep: "Sweep",
    Pipeline: "Pipeline",
    Spark: "Spark",
} as const;

/**
 * [Required] Specifies the type of job.
 */
export type JobType = (typeof JobType)[keyof typeof JobType];

export const MLAssistConfigurationType = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * [Required] Indicates whether MLAssist feature is enabled.
 */
export type MLAssistConfigurationType = (typeof MLAssistConfigurationType)[keyof typeof MLAssistConfigurationType];

export const ManagedNetworkStatus = {
    Inactive: "Inactive",
    Active: "Active",
} as const;

/**
 * Status for the managed network of a machine learning workspace.
 */
export type ManagedNetworkStatus = (typeof ManagedNetworkStatus)[keyof typeof ManagedNetworkStatus];

export const ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
} as const;

/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];

export const MaterializationStoreType = {
    None: "None",
    Online: "Online",
    Offline: "Offline",
    OnlineAndOffline: "OnlineAndOffline",
} as const;

/**
 * Specifies the stores to which materialization should happen
 */
export type MaterializationStoreType = (typeof MaterializationStoreType)[keyof typeof MaterializationStoreType];

export const MediaType = {
    Image: "Image",
    Text: "Text",
} as const;

/**
 * [Required] Media type of the job.
 */
export type MediaType = (typeof MediaType)[keyof typeof MediaType];

export const MultiSelect = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Indicates whether it is allowed to select multiple classes in this category.
 */
export type MultiSelect = (typeof MultiSelect)[keyof typeof MultiSelect];

export const NodesValueType = {
    All: "All",
    Custom: "Custom",
} as const;

/**
 * [Required] Type of the Nodes value
 */
export type NodesValueType = (typeof NodesValueType)[keyof typeof NodesValueType];

export const PrivateEndpointServiceConnectionStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
    Disconnected: "Disconnected",
    Timeout: "Timeout",
} as const;

/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];

export const PublicNetworkAccess = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Whether requests from Public Network are allowed.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];

export const RecurrenceFrequency = {
    /**
     * Minute frequency
     */
    Minute: "Minute",
    /**
     * Hour frequency
     */
    Hour: "Hour",
    /**
     * Day frequency
     */
    Day: "Day",
    /**
     * Week frequency
     */
    Week: "Week",
    /**
     * Month frequency
     */
    Month: "Month",
} as const;

/**
 * [Required] The frequency to trigger schedule.
 */
export type RecurrenceFrequency = (typeof RecurrenceFrequency)[keyof typeof RecurrenceFrequency];

export const RuleCategory = {
    Required: "Required",
    Recommended: "Recommended",
    UserDefined: "UserDefined",
} as const;

/**
 * Category of a managed network Outbound Rule of a machine learning workspace.
 */
export type RuleCategory = (typeof RuleCategory)[keyof typeof RuleCategory];

export const RuleStatus = {
    Inactive: "Inactive",
    Active: "Active",
} as const;

/**
 * Status of a managed network Outbound Rule of a machine learning workspace.
 */
export type RuleStatus = (typeof RuleStatus)[keyof typeof RuleStatus];

export const RuleType = {
    FQDN: "FQDN",
    PrivateEndpoint: "PrivateEndpoint",
    ServiceTag: "ServiceTag",
} as const;

/**
 * Type of a managed network Outbound Rule of a machine learning workspace.
 */
export type RuleType = (typeof RuleType)[keyof typeof RuleType];

export const SkuTier = {
    Free: "Free",
    Basic: "Basic",
    Standard: "Standard",
    Premium: "Premium",
} as const;

/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];

export const TextAnnotationType = {
    Classification: "Classification",
    NamedEntityRecognition: "NamedEntityRecognition",
} as const;

/**
 * Annotation type of text labeling job.
 */
export type TextAnnotationType = (typeof TextAnnotationType)[keyof typeof TextAnnotationType];

export const TriggerType = {
    Recurrence: "Recurrence",
    Cron: "Cron",
} as const;

/**
 * [Required] 
 */
export type TriggerType = (typeof TriggerType)[keyof typeof TriggerType];

export const WebhookType = {
    AzureDevOps: "AzureDevOps",
} as const;

/**
 * [Required] Specifies the type of service to send a callback
 */
export type WebhookType = (typeof WebhookType)[keyof typeof WebhookType];

export const WeekDay = {
    /**
     * Monday weekday
     */
    Monday: "Monday",
    /**
     * Tuesday weekday
     */
    Tuesday: "Tuesday",
    /**
     * Wednesday weekday
     */
    Wednesday: "Wednesday",
    /**
     * Thursday weekday
     */
    Thursday: "Thursday",
    /**
     * Friday weekday
     */
    Friday: "Friday",
    /**
     * Saturday weekday
     */
    Saturday: "Saturday",
    /**
     * Sunday weekday
     */
    Sunday: "Sunday",
} as const;

/**
 * Enum of weekday
 */
export type WeekDay = (typeof WeekDay)[keyof typeof WeekDay];
