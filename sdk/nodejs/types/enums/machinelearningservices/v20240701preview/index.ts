// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const EncryptionStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Indicates whether or not the encryption is enabled for the workspace.
 */
export type EncryptionStatus = (typeof EncryptionStatus)[keyof typeof EncryptionStatus];

export const EndpointServiceConnectionStatus = {
    Approved: "Approved",
    Pending: "Pending",
    Rejected: "Rejected",
    Disconnected: "Disconnected",
    Timeout: "Timeout",
} as const;

/**
 * Connection status of the service consumer with the service provider
 * Possible state transitions
 * Pending -> Approved (Service provider approves the connection request)
 * Pending -> Rejected (Service provider rejects the connection request)
 * Pending -> Disconnected (Service provider deletes the connection)
 * Approved -> Rejected (Service provider rejects the approved connection)
 * Approved -> Disconnected (Service provider deletes the connection)
 * Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
 * Rejected -> Disconnected (Service provider deletes the connection)
 */
export type EndpointServiceConnectionStatus = (typeof EndpointServiceConnectionStatus)[keyof typeof EndpointServiceConnectionStatus];

export const IsolationMode = {
    Disabled: "Disabled",
    AllowInternetOutbound: "AllowInternetOutbound",
    AllowOnlyApprovedOutbound: "AllowOnlyApprovedOutbound",
} as const;

/**
 * Isolation mode for the managed network of a machine learning workspace.
 */
export type IsolationMode = (typeof IsolationMode)[keyof typeof IsolationMode];

export const ManagedNetworkStatus = {
    Inactive: "Inactive",
    Active: "Active",
} as const;

/**
 * Status for the managed network of a machine learning workspace.
 */
export type ManagedNetworkStatus = (typeof ManagedNetworkStatus)[keyof typeof ManagedNetworkStatus];

export const ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
} as const;

/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];

export const PublicNetworkAccessType = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * Whether requests from Public Network are allowed.
 */
export type PublicNetworkAccessType = (typeof PublicNetworkAccessType)[keyof typeof PublicNetworkAccessType];

export const RuleAction = {
    Allow: "Allow",
    Deny: "Deny",
} as const;

/**
 * The action enum for networking rule.
 */
export type RuleAction = (typeof RuleAction)[keyof typeof RuleAction];

export const RuleCategory = {
    Required: "Required",
    Recommended: "Recommended",
    UserDefined: "UserDefined",
    Dependency: "Dependency",
} as const;

/**
 * Category of a managed network Outbound Rule of a machine learning workspace.
 */
export type RuleCategory = (typeof RuleCategory)[keyof typeof RuleCategory];

export const RuleStatus = {
    Inactive: "Inactive",
    Active: "Active",
} as const;

/**
 * Type of a managed network Outbound Rule of a machine learning workspace.
 */
export type RuleStatus = (typeof RuleStatus)[keyof typeof RuleStatus];

export const RuleType = {
    FQDN: "FQDN",
    PrivateEndpoint: "PrivateEndpoint",
    ServiceTag: "ServiceTag",
} as const;

/**
 * Type of a managed network Outbound Rule of a machine learning workspace.
 */
export type RuleType = (typeof RuleType)[keyof typeof RuleType];

export const SkuTier = {
    Free: "Free",
    Basic: "Basic",
    Standard: "Standard",
    Premium: "Premium",
} as const;

/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
