// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AccountProvisioningMode = {
    Automatic: "automatic",
    Manual: "manual",
} as const;

/**
 * The service account provisioning mode for this Active Directory connector.
 */
export type AccountProvisioningMode = (typeof AccountProvisioningMode)[keyof typeof AccountProvisioningMode];

export const ArcSqlManagedInstanceLicenseType = {
    BasePrice: "BasePrice",
    LicenseIncluded: "LicenseIncluded",
    DisasterRecovery: "DisasterRecovery",
} as const;

/**
 * The license type to apply for this managed instance.
 */
export type ArcSqlManagedInstanceLicenseType = (typeof ArcSqlManagedInstanceLicenseType)[keyof typeof ArcSqlManagedInstanceLicenseType];

export const ArcSqlServerLicenseType = {
    Paid: "Paid",
    Free: "Free",
    HADR: "HADR",
    Undefined: "Undefined",
} as const;

/**
 * SQL Server license type.
 */
export type ArcSqlServerLicenseType = (typeof ArcSqlServerLicenseType)[keyof typeof ArcSqlServerLicenseType];

export const ConnectionStatus = {
    Connected: "Connected",
    Disconnected: "Disconnected",
    Registered: "Registered",
    Unknown: "Unknown",
} as const;

/**
 * The cloud connectivity status.
 */
export type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus];

export const DefenderStatus = {
    Protected: "Protected",
    Unprotected: "Unprotected",
    Unknown: "Unknown",
} as const;

/**
 * Status of Azure Defender.
 */
export type DefenderStatus = (typeof DefenderStatus)[keyof typeof DefenderStatus];

export const EditionType = {
    Evaluation: "Evaluation",
    Enterprise: "Enterprise",
    Standard: "Standard",
    Web: "Web",
    Developer: "Developer",
    Express: "Express",
} as const;

/**
 * SQL Server edition.
 */
export type EditionType = (typeof EditionType)[keyof typeof EditionType];

export const ExtendedLocationTypes = {
    CustomLocation: "CustomLocation",
} as const;

/**
 * The type of the extended location.
 */
export type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];

export const HostType = {
    Virtual_Machine: "Virtual Machine",
    Physical_Server: "Physical Server",
    AWS_Virtual_Machine: "AWS Virtual Machine",
    GCP_Virtual_Machine: "GCP Virtual Machine",
    Other: "Other",
} as const;

/**
 * Type of host for Azure Arc SQL Server
 */
export type HostType = (typeof HostType)[keyof typeof HostType];

export const Infrastructure = {
    Azure: "azure",
    Gcp: "gcp",
    Aws: "aws",
    Alibaba: "alibaba",
    Onpremises: "onpremises",
    Other: "other",
} as const;

/**
 * The infrastructure the data controller is running on.
 */
export type Infrastructure = (typeof Infrastructure)[keyof typeof Infrastructure];

export const PostgresInstanceSkuTier = {
    Hyperscale: "Hyperscale",
} as const;

/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier.
 */
export type PostgresInstanceSkuTier = (typeof PostgresInstanceSkuTier)[keyof typeof PostgresInstanceSkuTier];

export const SqlManagedInstanceSkuName = {
    VCore: "vCore",
} as const;

/**
 * The name of the SKU.
 */
export type SqlManagedInstanceSkuName = (typeof SqlManagedInstanceSkuName)[keyof typeof SqlManagedInstanceSkuName];

export const SqlManagedInstanceSkuTier = {
    GeneralPurpose: "GeneralPurpose",
    BusinessCritical: "BusinessCritical",
} as const;

/**
 * The pricing tier for the instance.
 */
export type SqlManagedInstanceSkuTier = (typeof SqlManagedInstanceSkuTier)[keyof typeof SqlManagedInstanceSkuTier];

export const SqlVersion = {
    SQL_Server_2012: "SQL Server 2012",
    SQL_Server_2014: "SQL Server 2014",
    SQL_Server_2016: "SQL Server 2016",
    SQL_Server_2017: "SQL Server 2017",
    SQL_Server_2019: "SQL Server 2019",
    SQL_Server_2022: "SQL Server 2022",
    Unknown: "Unknown",
} as const;

/**
 * SQL Server version.
 */
export type SqlVersion = (typeof SqlVersion)[keyof typeof SqlVersion];
