// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const DayOfWeek = {
    Monday: "Monday",
    Tuesday: "Tuesday",
    Wednesday: "Wednesday",
    Thursday: "Thursday",
    Friday: "Friday",
    Saturday: "Saturday",
    Sunday: "Sunday",
    /**
     * As a convenience, 'Everyday' is also accepted and means the same as specifying all days of the week.
     */
    Everyday: "Everyday",
    /**
     * As a convenience, 'Weekend' is also accepted and means the same as specifying Saturday and Sunday.
     */
    Weekend: "Weekend",
} as const;

/**
 * Day of the week when a cache can be patched.
 */
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];

export const ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
} as const;

/**
 * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
 */
export type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];

export const PrivateEndpointServiceConnectionStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
} as const;

/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];

export const PublicNetworkAccess = {
    /**
     * Public internet access to the cache, via its public IP address, is enabled. Connections may use any network path.
     */
    Enabled: "Enabled",
    /**
     * Public internet access to the cache, via its public IP address, is disabled. Connections must use be made via private endpoints.
     */
    Disabled: "Disabled",
} as const;

/**
 * Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];

export const ReplicationRole = {
    Primary: "Primary",
    Secondary: "Secondary",
} as const;

/**
 * Role of the linked server.
 */
export type ReplicationRole = (typeof ReplicationRole)[keyof typeof ReplicationRole];

export const SkuFamily = {
    /**
     * The SKU family to use - must be 'C' for Basic/Standard SKU redis caches.
     */
    C: "C",
    /**
     * The SKU family to use - must be 'P' for Premium SKU redis caches.
     */
    P: "P",
} as const;

/**
 * The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
 */
export type SkuFamily = (typeof SkuFamily)[keyof typeof SkuFamily];

export const SkuName = {
    /**
     * The well known 'Basic' SKU for Azure Cache for Redis. Basic SKU does not have an availability SLA.
     */
    Basic: "Basic",
    /**
     * The well known 'Standard' SKU for Azure Cache for Redis. Standard SKU has an availability SLA.
     */
    Standard: "Standard",
    /**
     * The well known 'Premium' SKU for Azure Cache for Redis. Premium SKU has an availability SLA, and higher performance tiers and more features compared with Standard SKU.
     */
    Premium: "Premium",
} as const;

/**
 * The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
 */
export type SkuName = (typeof SkuName)[keyof typeof SkuName];

export const TlsVersion = {
    /**
     * TLS protocol version 1.0 -- deprecated for security reasons. Do not use this value for new caches.
     */
    TlsVersion_1_0: "1.0",
    /**
     * TLS protocol version 1.1 -- deprecated for security reasons. Do not use this value for new caches.
     */
    TlsVersion_1_1: "1.1",
    /**
     * TLS protocol version 1.2 -- use this value, or higher, for new caches. Or do not specify, so that your cache uses the recommended default value
     */
    TlsVersion_1_2: "1.2",
} as const;

/**
 * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
 */
export type TlsVersion = (typeof TlsVersion)[keyof typeof TlsVersion];

export const UpdateChannel = {
    /**
     * Stable channel receives updates, which may include important security and stability updates, later than Preview channel.
     */
    Stable: "Stable",
    /**
     * Preview channel normally receives updates before Stable channel, and is the recommended channel for non-production workloads.
     */
    Preview: "Preview",
} as const;

/**
 * Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'.
 */
export type UpdateChannel = (typeof UpdateChannel)[keyof typeof UpdateChannel];

export const ZonalAllocationPolicy = {
    /**
     * The zones for the cache will be selected automatically based on availability and capacity.
     */
    Automatic: "Automatic",
    /**
     * UserDefined means the zones for the cache are manually configured using the 'zones' property, and can not be automatically selected.
     */
    UserDefined: "UserDefined",
    /**
     * The cache will not use multiple availability zones.
     */
    NoZones: "NoZones",
} as const;

/**
 * Optional: Specifies how availability zones are allocated to the Redis cache. 'Automatic' enables zone redundancy and Azure will automatically select zones based on regional availability and capacity. 'UserDefined' will select availability zones passed in by you using the 'zones' parameter. 'NoZones' will produce a non-zonal cache. If 'zonalAllocationPolicy' is not passed, it will be set to 'UserDefined' when zones are passed in, otherwise, it will be set to 'Automatic' in regions where zones are supported and 'NoZones' in regions where zones are not supported.
 */
export type ZonalAllocationPolicy = (typeof ZonalAllocationPolicy)[keyof typeof ZonalAllocationPolicy];
