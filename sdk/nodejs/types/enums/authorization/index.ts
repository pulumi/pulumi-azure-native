// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// Export sub-modules:
import * as v20150101 from "./v20150101";
import * as v20151001preview from "./v20151001preview";
import * as v20160401 from "./v20160401";
import * as v20160901 from "./v20160901";
import * as v20161201 from "./v20161201";
import * as v20170401 from "./v20170401";
import * as v20170601preview from "./v20170601preview";
import * as v20180301 from "./v20180301";
import * as v20180501 from "./v20180501";
import * as v20180501preview from "./v20180501preview";
import * as v20180901preview from "./v20180901preview";
import * as v20190101 from "./v20190101";
import * as v20190601 from "./v20190601";
import * as v20190901 from "./v20190901";
import * as v20200301 from "./v20200301";
import * as v20200301preview from "./v20200301preview";
import * as v20200401preview from "./v20200401preview";
import * as v20200501 from "./v20200501";
import * as v20200701preview from "./v20200701preview";
import * as v20200801preview from "./v20200801preview";
import * as v20200901 from "./v20200901";
import * as v20201001preview from "./v20201001preview";
import * as v20210301preview from "./v20210301preview";
import * as v20210601 from "./v20210601";
import * as v20210701preview from "./v20210701preview";
import * as v20211116preview from "./v20211116preview";
import * as v20211201preview from "./v20211201preview";
import * as v20220401 from "./v20220401";
import * as v20220601 from "./v20220601";
import * as v20220701preview from "./v20220701preview";

export {
    v20150101,
    v20151001preview,
    v20160401,
    v20160901,
    v20161201,
    v20170401,
    v20170601preview,
    v20180301,
    v20180501,
    v20180501preview,
    v20180901preview,
    v20190101,
    v20190601,
    v20190901,
    v20200301,
    v20200301preview,
    v20200401preview,
    v20200501,
    v20200701preview,
    v20200801preview,
    v20200901,
    v20201001preview,
    v20210301preview,
    v20210601,
    v20210701preview,
    v20211116preview,
    v20211201preview,
    v20220401,
    v20220601,
    v20220701preview,
};

export const EnforcementMode = {
    /**
     * The policy effect is enforced during resource creation or update.
     */
    Default: "Default",
    /**
     * The policy effect is not enforced during resource creation or update.
     */
    DoNotEnforce: "DoNotEnforce",
} as const;

/**
 * The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
 */
export type EnforcementMode = (typeof EnforcementMode)[keyof typeof EnforcementMode];

export const LockLevel = {
    NotSpecified: "NotSpecified",
    CanNotDelete: "CanNotDelete",
    ReadOnly: "ReadOnly",
} as const;

/**
 * The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
 */
export type LockLevel = (typeof LockLevel)[keyof typeof LockLevel];

export const OverrideKind = {
    /**
     * It will override the policy effect type.
     */
    PolicyEffect: "policyEffect",
} as const;

/**
 * The override kind.
 */
export type OverrideKind = (typeof OverrideKind)[keyof typeof OverrideKind];

export const ParameterType = {
    String: "String",
    Array: "Array",
    Object: "Object",
    Boolean: "Boolean",
    Integer: "Integer",
    Float: "Float",
    DateTime: "DateTime",
} as const;

/**
 * The data type of the parameter.
 */
export type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];

export const PolicyType = {
    NotSpecified: "NotSpecified",
    BuiltIn: "BuiltIn",
    Custom: "Custom",
    Static: "Static",
} as const;

/**
 * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
 */
export type PolicyType = (typeof PolicyType)[keyof typeof PolicyType];

export const PrincipalType = {
    User: "User",
    Group: "Group",
    ServicePrincipal: "ServicePrincipal",
    ForeignGroup: "ForeignGroup",
    Device: "Device",
} as const;

/**
 * The principal type of the assigned principal ID.
 */
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];

export const PublicNetworkAccessOptions = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

export type PublicNetworkAccessOptions = (typeof PublicNetworkAccessOptions)[keyof typeof PublicNetworkAccessOptions];

export const ResourceIdentityType = {
    /**
     * Indicates that a system assigned identity is associated with the resource.
     */
    SystemAssigned: "SystemAssigned",
    /**
     * Indicates that a system assigned identity is associated with the resource.
     */
    UserAssigned: "UserAssigned",
    /**
     * Indicates that no identity is associated with the resource or that the existing identity should be removed.
     */
    None: "None",
} as const;

/**
 * The identity type. This is the only required field when adding a system or user assigned identity to a resource.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];

export const SelectorKind = {
    /**
     * The selector kind to filter policies by the resource location.
     */
    ResourceLocation: "resourceLocation",
    /**
     * The selector kind to filter policies by the resource type.
     */
    ResourceType: "resourceType",
    /**
     * The selector kind to filter policies by the resource without location.
     */
    ResourceWithoutLocation: "resourceWithoutLocation",
    /**
     * The selector kind to filter policies by the policy definition reference ID.
     */
    PolicyDefinitionReferenceId: "policyDefinitionReferenceId",
} as const;

/**
 * The selector kind.
 */
export type SelectorKind = (typeof SelectorKind)[keyof typeof SelectorKind];
