// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20190801preview from "./v20190801preview/output";
export * as v20190901preview from "./v20190901preview/output";
export * as v20200101preview from "./v20200101preview/output";
export * as v20200401 from "./v20200401/output";
export * as v20201001 from "./v20201001/output";
export * as v20210101 from "./v20210101/output";
export * as v20210601 from "./v20210601/output";
export * as v20220101 from "./v20220101/output";
export * as v20220601 from "./v20220601/output";
export * as v20221001 from "./v20221001/output";
/**
 * The properties that define a BGP session.
 */
export interface BgpSessionResponse {
    /**
     * The maximum number of prefixes advertised over the IPv4 session.
     */
    maxPrefixesAdvertisedV4?: number;
    /**
     * The maximum number of prefixes advertised over the IPv6 session.
     */
    maxPrefixesAdvertisedV6?: number;
    /**
     * The MD5 authentication key of the session.
     */
    md5AuthenticationKey?: string;
    /**
     * The IPv4 session address on Microsoft's end.
     */
    microsoftSessionIPv4Address?: string;
    /**
     * The IPv6 session address on Microsoft's end.
     */
    microsoftSessionIPv6Address?: string;
    /**
     * The IPv4 session address on peer's end.
     */
    peerSessionIPv4Address?: string;
    /**
     * The IPv6 session address on peer's end.
     */
    peerSessionIPv6Address?: string;
    /**
     * The IPv4 prefix that contains both ends' IPv4 addresses.
     */
    sessionPrefixV4?: string;
    /**
     * The IPv6 prefix that contains both ends' IPv6 addresses.
     */
    sessionPrefixV6?: string;
    /**
     * The state of the IPv4 session.
     */
    sessionStateV4: string;
    /**
     * The state of the IPv6 session.
     */
    sessionStateV6: string;
}

/**
 * The contact detail class.
 */
export interface ContactDetailResponse {
    /**
     * The e-mail address of the contact.
     */
    email?: string;
    /**
     * The phone number of the contact.
     */
    phone?: string;
    /**
     * The role of the contact.
     */
    role?: string;
}

/**
 * The properties that define a direct connection.
 */
export interface DirectConnectionResponse {
    /**
     * The bandwidth of the connection.
     */
    bandwidthInMbps?: number;
    /**
     * The BGP session associated with the connection.
     */
    bgpSession?: outputs.peering.BgpSessionResponse;
    /**
     * The unique identifier (GUID) for the connection.
     */
    connectionIdentifier?: string;
    /**
     * The state of the connection.
     */
    connectionState: string;
    /**
     * The error message related to the connection state, if any.
     */
    errorMessage: string;
    /**
     * The ID used within Microsoft's peering provisioning system to track the connection
     */
    microsoftTrackingId: string;
    /**
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     */
    peeringDBFacilityId?: number;
    /**
     * The bandwidth that is actually provisioned.
     */
    provisionedBandwidthInMbps: number;
    /**
     * The field indicating if Microsoft provides session ip addresses.
     */
    sessionAddressProvider?: string;
    /**
     * The flag that indicates whether or not the connection is used for peering service.
     */
    useForPeeringService?: boolean;
}

/**
 * The properties that define an exchange connection.
 */
export interface ExchangeConnectionResponse {
    /**
     * The BGP session associated with the connection.
     */
    bgpSession?: outputs.peering.BgpSessionResponse;
    /**
     * The unique identifier (GUID) for the connection.
     */
    connectionIdentifier?: string;
    /**
     * The state of the connection.
     */
    connectionState: string;
    /**
     * The error message related to the connection state, if any.
     */
    errorMessage: string;
    /**
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     */
    peeringDBFacilityId?: number;
}

/**
 * The properties that define a direct peering.
 */
export interface PeeringPropertiesDirectResponse {
    /**
     * The set of connections that constitute a direct peering.
     */
    connections?: outputs.peering.DirectConnectionResponse[];
    /**
     * The type of direct peering.
     */
    directPeeringType?: string;
    /**
     * The reference of the peer ASN.
     */
    peerAsn?: outputs.peering.SubResourceResponse;
    /**
     * The flag that indicates whether or not the peering is used for peering service.
     */
    useForPeeringService: boolean;
}

/**
 * The properties that define an exchange peering.
 */
export interface PeeringPropertiesExchangeResponse {
    /**
     * The set of connections that constitute an exchange peering.
     */
    connections?: outputs.peering.ExchangeConnectionResponse[];
    /**
     * The reference of the peer ASN.
     */
    peerAsn?: outputs.peering.SubResourceResponse;
}

/**
 * The details of the event associated with a prefix.
 */
export interface PeeringServicePrefixEventResponse {
    /**
     * The description of the event associated with a prefix.
     */
    eventDescription: string;
    /**
     * The level of the event associated with a prefix.
     */
    eventLevel: string;
    /**
     * The summary of the event associated with a prefix.
     */
    eventSummary: string;
    /**
     * The timestamp of the event associated with a prefix.
     */
    eventTimestamp: string;
    /**
     * The type of the event associated with a prefix.
     */
    eventType: string;
}

/**
 * The SKU that defines the type of the peering service.
 */
export interface PeeringServiceSkuResponse {
    /**
     * The name of the peering service SKU.
     */
    name?: string;
}

/**
 * The SKU that defines the tier and kind of the peering.
 */
export interface PeeringSkuResponse {
    /**
     * The family of the peering SKU.
     */
    family?: string;
    /**
     * The name of the peering SKU.
     */
    name?: string;
    /**
     * The size of the peering SKU.
     */
    size?: string;
    /**
     * The tier of the peering SKU.
     */
    tier?: string;
}

/**
 * The sub resource.
 */
export interface SubResourceResponse {
    /**
     * The identifier of the referenced resource.
     */
    id?: string;
}

