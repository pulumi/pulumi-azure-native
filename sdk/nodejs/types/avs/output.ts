// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20200320 from "./v20200320/output";
export * as v20200717preview from "./v20200717preview/output";
export * as v20210101preview from "./v20210101preview/output";
export * as v20210601 from "./v20210601/output";
export * as v20211201 from "./v20211201/output";
export * as v20220501 from "./v20220501/output";
/**
 * An ExpressRoute Circuit
 */
export interface CircuitResponse {
    /**
     * Identifier of the ExpressRoute Circuit (Microsoft Colo only)
     */
    expressRouteID: string;
    /**
     * ExpressRoute Circuit private peering identifier
     */
    expressRoutePrivatePeeringID: string;
    /**
     * CIDR of primary subnet
     */
    primarySubnet: string;
    /**
     * CIDR of secondary subnet
     */
    secondarySubnet: string;
}

/**
 * An iSCSI volume from Microsoft.StoragePool provider
 */
export interface DiskPoolVolumeResponse {
    /**
     * iSCSI provider target IP address list
     */
    endpoints?: string[];
    /**
     * Name of the LUN to be used
     */
    lunName?: string;
}

/**
 * Endpoint addresses
 */
export interface EndpointsResponse {
    /**
     * Endpoint for the HCX Cloud Manager
     */
    hcxCloudManager: string;
    /**
     * Endpoint for the NSX-T Data Center manager
     */
    nsxtManager: string;
    /**
     * Endpoint for Virtual Center Server Appliance
     */
    vcsa: string;
}

/**
 * vCenter Single Sign On Identity Source
 */
export interface IdentitySourceResponse {
    /**
     * The domain's NetBIOS name
     */
    alias?: string;
    /**
     * The base distinguished name for groups
     */
    baseGroupDN?: string;
    /**
     * The base distinguished name for users
     */
    baseUserDN?: string;
    /**
     * The domain's dns name
     */
    domain?: string;
    /**
     * The name of the identity source
     */
    name?: string;
    /**
     * The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
     */
    password?: string;
    /**
     * Primary server URL
     */
    primaryServer?: string;
    /**
     * Secondary server URL
     */
    secondaryServer?: string;
    /**
     * Protect LDAP communication using SSL certificate (LDAPS)
     */
    ssl?: string;
    /**
     * The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
     */
    username?: string;
}

/**
 * The properties of a default cluster
 */
export interface ManagementClusterResponse {
    /**
     * The identity
     */
    clusterId: number;
    /**
     * The cluster size
     */
    clusterSize: number;
    /**
     * The hosts
     */
    hosts: string[];
    /**
     * The state of the cluster provisioning
     */
    provisioningState: string;
}

/**
 * An Azure NetApp Files volume from Microsoft.NetApp provider
 */
export interface NetAppVolumeResponse {
    /**
     * File path through which the NFS volume is exposed by the provider
     */
    nfsFilePath?: string;
    /**
     * IP address of the NFS provider
     */
    nfsProviderIp?: string;
}

/**
 * a powershell credential object
 */
export interface PSCredentialExecutionParameterResponse {
    /**
     * The parameter name
     */
    name: string;
    /**
     * password for login
     */
    password?: string;
    /**
     * The type of execution parameter
     * Expected value is 'Credential'.
     */
    type: "Credential";
    /**
     * username for login
     */
    username?: string;
}

/**
 * a plain text value execution parameter
 */
export interface ScriptSecureStringExecutionParameterResponse {
    /**
     * The parameter name
     */
    name: string;
    /**
     * A secure value for the passed parameter, not to be stored in logs
     */
    secureValue?: string;
    /**
     * The type of execution parameter
     * Expected value is 'SecureValue'.
     */
    type: "SecureValue";
}

/**
 * a plain text value execution parameter
 */
export interface ScriptStringExecutionParameterResponse {
    /**
     * The parameter name
     */
    name: string;
    /**
     * The type of execution parameter
     * Expected value is 'Value'.
     */
    type: "Value";
    /**
     * The value for the passed parameter
     */
    value?: string;
}

/**
 * The resource model definition representing SKU
 */
export interface SkuResponse {
    /**
     * The name of the SKU.
     */
    name: string;
}

/**
 * VM-Host placement policy properties
 */
export interface VmHostPlacementPolicyPropertiesResponse {
    /**
     * placement policy affinity type
     */
    affinityType: string;
    /**
     * Display name of the placement policy
     */
    displayName?: string;
    /**
     * Host members list
     */
    hostMembers: string[];
    /**
     * The provisioning state
     */
    provisioningState: string;
    /**
     * Whether the placement policy is enabled or disabled
     */
    state?: string;
    /**
     * placement policy type
     * Expected value is 'VmHost'.
     */
    type: "VmHost";
    /**
     * Virtual machine members list
     */
    vmMembers: string[];
}

/**
 * VM-VM placement policy properties
 */
export interface VmVmPlacementPolicyPropertiesResponse {
    /**
     * placement policy affinity type
     */
    affinityType: string;
    /**
     * Display name of the placement policy
     */
    displayName?: string;
    /**
     * The provisioning state
     */
    provisioningState: string;
    /**
     * Whether the placement policy is enabled or disabled
     */
    state?: string;
    /**
     * placement policy type
     * Expected value is 'VmVm'.
     */
    type: "VmVm";
    /**
     * Virtual machine members list
     */
    vmMembers: string[];
}

/**
 * Ports and any VIF attached to segment.
 */
export interface WorkloadNetworkSegmentPortVifResponse {
    /**
     * Name of port or VIF attached to segment.
     */
    portName?: string;
}

/**
 * Subnet configuration for segment
 */
export interface WorkloadNetworkSegmentSubnetResponse {
    /**
     * DHCP Range assigned for subnet.
     */
    dhcpRanges?: string[];
    /**
     * Gateway address.
     */
    gatewayAddress?: string;
}

