// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20180630preview from "./v20180630preview/input";
export * as v20181120 from "./v20181120/input";
export * as v20200625 from "./v20200625/input";
export * as v20210125 from "./v20210125/input";
export * as v20220125 from "./v20220125/input";
/**
 * Represents a configuration parameter.
 */
export interface ConfigurationParameterArgs {
    /**
     * Name of the configuration parameter.
     */
    name?: pulumi.Input<string>;
    /**
     * Value of the configuration parameter.
     */
    value?: pulumi.Input<string>;
}

/**
 * Configuration setting of LCM (Local Configuration Manager).
 */
export interface ConfigurationSettingArgs {
    /**
     * Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
     */
    actionAfterReboot?: pulumi.Input<string | enums.guestconfiguration.ActionAfterReboot>;
    /**
     * If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
     */
    allowModuleOverwrite?: pulumi.Input<boolean>;
    /**
     * Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
     */
    configurationMode?: pulumi.Input<string | enums.guestconfiguration.ConfigurationMode>;
    /**
     * How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
     */
    configurationModeFrequencyMins?: pulumi.Input<number>;
    /**
     * Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
     */
    rebootIfNeeded?: pulumi.Input<boolean>;
    /**
     * The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
     */
    refreshFrequencyMins?: pulumi.Input<number>;
}
/**
 * configurationSettingArgsProvideDefaults sets the appropriate defaults for ConfigurationSettingArgs
 */
export function configurationSettingArgsProvideDefaults(val: ConfigurationSettingArgs): ConfigurationSettingArgs {
    return {
        ...val,
        configurationModeFrequencyMins: (val.configurationModeFrequencyMins) ?? 15,
        refreshFrequencyMins: (val.refreshFrequencyMins) ?? 30,
    };
}

/**
 * Guest configuration assignment properties.
 */
export interface GuestConfigurationAssignmentPropertiesArgs {
    /**
     * The source which initiated the guest configuration assignment. Ex: Azure Policy
     */
    context?: pulumi.Input<string>;
    /**
     * The guest configuration to assign.
     */
    guestConfiguration?: pulumi.Input<inputs.guestconfiguration.GuestConfigurationNavigationArgs>;
}
/**
 * guestConfigurationAssignmentPropertiesArgsProvideDefaults sets the appropriate defaults for GuestConfigurationAssignmentPropertiesArgs
 */
export function guestConfigurationAssignmentPropertiesArgsProvideDefaults(val: GuestConfigurationAssignmentPropertiesArgs): GuestConfigurationAssignmentPropertiesArgs {
    return {
        ...val,
        guestConfiguration: (val.guestConfiguration ? pulumi.output(val.guestConfiguration).apply(inputs.guestconfiguration.guestConfigurationNavigationArgsProvideDefaults) : undefined),
    };
}

/**
 * Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
 */
export interface GuestConfigurationNavigationArgs {
    /**
     * Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
     */
    assignmentType?: pulumi.Input<string | enums.guestconfiguration.AssignmentType>;
    /**
     * The configuration parameters for the guest configuration.
     */
    configurationParameter?: pulumi.Input<pulumi.Input<inputs.guestconfiguration.ConfigurationParameterArgs>[]>;
    /**
     * The protected configuration parameters for the guest configuration.
     */
    configurationProtectedParameter?: pulumi.Input<pulumi.Input<inputs.guestconfiguration.ConfigurationParameterArgs>[]>;
    /**
     * The configuration setting for the guest configuration.
     */
    configurationSetting?: pulumi.Input<inputs.guestconfiguration.ConfigurationSettingArgs>;
    /**
     * Combined hash of the guest configuration package and configuration parameters.
     */
    contentHash?: pulumi.Input<string>;
    /**
     * Uri of the storage where guest configuration package is uploaded.
     */
    contentUri?: pulumi.Input<string>;
    /**
     * Kind of the guest configuration. For example:DSC
     */
    kind?: pulumi.Input<string | enums.guestconfiguration.Kind>;
    /**
     * Name of the guest configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Version of the guest configuration.
     */
    version?: pulumi.Input<string>;
}
/**
 * guestConfigurationNavigationArgsProvideDefaults sets the appropriate defaults for GuestConfigurationNavigationArgs
 */
export function guestConfigurationNavigationArgsProvideDefaults(val: GuestConfigurationNavigationArgs): GuestConfigurationNavigationArgs {
    return {
        ...val,
        configurationSetting: (val.configurationSetting ? pulumi.output(val.configurationSetting).apply(inputs.guestconfiguration.configurationSettingArgsProvideDefaults) : undefined),
    };
}

