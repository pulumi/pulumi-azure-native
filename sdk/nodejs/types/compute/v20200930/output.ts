// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Data used when creating a disk.
 */
export interface CreationDataResponse {
    /**
     * This enumerates the possible sources of a disk's creation.
     */
    createOption: string;
    /**
     * Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
     */
    galleryImageReference?: outputs.compute.v20200930.ImageDiskReferenceResponse;
    /**
     * Disk source information.
     */
    imageReference?: outputs.compute.v20200930.ImageDiskReferenceResponse;
    /**
     * Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
     */
    logicalSectorSize?: number;
    /**
     * If createOption is Copy, this is the ARM id of the source snapshot or disk.
     */
    sourceResourceId?: string;
    /**
     * If this field is set, this is the unique id identifying the source of this resource.
     */
    sourceUniqueId: string;
    /**
     * If createOption is Import, this is the URI of a blob to be imported into a managed disk.
     */
    sourceUri?: string;
    /**
     * Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
     */
    storageAccountId?: string;
    /**
     * If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
     */
    uploadSizeBytes?: number;
}

/**
 * Contains encryption settings for a data disk image.
 */
export interface DataDiskImageEncryptionResponse {
    /**
     * A relative URI containing the resource ID of the disk encryption set.
     */
    diskEncryptionSetId?: string;
    /**
     * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
     */
    lun: number;
}

/**
 * Describes the disallowed disk types.
 */
export interface DisallowedResponse {
    /**
     * A list of disk types.
     */
    diskTypes?: string[];
}

/**
 * The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
 */
export interface DiskSkuResponse {
    /**
     * The sku name.
     */
    name?: string;
    /**
     * The sku tier.
     */
    tier: string;
}

/**
 * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
 */
export interface EncryptionImagesResponse {
    /**
     * A list of encryption specifications for data disk images.
     */
    dataDiskImages?: outputs.compute.v20200930.DataDiskImageEncryptionResponse[];
    /**
     * Contains encryption settings for an OS disk image.
     */
    osDiskImage?: outputs.compute.v20200930.OSDiskImageEncryptionResponse;
}

/**
 * Encryption at rest settings for disk or snapshot
 */
export interface EncryptionResponse {
    /**
     * ResourceId of the disk encryption set to use for enabling encryption at rest.
     */
    diskEncryptionSetId?: string;
    /**
     * The type of key used to encrypt the data of the disk.
     */
    type?: string;
}

/**
 * The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
 */
export interface EncryptionSetIdentityResponse {
    /**
     * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     */
    principalId: string;
    /**
     * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     */
    tenantId: string;
    /**
     * The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
     */
    type?: string;
}

/**
 * Encryption settings for disk or snapshot
 */
export interface EncryptionSettingsCollectionResponse {
    /**
     * Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
     */
    enabled: boolean;
    /**
     * A collection of encryption settings, one for each disk volume.
     */
    encryptionSettings?: outputs.compute.v20200930.EncryptionSettingsElementResponse[];
    /**
     * Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
     */
    encryptionSettingsVersion?: string;
}

/**
 * Encryption settings for one disk volume.
 */
export interface EncryptionSettingsElementResponse {
    /**
     * Key Vault Secret Url and vault id of the disk encryption key
     */
    diskEncryptionKey?: outputs.compute.v20200930.KeyVaultAndSecretReferenceResponse;
    /**
     * Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
     */
    keyEncryptionKey?: outputs.compute.v20200930.KeyVaultAndKeyReferenceResponse;
}

/**
 * The complex type of the extended location.
 */
export interface ExtendedLocationResponse {
    /**
     * The name of the extended location.
     */
    name?: string;
    /**
     * The type of the extended location.
     */
    type?: string;
}

/**
 * The publishing profile of a gallery image version.
 */
export interface GalleryApplicationVersionPublishingProfileResponse {
    /**
     * Optional. Whether or not this application reports health.
     */
    enableHealthCheck?: boolean;
    /**
     * The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
     */
    endOfLifeDate?: string;
    /**
     * If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
     */
    excludeFromLatest?: boolean;
    manageActions?: outputs.compute.v20200930.UserArtifactManageResponse;
    /**
     * The timestamp for when the gallery image version is published.
     */
    publishedDate: string;
    /**
     * The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
     */
    replicaCount?: number;
    /**
     * The source image from which the Image Version is going to be created.
     */
    source: outputs.compute.v20200930.UserArtifactSourceResponse;
    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     */
    storageAccountType?: string;
    /**
     * The target regions where the Image Version is going to be replicated to. This property is updatable.
     */
    targetRegions?: outputs.compute.v20200930.TargetRegionResponse[];
}

/**
 * The gallery artifact version source.
 */
export interface GalleryArtifactVersionSourceResponse {
    /**
     * The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource.
     */
    id?: string;
    /**
     * The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
     */
    uri?: string;
}

/**
 * This is the data disk image.
 */
export interface GalleryDataDiskImageResponse {
    /**
     * The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
     */
    hostCaching?: string;
    /**
     * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
     */
    lun: number;
    /**
     * This property indicates the size of the VHD to be created.
     */
    sizeInGB: number;
    /**
     * The gallery artifact version source.
     */
    source?: outputs.compute.v20200930.GalleryArtifactVersionSourceResponse;
}

/**
 * Describes the gallery unique name.
 */
export interface GalleryIdentifierResponse {
    /**
     * The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
     */
    uniqueName: string;
}

/**
 * A feature for gallery image.
 */
export interface GalleryImageFeatureResponse {
    /**
     * The name of the gallery image feature.
     */
    name?: string;
    /**
     * The value of the gallery image feature.
     */
    value?: string;
}

/**
 * This is the gallery image definition identifier.
 */
export interface GalleryImageIdentifierResponse {
    /**
     * The name of the gallery image definition offer.
     */
    offer: string;
    /**
     * The name of the gallery image definition publisher.
     */
    publisher: string;
    /**
     * The name of the gallery image definition SKU.
     */
    sku: string;
}

/**
 * The publishing profile of a gallery image Version.
 */
export interface GalleryImageVersionPublishingProfileResponse {
    /**
     * The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
     */
    endOfLifeDate?: string;
    /**
     * If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
     */
    excludeFromLatest?: boolean;
    /**
     * The timestamp for when the gallery image version is published.
     */
    publishedDate: string;
    /**
     * The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
     */
    replicaCount?: number;
    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     */
    storageAccountType?: string;
    /**
     * The target regions where the Image Version is going to be replicated to. This property is updatable.
     */
    targetRegions?: outputs.compute.v20200930.TargetRegionResponse[];
}

/**
 * This is the storage profile of a Gallery Image Version.
 */
export interface GalleryImageVersionStorageProfileResponse {
    /**
     * A list of data disk images.
     */
    dataDiskImages?: outputs.compute.v20200930.GalleryDataDiskImageResponse[];
    /**
     * This is the OS disk image.
     */
    osDiskImage?: outputs.compute.v20200930.GalleryOSDiskImageResponse;
    /**
     * The gallery artifact version source.
     */
    source?: outputs.compute.v20200930.GalleryArtifactVersionSourceResponse;
}

/**
 * This is the OS disk image.
 */
export interface GalleryOSDiskImageResponse {
    /**
     * The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
     */
    hostCaching?: string;
    /**
     * This property indicates the size of the VHD to be created.
     */
    sizeInGB: number;
    /**
     * The gallery artifact version source.
     */
    source?: outputs.compute.v20200930.GalleryArtifactVersionSourceResponse;
}

/**
 * The source image used for creating the disk.
 */
export interface ImageDiskReferenceResponse {
    /**
     * A relative uri containing either a Platform Image Repository or user image reference.
     */
    id: string;
    /**
     * If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
     */
    lun?: number;
}

/**
 * Describes the gallery image definition purchase plan. This is used by marketplace images.
 */
export interface ImagePurchasePlanResponse {
    /**
     * The plan ID.
     */
    name?: string;
    /**
     * The product ID.
     */
    product?: string;
    /**
     * The publisher ID.
     */
    publisher?: string;
}

/**
 * Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
 */
export interface KeyForDiskEncryptionSetResponse {
    /**
     * Fully versioned Key Url pointing to a key in KeyVault
     */
    keyUrl: string;
    /**
     * Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
     */
    sourceVault?: outputs.compute.v20200930.SourceVaultResponse;
}

/**
 * Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
 */
export interface KeyVaultAndKeyReferenceResponse {
    /**
     * Url pointing to a key or secret in KeyVault
     */
    keyUrl: string;
    /**
     * Resource id of the KeyVault containing the key or secret
     */
    sourceVault: outputs.compute.v20200930.SourceVaultResponse;
}

/**
 * Key Vault Secret Url and vault id of the encryption key 
 */
export interface KeyVaultAndSecretReferenceResponse {
    /**
     * Url pointing to a key or secret in KeyVault
     */
    secretUrl: string;
    /**
     * Resource id of the KeyVault containing the key or secret
     */
    sourceVault: outputs.compute.v20200930.SourceVaultResponse;
}

/**
 * Contains encryption settings for an OS disk image.
 */
export interface OSDiskImageEncryptionResponse {
    /**
     * A relative URI containing the resource ID of the disk encryption set.
     */
    diskEncryptionSetId?: string;
}

/**
 * The Private Endpoint Connection resource.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * private endpoint connection Id
     */
    id: string;
    /**
     * private endpoint connection name
     */
    name: string;
    /**
     * The resource of private end point.
     */
    privateEndpoint?: outputs.compute.v20200930.PrivateEndpointResponse;
    /**
     * A collection of information about the state of the connection between DiskAccess and Virtual Network.
     */
    privateLinkServiceConnectionState: outputs.compute.v20200930.PrivateLinkServiceConnectionStateResponse;
    /**
     * The provisioning state of the private endpoint connection resource.
     */
    provisioningState: string;
    /**
     * private endpoint connection type
     */
    type: string;
}

/**
 * The Private Endpoint resource.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint
     */
    id: string;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

/**
 * Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
 */
export interface PurchasePlanResponse {
    /**
     * The plan ID.
     */
    name: string;
    /**
     * Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
     */
    product: string;
    /**
     * The Offer Promotion Code.
     */
    promotionCode?: string;
    /**
     * The publisher ID.
     */
    publisher: string;
}

/**
 * The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
 */
export interface RecommendedMachineConfigurationResponse {
    /**
     * Describes the resource range.
     */
    memory?: outputs.compute.v20200930.ResourceRangeResponse;
    /**
     * Describes the resource range.
     */
    vCPUs?: outputs.compute.v20200930.ResourceRangeResponse;
}

/**
 * This is the regional replication status.
 */
export interface RegionalReplicationStatusResponse {
    /**
     * The details of the replication status.
     */
    details: string;
    /**
     * It indicates progress of the replication job.
     */
    progress: number;
    /**
     * The region to which the gallery image version is being replicated to.
     */
    region: string;
    /**
     * This is the regional replication state.
     */
    state: string;
}

/**
 * This is the replication status of the gallery image version.
 */
export interface ReplicationStatusResponse {
    /**
     * This is the aggregated replication status based on all the regional replication status flags.
     */
    aggregatedState: string;
    /**
     * This is a summary of replication status for each region.
     */
    summary: outputs.compute.v20200930.RegionalReplicationStatusResponse[];
}

/**
 * Describes the resource range.
 */
export interface ResourceRangeResponse {
    /**
     * The maximum number of the resource.
     */
    max?: number;
    /**
     * The minimum number of the resource.
     */
    min?: number;
}

export interface ShareInfoElementResponse {
    /**
     * A relative URI containing the ID of the VM that has the disk attached.
     */
    vmUri: string;
}

/**
 * Group of the gallery sharing profile
 */
export interface SharingProfileGroupResponse {
    /**
     * A list of subscription/tenant ids the gallery is aimed to be shared to.
     */
    ids?: string[];
    /**
     * This property allows you to specify the type of sharing group. <br><br> Possible values are: <br><br> **Subscriptions** <br><br> **AADTenants**
     */
    type?: string;
}

/**
 * Profile for gallery sharing to subscription or tenant
 */
export interface SharingProfileResponse {
    /**
     * A list of sharing profile groups.
     */
    groups: outputs.compute.v20200930.SharingProfileGroupResponse[];
    /**
     * This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups**
     */
    permissions?: string;
}

/**
 * The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
 */
export interface SnapshotSkuResponse {
    /**
     * The sku name.
     */
    name?: string;
    /**
     * The sku tier.
     */
    tier: string;
}

/**
 * The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
 */
export interface SourceVaultResponse {
    /**
     * Resource Id
     */
    id?: string;
}

/**
 * Describes the target region information.
 */
export interface TargetRegionResponse {
    /**
     * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
     */
    encryption?: outputs.compute.v20200930.EncryptionImagesResponse;
    /**
     * The name of the region.
     */
    name: string;
    /**
     * The number of replicas of the Image Version to be created per region. This property is updatable.
     */
    regionalReplicaCount?: number;
    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     */
    storageAccountType?: string;
}

export interface UserArtifactManageResponse {
    /**
     * Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
     */
    install: string;
    /**
     * Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
     */
    remove: string;
    /**
     * Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
     */
    update?: string;
}

/**
 * The source image from which the Image Version is going to be created.
 */
export interface UserArtifactSourceResponse {
    /**
     * Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
     */
    defaultConfigurationLink?: string;
    /**
     * Required. The mediaLink of the artifact, must be a readable storage page blob.
     */
    mediaLink: string;
}

