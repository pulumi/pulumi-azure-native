// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Data used when creating a disk.
 */
export interface CreationDataResponse {
    /**
     * This enumerates the possible sources of a disk's creation.
     */
    createOption: string;
    /**
     * Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
     */
    galleryImageReference?: outputs.compute.v20200630.ImageDiskReferenceResponse;
    /**
     * Disk source information.
     */
    imageReference?: outputs.compute.v20200630.ImageDiskReferenceResponse;
    /**
     * Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
     */
    logicalSectorSize?: number;
    /**
     * If createOption is Copy, this is the ARM id of the source snapshot or disk.
     */
    sourceResourceId?: string;
    /**
     * If this field is set, this is the unique id identifying the source of this resource.
     */
    sourceUniqueId: string;
    /**
     * If createOption is Import, this is the URI of a blob to be imported into a managed disk.
     */
    sourceUri?: string;
    /**
     * Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
     */
    storageAccountId?: string;
    /**
     * If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
     */
    uploadSizeBytes?: number;
}

/**
 * The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
 */
export interface DiskSkuResponse {
    /**
     * The sku name.
     */
    name?: string;
    /**
     * The sku tier.
     */
    tier: string;
}

/**
 * Encryption at rest settings for disk or snapshot
 */
export interface EncryptionResponse {
    /**
     * ResourceId of the disk encryption set to use for enabling encryption at rest.
     */
    diskEncryptionSetId?: string;
    /**
     * The type of key used to encrypt the data of the disk.
     */
    type?: string;
}

/**
 * The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
 */
export interface EncryptionSetIdentityResponse {
    /**
     * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     */
    principalId: string;
    /**
     * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     */
    tenantId: string;
    /**
     * The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
     */
    type?: string;
}

/**
 * Encryption settings for disk or snapshot
 */
export interface EncryptionSettingsCollectionResponse {
    /**
     * Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
     */
    enabled: boolean;
    /**
     * A collection of encryption settings, one for each disk volume.
     */
    encryptionSettings?: outputs.compute.v20200630.EncryptionSettingsElementResponse[];
    /**
     * Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
     */
    encryptionSettingsVersion?: string;
}

/**
 * Encryption settings for one disk volume.
 */
export interface EncryptionSettingsElementResponse {
    /**
     * Key Vault Secret Url and vault id of the disk encryption key
     */
    diskEncryptionKey?: outputs.compute.v20200630.KeyVaultAndSecretReferenceResponse;
    /**
     * Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
     */
    keyEncryptionKey?: outputs.compute.v20200630.KeyVaultAndKeyReferenceResponse;
}

/**
 * The source image used for creating the disk.
 */
export interface ImageDiskReferenceResponse {
    /**
     * A relative uri containing either a Platform Image Repository or user image reference.
     */
    id: string;
    /**
     * If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
     */
    lun?: number;
}

/**
 * Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
 */
export interface KeyVaultAndKeyReferenceResponse {
    /**
     * Url pointing to a key or secret in KeyVault
     */
    keyUrl: string;
    /**
     * Resource id of the KeyVault containing the key or secret
     */
    sourceVault: outputs.compute.v20200630.SourceVaultResponse;
}

/**
 * Key Vault Secret Url and vault id of the encryption key 
 */
export interface KeyVaultAndSecretReferenceResponse {
    /**
     * Url pointing to a key or secret in KeyVault
     */
    secretUrl: string;
    /**
     * Resource id of the KeyVault containing the key or secret
     */
    sourceVault: outputs.compute.v20200630.SourceVaultResponse;
}

/**
 * The Private Endpoint Connection resource.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * private endpoint connection Id
     */
    id: string;
    /**
     * private endpoint connection name
     */
    name: string;
    /**
     * The resource of private end point.
     */
    privateEndpoint?: outputs.compute.v20200630.PrivateEndpointResponse;
    /**
     * A collection of information about the state of the connection between DiskAccess and Virtual Network.
     */
    privateLinkServiceConnectionState: outputs.compute.v20200630.PrivateLinkServiceConnectionStateResponse;
    /**
     * The provisioning state of the private endpoint connection resource.
     */
    provisioningState: string;
    /**
     * private endpoint connection type
     */
    type: string;
}

/**
 * The Private Endpoint resource.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint
     */
    id: string;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

export interface ShareInfoElementResponse {
    /**
     * A relative URI containing the ID of the VM that has the disk attached.
     */
    vmUri: string;
}

/**
 * The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
 */
export interface SnapshotSkuResponse {
    /**
     * The sku name.
     */
    name?: string;
    /**
     * The sku tier.
     */
    tier: string;
}

/**
 * The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
 */
export interface SourceVaultResponse {
    /**
     * Resource Id
     */
    id?: string;
}

