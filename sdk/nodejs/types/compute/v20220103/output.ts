// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Information of community gallery if current gallery is shared to community
 */
export interface CommunityGalleryInfoResponse {
    /**
     * Contains info about whether community gallery sharing is enabled.
     */
    communityGalleryEnabled: boolean;
    /**
     * End-user license agreement for community gallery image.
     */
    eula?: string;
    /**
     * The prefix of the gallery name that will be displayed publicly. Visible to all users.
     */
    publicNamePrefix?: string;
    /**
     * Community gallery public name list.
     */
    publicNames: string[];
    /**
     * Community gallery publisher support email. The email address of the publisher. Visible to all users.
     */
    publisherContact?: string;
    /**
     * The link to the publisher website. Visible to all users.
     */
    publisherUri?: string;
}

/**
 * Contains encryption settings for a data disk image.
 */
export interface DataDiskImageEncryptionResponse {
    /**
     * A relative URI containing the resource ID of the disk encryption set.
     */
    diskEncryptionSetId?: string;
    /**
     * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
     */
    lun: number;
}

/**
 * Describes the disallowed disk types.
 */
export interface DisallowedResponse {
    /**
     * A list of disk types.
     */
    diskTypes?: string[];
}

/**
 * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
 */
export interface EncryptionImagesResponse {
    /**
     * A list of encryption specifications for data disk images.
     */
    dataDiskImages?: outputs.compute.v20220103.DataDiskImageEncryptionResponse[];
    /**
     * Contains encryption settings for an OS disk image.
     */
    osDiskImage?: outputs.compute.v20220103.OSDiskImageEncryptionResponse;
}

/**
 * The publishing profile of a gallery image version.
 */
export interface GalleryApplicationVersionPublishingProfileResponse {
    /**
     * Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only.
     */
    advancedSettings?: {[key: string]: string};
    /**
     * Optional. Whether or not this application reports health.
     */
    enableHealthCheck?: boolean;
    /**
     * The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
     */
    endOfLifeDate?: string;
    /**
     * If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
     */
    excludeFromLatest?: boolean;
    manageActions?: outputs.compute.v20220103.UserArtifactManageResponse;
    /**
     * The timestamp for when the gallery image version is published.
     */
    publishedDate: string;
    /**
     * The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
     */
    replicaCount?: number;
    /**
     * Optional parameter which specifies the mode to be used for replication. This property is not updatable.
     */
    replicationMode?: string;
    /**
     * Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
     */
    settings?: outputs.compute.v20220103.UserArtifactSettingsResponse;
    /**
     * The source image from which the Image Version is going to be created.
     */
    source: outputs.compute.v20220103.UserArtifactSourceResponse;
    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     */
    storageAccountType?: string;
    /**
     * The target extended locations where the Image Version is going to be replicated to. This property is updatable.
     */
    targetExtendedLocations?: outputs.compute.v20220103.GalleryTargetExtendedLocationResponse[];
    /**
     * The target regions where the Image Version is going to be replicated to. This property is updatable.
     */
    targetRegions?: outputs.compute.v20220103.TargetRegionResponse[];
}

/**
 * The gallery artifact version source.
 */
export interface GalleryArtifactVersionSourceResponse {
    /**
     * The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource.
     */
    id?: string;
    /**
     * The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
     */
    uri?: string;
}

/**
 * This is the data disk image.
 */
export interface GalleryDataDiskImageResponse {
    /**
     * The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
     */
    hostCaching?: string;
    /**
     * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
     */
    lun: number;
    /**
     * This property indicates the size of the VHD to be created.
     */
    sizeInGB: number;
    /**
     * The gallery artifact version source.
     */
    source?: outputs.compute.v20220103.GalleryArtifactVersionSourceResponse;
}

/**
 * The name of the extended location.
 */
export interface GalleryExtendedLocationResponse {
    name?: string;
    /**
     * It is type of the extended location.
     */
    type?: string;
}

/**
 * Describes the gallery unique name.
 */
export interface GalleryIdentifierResponse {
    /**
     * The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
     */
    uniqueName: string;
}

/**
 * A feature for gallery image.
 */
export interface GalleryImageFeatureResponse {
    /**
     * The name of the gallery image feature.
     */
    name?: string;
    /**
     * The value of the gallery image feature.
     */
    value?: string;
}

/**
 * This is the gallery image definition identifier.
 */
export interface GalleryImageIdentifierResponse {
    /**
     * The name of the gallery image definition offer.
     */
    offer: string;
    /**
     * The name of the gallery image definition publisher.
     */
    publisher: string;
    /**
     * The name of the gallery image definition SKU.
     */
    sku: string;
}

/**
 * The publishing profile of a gallery image Version.
 */
export interface GalleryImageVersionPublishingProfileResponse {
    /**
     * The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
     */
    endOfLifeDate?: string;
    /**
     * If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
     */
    excludeFromLatest?: boolean;
    /**
     * The timestamp for when the gallery image version is published.
     */
    publishedDate: string;
    /**
     * The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
     */
    replicaCount?: number;
    /**
     * Optional parameter which specifies the mode to be used for replication. This property is not updatable.
     */
    replicationMode?: string;
    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     */
    storageAccountType?: string;
    /**
     * The target extended locations where the Image Version is going to be replicated to. This property is updatable.
     */
    targetExtendedLocations?: outputs.compute.v20220103.GalleryTargetExtendedLocationResponse[];
    /**
     * The target regions where the Image Version is going to be replicated to. This property is updatable.
     */
    targetRegions?: outputs.compute.v20220103.TargetRegionResponse[];
}

/**
 * This is the storage profile of a Gallery Image Version.
 */
export interface GalleryImageVersionStorageProfileResponse {
    /**
     * A list of data disk images.
     */
    dataDiskImages?: outputs.compute.v20220103.GalleryDataDiskImageResponse[];
    /**
     * This is the OS disk image.
     */
    osDiskImage?: outputs.compute.v20220103.GalleryOSDiskImageResponse;
    /**
     * The gallery artifact version source.
     */
    source?: outputs.compute.v20220103.GalleryArtifactVersionSourceResponse;
}

/**
 * This is the OS disk image.
 */
export interface GalleryOSDiskImageResponse {
    /**
     * The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
     */
    hostCaching?: string;
    /**
     * This property indicates the size of the VHD to be created.
     */
    sizeInGB: number;
    /**
     * The gallery artifact version source.
     */
    source?: outputs.compute.v20220103.GalleryArtifactVersionSourceResponse;
}

export interface GalleryTargetExtendedLocationResponse {
    /**
     * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
     */
    encryption?: outputs.compute.v20220103.EncryptionImagesResponse;
    /**
     * The name of the extended location.
     */
    extendedLocation?: outputs.compute.v20220103.GalleryExtendedLocationResponse;
    /**
     * The number of replicas of the Image Version to be created per extended location. This property is updatable.
     */
    extendedLocationReplicaCount?: number;
    /**
     * The name of the region.
     */
    name?: string;
    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     */
    storageAccountType?: string;
}

/**
 * Describes the gallery image definition purchase plan. This is used by marketplace images.
 */
export interface ImagePurchasePlanResponse {
    /**
     * The plan ID.
     */
    name?: string;
    /**
     * The product ID.
     */
    product?: string;
    /**
     * The publisher ID.
     */
    publisher?: string;
}

/**
 * Contains encryption settings for an OS disk image.
 */
export interface OSDiskImageEncryptionResponse {
    /**
     * A relative URI containing the resource ID of the disk encryption set.
     */
    diskEncryptionSetId?: string;
    /**
     * This property specifies the security profile of an OS disk image.
     */
    securityProfile?: outputs.compute.v20220103.OSDiskImageSecurityProfileResponse;
}

/**
 * Contains security profile for an OS disk image.
 */
export interface OSDiskImageSecurityProfileResponse {
    /**
     * confidential VM encryption types
     */
    confidentialVMEncryptionType?: string;
    /**
     * secure VM disk encryption set id
     */
    secureVMDiskEncryptionSetId?: string;
}

/**
 * The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
 */
export interface RecommendedMachineConfigurationResponse {
    /**
     * Describes the resource range.
     */
    memory?: outputs.compute.v20220103.ResourceRangeResponse;
    /**
     * Describes the resource range.
     */
    vCPUs?: outputs.compute.v20220103.ResourceRangeResponse;
}

/**
 * This is the regional replication status.
 */
export interface RegionalReplicationStatusResponse {
    /**
     * The details of the replication status.
     */
    details: string;
    /**
     * It indicates progress of the replication job.
     */
    progress: number;
    /**
     * The region to which the gallery image version is being replicated to.
     */
    region: string;
    /**
     * This is the regional replication state.
     */
    state: string;
}

/**
 * Gallery regional sharing status
 */
export interface RegionalSharingStatusResponse {
    /**
     * Details of gallery regional sharing failure.
     */
    details?: string;
    /**
     * Region name
     */
    region?: string;
    /**
     * Gallery sharing state in current region
     */
    state: string;
}

/**
 * This is the replication status of the gallery image version.
 */
export interface ReplicationStatusResponse {
    /**
     * This is the aggregated replication status based on all the regional replication status flags.
     */
    aggregatedState: string;
    /**
     * This is a summary of replication status for each region.
     */
    summary: outputs.compute.v20220103.RegionalReplicationStatusResponse[];
}

/**
 * Describes the resource range.
 */
export interface ResourceRangeResponse {
    /**
     * The maximum number of the resource.
     */
    max?: number;
    /**
     * The minimum number of the resource.
     */
    min?: number;
}

/**
 * Group of the gallery sharing profile
 */
export interface SharingProfileGroupResponse {
    /**
     * A list of subscription/tenant ids the gallery is aimed to be shared to.
     */
    ids?: string[];
    /**
     * This property allows you to specify the type of sharing group. <br><br> Possible values are: <br><br> **Subscriptions** <br><br> **AADTenants**
     */
    type?: string;
}

/**
 * Profile for gallery sharing to subscription or tenant
 */
export interface SharingProfileResponse {
    /**
     * Information of community gallery if current gallery is shared to community.
     */
    communityGalleryInfo?: outputs.compute.v20220103.CommunityGalleryInfoResponse;
    /**
     * A list of sharing profile groups.
     */
    groups: outputs.compute.v20220103.SharingProfileGroupResponse[];
    /**
     * This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups** <br><br> **Community**
     */
    permissions?: string;
}

/**
 * Sharing status of current gallery.
 */
export interface SharingStatusResponse {
    /**
     * Aggregated sharing state of current gallery.
     */
    aggregatedState: string;
    /**
     * Summary of all regional sharing status.
     */
    summary?: outputs.compute.v20220103.RegionalSharingStatusResponse[];
}

/**
 * Contains information about the soft deletion policy of the gallery.
 */
export interface SoftDeletePolicyResponse {
    /**
     * Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
     */
    isSoftDeleteEnabled?: boolean;
}

/**
 * Describes the target region information.
 */
export interface TargetRegionResponse {
    /**
     * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
     */
    encryption?: outputs.compute.v20220103.EncryptionImagesResponse;
    /**
     * The name of the region.
     */
    name: string;
    /**
     * The number of replicas of the Image Version to be created per region. This property is updatable.
     */
    regionalReplicaCount?: number;
    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     */
    storageAccountType?: string;
}

export interface UserArtifactManageResponse {
    /**
     * Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
     */
    install: string;
    /**
     * Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
     */
    remove: string;
    /**
     * Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
     */
    update?: string;
}

/**
 * Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
 */
export interface UserArtifactSettingsResponse {
    /**
     * Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
     */
    configFileName?: string;
    /**
     * Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
     */
    packageFileName?: string;
}

/**
 * The source image from which the Image Version is going to be created.
 */
export interface UserArtifactSourceResponse {
    /**
     * Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
     */
    defaultConfigurationLink?: string;
    /**
     * Required. The mediaLink of the artifact, must be a readable storage page blob.
     */
    mediaLink: string;
}

