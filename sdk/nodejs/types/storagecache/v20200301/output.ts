// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Cache encryption settings.
 */
export interface CacheEncryptionSettingsResponse {
    /**
     * Specifies the location of the key encryption key in Key Vault.
     */
    keyEncryptionKey?: outputs.storagecache.v20200301.KeyVaultKeyReferenceResponse;
}

/**
 * An indication of Cache health. Gives more information about health than just that related to provisioning.
 */
export interface CacheHealthResponse {
    /**
     * List of Cache health states.
     */
    state?: string;
    /**
     * Describes explanation of state.
     */
    statusDescription?: string;
}

/**
 * Cache identity properties.
 */
export interface CacheIdentityResponse {
    /**
     * The principal id of the cache.
     */
    principalId: string;
    /**
     * The tenant id associated with the cache.
     */
    tenantId: string;
    /**
     * The type of identity used for the cache
     */
    type?: string;
}

/**
 * Cache network settings.
 */
export interface CacheNetworkSettingsResponse {
    /**
     * The IPv4 maximum transmission unit configured for the subnet.
     */
    mtu?: number;
    /**
     * Array of additional IP addresses used by this Cache.
     */
    utilityAddresses: string[];
}
/**
 * cacheNetworkSettingsResponseProvideDefaults sets the appropriate defaults for CacheNetworkSettingsResponse
 */
export function cacheNetworkSettingsResponseProvideDefaults(val: CacheNetworkSettingsResponse): CacheNetworkSettingsResponse {
    return {
        ...val,
        mtu: (val.mtu) ?? 1500,
    };
}

/**
 * SKU for the Cache.
 */
export interface CacheResponseSku {
    /**
     * SKU name for this Cache.
     */
    name?: string;
}

/**
 * Cache security settings.
 */
export interface CacheSecuritySettingsResponse {
    /**
     * root squash of cache property.
     */
    rootSquash?: boolean;
}

/**
 * Properties describing the software upgrade state of the Cache.
 */
export interface CacheUpgradeStatusResponse {
    /**
     * Version string of the firmware currently installed on this Cache.
     */
    currentFirmwareVersion: string;
    /**
     * Time at which the pending firmware update will automatically be installed on the Cache.
     */
    firmwareUpdateDeadline: string;
    /**
     * True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
     */
    firmwareUpdateStatus: string;
    /**
     * Time of the last successful firmware update.
     */
    lastFirmwareUpdate: string;
    /**
     * When firmwareUpdateAvailable is true, this field holds the version string for the update.
     */
    pendingFirmwareVersion: string;
}

/**
 * Properties pertained to ClfsTarget
 */
export interface ClfsTargetResponse {
    /**
     * Resource ID of storage container.
     */
    target?: string;
}

/**
 * Describes a reference to Key Vault Key.
 */
export interface KeyVaultKeyReferenceResponse {
    /**
     * The URL referencing a key encryption key in Key Vault.
     */
    keyUrl: string;
    /**
     * Describes a resource Id to source Key Vault.
     */
    sourceVault: outputs.storagecache.v20200301.KeyVaultKeyReferenceResponseSourceVault;
}

/**
 * Describes a resource Id to source Key Vault.
 */
export interface KeyVaultKeyReferenceResponseSourceVault {
    /**
     * Resource Id.
     */
    id?: string;
}

/**
 * A namespace junction.
 */
export interface NamespaceJunctionResponse {
    /**
     * Namespace path on a Cache for a Storage Target.
     */
    namespacePath?: string;
    /**
     * NFS export where targetPath exists.
     */
    nfsExport?: string;
    /**
     * Path in Storage Target to which namespacePath points.
     */
    targetPath?: string;
}

/**
 * Properties pertained to Nfs3Target
 */
export interface Nfs3TargetResponse {
    /**
     * IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
     */
    target?: string;
    /**
     * Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
     */
    usageModel?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Properties pertained to UnknownTarget
 */
export interface UnknownTargetResponse {
    /**
     * Dictionary of string->string pairs containing information about the Storage Target.
     */
    unknownMap?: {[key: string]: string};
}

