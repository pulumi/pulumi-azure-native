// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An indication of Cache health. Gives more information about health than just that related to provisioning.
 */
export interface CacheHealthResponse {
    /**
     * List of Cache health states.
     */
    state?: string;
    /**
     * Describes explanation of state.
     */
    statusDescription?: string;
}

/**
 * SKU for the Cache.
 */
export interface CacheResponseSku {
    /**
     * SKU name for this Cache.
     */
    name?: string;
}

/**
 * Properties describing the software upgrade state of the Cache.
 */
export interface CacheUpgradeStatusResponse {
    /**
     * Version string of the firmware currently installed on this Cache.
     */
    currentFirmwareVersion: string;
    /**
     * Time at which the pending firmware update will automatically be installed on the Cache.
     */
    firmwareUpdateDeadline: string;
    /**
     * True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
     */
    firmwareUpdateStatus: string;
    /**
     * Time of the last successful firmware update.
     */
    lastFirmwareUpdate: string;
    /**
     * When firmwareUpdateAvailable is true, this field holds the version string for the update.
     */
    pendingFirmwareVersion: string;
}

/**
 * Storage container for use as a CLFS Storage Target.
 */
export interface ClfsTargetResponse {
    /**
     * Resource ID of storage container.
     */
    target?: string;
}

/**
 * A namespace junction.
 */
export interface NamespaceJunctionResponse {
    /**
     * Namespace path on a Cache for a Storage Target.
     */
    namespacePath?: string;
    /**
     * NFS export where targetPath exists.
     */
    nfsExport?: string;
    /**
     * Path in Storage Target to which namespacePath points.
     */
    targetPath?: string;
}

/**
 * An NFSv3 mount point for use as a Storage Target.
 */
export interface Nfs3TargetResponse {
    /**
     * IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
     */
    target?: string;
    /**
     * Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
     */
    usageModel?: string;
}

/**
 * Storage container for use as an Unknown Storage Target.
 */
export interface UnknownTargetResponse {
    /**
     * Dictionary of string->string pairs containing information about the Storage Target.
     */
    unknownMap?: {[key: string]: string};
}

