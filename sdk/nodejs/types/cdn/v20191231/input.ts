// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Defines the parameters for the cache expiration action.
 */
export interface CacheExpirationActionParametersArgs {
    /**
     * Caching behavior for the requests
     */
    cacheBehavior: pulumi.Input<string | enums.cdn.v20191231.CacheBehavior>;
    /**
     * The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
     */
    cacheDuration?: pulumi.Input<string>;
    /**
     * The level at which the content needs to be cached.
     */
    cacheType: pulumi.Input<string | enums.cdn.v20191231.CacheType>;
    odataType: pulumi.Input<string>;
}

/**
 * Defines the parameters for the cache-key query string action.
 */
export interface CacheKeyQueryStringActionParametersArgs {
    odataType: pulumi.Input<string>;
    /**
     * query parameters to include or exclude (comma separated).
     */
    queryParameters?: pulumi.Input<string>;
    /**
     * Caching behavior for the requests
     */
    queryStringBehavior: pulumi.Input<string | enums.cdn.v20191231.QueryStringBehavior>;
}

/**
 * Defines the parameters for Cookies match conditions
 */
export interface CookiesMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.CookiesOperator>;
    /**
     * Name of Cookies to be matched
     */
    selector?: pulumi.Input<string>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * The main origin of CDN content which is added when creating a CDN endpoint.
 */
export interface DeepCreatedOriginArgs {
    /**
     * Origin is enabled for load balancing or not. By default, origin is always enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint.
     */
    hostName: pulumi.Input<string>;
    /**
     * The value of the HTTP port. Must be between 1 and 65535.
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The value of the HTTPS port. Must be between 1 and 65535.
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * Origin name which must be unique within the endpoint. 
     */
    name: pulumi.Input<string>;
    /**
     * The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. If endpoint uses multiple origins for load balancing, then the host header at endpoint is ignored and this one is considered.
     */
    originHostHeader?: pulumi.Input<string>;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5.
     */
    priority?: pulumi.Input<number>;
    /**
     * Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
     */
    weight?: pulumi.Input<number>;
}

/**
 * The origin group for CDN content which is added when creating a CDN endpoint. Traffic is sent to the origins within the origin group based on origin health.
 */
export interface DeepCreatedOriginGroupArgs {
    /**
     * Health probe settings to the origin that is used to determine the health of the origin.
     */
    healthProbeSettings?: pulumi.Input<inputs.cdn.v20191231.HealthProbeParametersArgs>;
    /**
     * Origin group name which must be unique within the endpoint.
     */
    name: pulumi.Input<string>;
    /**
     * The source of the content being delivered via CDN within given origin group.
     */
    origins: pulumi.Input<pulumi.Input<inputs.cdn.v20191231.ResourceReferenceArgs>[]>;
    /**
     * The JSON object that contains the properties to determine origin health using real requests/responses.This property is currently not supported.
     */
    responseBasedOriginErrorDetectionSettings?: pulumi.Input<inputs.cdn.v20191231.ResponseBasedOriginErrorDetectionParametersArgs>;
    /**
     * Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not supported.
     */
    trafficRestorationTimeToHealedOrNewEndpointsInMinutes?: pulumi.Input<number>;
}

/**
 * A rule that specifies a set of actions and conditions
 */
export interface DeliveryRuleArgs {
    /**
     * A list of actions that are executed when all the conditions of a rule are satisfied.
     */
    actions: pulumi.Input<pulumi.Input<inputs.cdn.v20191231.DeliveryRuleCacheExpirationActionArgs | inputs.cdn.v20191231.DeliveryRuleCacheKeyQueryStringActionArgs | inputs.cdn.v20191231.DeliveryRuleRequestHeaderActionArgs | inputs.cdn.v20191231.DeliveryRuleResponseHeaderActionArgs | inputs.cdn.v20191231.OriginGroupOverrideActionArgs | inputs.cdn.v20191231.UrlRedirectActionArgs | inputs.cdn.v20191231.UrlRewriteActionArgs>[]>;
    /**
     * A list of conditions that must be matched for the actions to be executed
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.cdn.v20191231.DeliveryRuleCookiesConditionArgs | inputs.cdn.v20191231.DeliveryRuleHttpVersionConditionArgs | inputs.cdn.v20191231.DeliveryRuleIsDeviceConditionArgs | inputs.cdn.v20191231.DeliveryRulePostArgsConditionArgs | inputs.cdn.v20191231.DeliveryRuleQueryStringConditionArgs | inputs.cdn.v20191231.DeliveryRuleRemoteAddressConditionArgs | inputs.cdn.v20191231.DeliveryRuleRequestBodyConditionArgs | inputs.cdn.v20191231.DeliveryRuleRequestHeaderConditionArgs | inputs.cdn.v20191231.DeliveryRuleRequestMethodConditionArgs | inputs.cdn.v20191231.DeliveryRuleRequestSchemeConditionArgs | inputs.cdn.v20191231.DeliveryRuleRequestUriConditionArgs | inputs.cdn.v20191231.DeliveryRuleUrlFileExtensionConditionArgs | inputs.cdn.v20191231.DeliveryRuleUrlFileNameConditionArgs | inputs.cdn.v20191231.DeliveryRuleUrlPathConditionArgs>[]>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
     */
    order: pulumi.Input<number>;
}

/**
 * Defines the cache expiration action for the delivery rule.
 */
export interface DeliveryRuleCacheExpirationActionArgs {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'CacheExpiration'.
     */
    name: pulumi.Input<"CacheExpiration">;
    /**
     * Defines the parameters for the action.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.CacheExpirationActionParametersArgs>;
}

/**
 * Defines the cache-key query string action for the delivery rule.
 */
export interface DeliveryRuleCacheKeyQueryStringActionArgs {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'CacheKeyQueryString'.
     */
    name: pulumi.Input<"CacheKeyQueryString">;
    /**
     * Defines the parameters for the action.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.CacheKeyQueryStringActionParametersArgs>;
}

/**
 * Defines the Cookies condition for the delivery rule.
 */
export interface DeliveryRuleCookiesConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'Cookies'.
     */
    name: pulumi.Input<"Cookies">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.CookiesMatchConditionParametersArgs>;
}

/**
 * Defines the HttpVersion condition for the delivery rule.
 */
export interface DeliveryRuleHttpVersionConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'HttpVersion'.
     */
    name: pulumi.Input<"HttpVersion">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.HttpVersionMatchConditionParametersArgs>;
}

/**
 * Defines the IsDevice condition for the delivery rule.
 */
export interface DeliveryRuleIsDeviceConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'IsDevice'.
     */
    name: pulumi.Input<"IsDevice">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.IsDeviceMatchConditionParametersArgs>;
}

/**
 * Defines the PostArgs condition for the delivery rule.
 */
export interface DeliveryRulePostArgsConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'PostArgs'.
     */
    name: pulumi.Input<"PostArgs">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.PostArgsMatchConditionParametersArgs>;
}

/**
 * Defines the QueryString condition for the delivery rule.
 */
export interface DeliveryRuleQueryStringConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'QueryString'.
     */
    name: pulumi.Input<"QueryString">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.QueryStringMatchConditionParametersArgs>;
}

/**
 * Defines the RemoteAddress condition for the delivery rule.
 */
export interface DeliveryRuleRemoteAddressConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RemoteAddress'.
     */
    name: pulumi.Input<"RemoteAddress">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.RemoteAddressMatchConditionParametersArgs>;
}

/**
 * Defines the RequestBody condition for the delivery rule.
 */
export interface DeliveryRuleRequestBodyConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestBody'.
     */
    name: pulumi.Input<"RequestBody">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.RequestBodyMatchConditionParametersArgs>;
}

/**
 * Defines the request header action for the delivery rule.
 */
export interface DeliveryRuleRequestHeaderActionArgs {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'ModifyRequestHeader'.
     */
    name: pulumi.Input<"ModifyRequestHeader">;
    /**
     * Defines the parameters for the action.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.HeaderActionParametersArgs>;
}

/**
 * Defines the RequestHeader condition for the delivery rule.
 */
export interface DeliveryRuleRequestHeaderConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestHeader'.
     */
    name: pulumi.Input<"RequestHeader">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.RequestHeaderMatchConditionParametersArgs>;
}

/**
 * Defines the RequestMethod condition for the delivery rule.
 */
export interface DeliveryRuleRequestMethodConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestMethod'.
     */
    name: pulumi.Input<"RequestMethod">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.RequestMethodMatchConditionParametersArgs>;
}

/**
 * Defines the RequestScheme condition for the delivery rule.
 */
export interface DeliveryRuleRequestSchemeConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestScheme'.
     */
    name: pulumi.Input<"RequestScheme">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.RequestSchemeMatchConditionParametersArgs>;
}

/**
 * Defines the RequestUri condition for the delivery rule.
 */
export interface DeliveryRuleRequestUriConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestUri'.
     */
    name: pulumi.Input<"RequestUri">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.RequestUriMatchConditionParametersArgs>;
}

/**
 * Defines the response header action for the delivery rule.
 */
export interface DeliveryRuleResponseHeaderActionArgs {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'ModifyResponseHeader'.
     */
    name: pulumi.Input<"ModifyResponseHeader">;
    /**
     * Defines the parameters for the action.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.HeaderActionParametersArgs>;
}

/**
 * Defines the UrlFileExtension condition for the delivery rule.
 */
export interface DeliveryRuleUrlFileExtensionConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'UrlFileExtension'.
     */
    name: pulumi.Input<"UrlFileExtension">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.UrlFileExtensionMatchConditionParametersArgs>;
}

/**
 * Defines the UrlFileName condition for the delivery rule.
 */
export interface DeliveryRuleUrlFileNameConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'UrlFileName'.
     */
    name: pulumi.Input<"UrlFileName">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.UrlFileNameMatchConditionParametersArgs>;
}

/**
 * Defines the UrlPath condition for the delivery rule.
 */
export interface DeliveryRuleUrlPathConditionArgs {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'UrlPath'.
     */
    name: pulumi.Input<"UrlPath">;
    /**
     * Defines the parameters for the condition.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.UrlPathMatchConditionParametersArgs>;
}

/**
 * A policy that specifies the delivery rules to be used for an endpoint.
 */
export interface EndpointPropertiesUpdateParametersDeliveryPolicyArgs {
    /**
     * User-friendly description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of the delivery rules.
     */
    rules: pulumi.Input<pulumi.Input<inputs.cdn.v20191231.DeliveryRuleArgs>[]>;
}

/**
 * Rules defining user's geo access within a CDN endpoint.
 */
export interface GeoFilterArgs {
    /**
     * Action of the geo filter, i.e. allow or block access.
     */
    action: pulumi.Input<enums.cdn.v20191231.GeoFilterActions>;
    /**
     * Two letter country codes defining user country access in a geo filter, e.g. AU, MX, US.
     */
    countryCodes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Relative path applicable to geo filter. (e.g. '/mypictures', '/mypicture/kitty.jpg', and etc.)
     */
    relativePath: pulumi.Input<string>;
}

/**
 * Defines the parameters for the request header action.
 */
export interface HeaderActionParametersArgs {
    /**
     * Action to perform
     */
    headerAction: pulumi.Input<string | enums.cdn.v20191231.HeaderAction>;
    /**
     * Name of the header to modify
     */
    headerName: pulumi.Input<string>;
    odataType: pulumi.Input<string>;
    /**
     * Value for the specified action
     */
    value?: pulumi.Input<string>;
}

/**
 * The JSON object that contains the properties to send health probes to origin.
 */
export interface HealthProbeParametersArgs {
    /**
     * The number of seconds between health probes.Default is 240sec.
     */
    probeIntervalInSeconds?: pulumi.Input<number>;
    /**
     * The path relative to the origin that is used to determine the health of the origin.
     */
    probePath?: pulumi.Input<string>;
    /**
     * Protocol to use for health probe.
     */
    probeProtocol?: pulumi.Input<enums.cdn.v20191231.ProbeProtocol>;
    /**
     * The type of health probe request that is made.
     */
    probeRequestType?: pulumi.Input<enums.cdn.v20191231.HealthProbeRequestType>;
}

/**
 * The JSON object that represents the range for http status codes
 */
export interface HttpErrorRangeParametersArgs {
    /**
     * The inclusive start of the http status code range.
     */
    begin?: pulumi.Input<number>;
    /**
     * The inclusive end of the http status code range.
     */
    end?: pulumi.Input<number>;
}

/**
 * Defines the parameters for HttpVersion match conditions
 */
export interface HttpVersionMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.HttpVersionOperator>;
}

/**
 * Defines the parameters for IsDevice match conditions
 */
export interface IsDeviceMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.IsDeviceOperator>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the Origin Group override action for the delivery rule.
 */
export interface OriginGroupOverrideActionArgs {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'OriginGroupOverride'.
     */
    name: pulumi.Input<"OriginGroupOverride">;
    /**
     * Defines the parameters for the action.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.OriginGroupOverrideActionParametersArgs>;
}

/**
 * Defines the parameters for the Origin Group override action.
 */
export interface OriginGroupOverrideActionParametersArgs {
    odataType: pulumi.Input<string>;
    /**
     * A reference to the origin group from where the content will be fetched from when CDN does not have it
     */
    originGroup: pulumi.Input<inputs.cdn.v20191231.ResourceReferenceArgs>;
}

/**
 * Defines the parameters for PostArgs match conditions
 */
export interface PostArgsMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.PostArgsOperator>;
    /**
     * Name of PostArg to be matched
     */
    selector?: pulumi.Input<string>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the parameters for QueryString match conditions
 */
export interface QueryStringMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.QueryStringOperator>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the parameters for RemoteAddress match conditions
 */
export interface RemoteAddressMatchConditionParametersArgs {
    /**
     * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.RemoteAddressOperator>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the parameters for RequestBody match conditions
 */
export interface RequestBodyMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.RequestBodyOperator>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the parameters for RequestHeader match conditions
 */
export interface RequestHeaderMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.RequestHeaderOperator>;
    /**
     * Name of Header to be matched
     */
    selector?: pulumi.Input<string>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the parameters for RequestMethod match conditions
 */
export interface RequestMethodMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.RequestMethodOperator>;
}

/**
 * Defines the parameters for RequestScheme match conditions 
 */
export interface RequestSchemeMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string>;
}

/**
 * Defines the parameters for RequestUri match conditions
 */
export interface RequestUriMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.RequestUriOperator>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Reference to another resource.
 */
export interface ResourceReferenceArgs {
    /**
     * Resource ID.
     */
    id?: pulumi.Input<string>;
}

/**
 * The JSON object that contains the properties to determine origin health using real requests/responses.
 */
export interface ResponseBasedOriginErrorDetectionParametersArgs {
    /**
     * The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy.
     */
    httpErrorRanges?: pulumi.Input<pulumi.Input<inputs.cdn.v20191231.HttpErrorRangeParametersArgs>[]>;
    /**
     * Type of response errors for real user requests for which origin will be deemed unhealthy
     */
    responseBasedDetectedErrorTypes?: pulumi.Input<enums.cdn.v20191231.ResponseBasedDetectedErrorTypes>;
    /**
     * The percentage of failed requests in the sample where failover should trigger.
     */
    responseBasedFailoverThresholdPercentage?: pulumi.Input<number>;
}

/**
 * The pricing tier (defines a CDN provider, feature list and rate) of the CDN profile.
 */
export interface SkuArgs {
    /**
     * Name of the pricing tier.
     */
    name?: pulumi.Input<string | enums.cdn.v20191231.SkuName>;
}

/**
 * Defines the parameters for UrlFileExtension match conditions
 */
export interface UrlFileExtensionMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.UrlFileExtensionOperator>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the parameters for UrlFilename match conditions
 */
export interface UrlFileNameMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.UrlFileNameOperator>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the parameters for UrlPath match conditions
 */
export interface UrlPathMatchConditionParametersArgs {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: pulumi.Input<boolean>;
    odataType: pulumi.Input<string>;
    /**
     * Describes operator to be matched
     */
    operator: pulumi.Input<string | enums.cdn.v20191231.UrlPathOperator>;
    /**
     * List of transforms
     */
    transforms?: pulumi.Input<pulumi.Input<string | enums.cdn.v20191231.Transform>[]>;
}

/**
 * Defines the url redirect action for the delivery rule.
 */
export interface UrlRedirectActionArgs {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'UrlRedirect'.
     */
    name: pulumi.Input<"UrlRedirect">;
    /**
     * Defines the parameters for the action.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.UrlRedirectActionParametersArgs>;
}

/**
 * Defines the parameters for the url redirect action.
 */
export interface UrlRedirectActionParametersArgs {
    /**
     * Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
     */
    customFragment?: pulumi.Input<string>;
    /**
     * Host to redirect. Leave empty to use the incoming host as the destination host.
     */
    customHostname?: pulumi.Input<string>;
    /**
     * The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
     */
    customPath?: pulumi.Input<string>;
    /**
     * The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. ? and & will be added automatically so do not include them.
     */
    customQueryString?: pulumi.Input<string>;
    /**
     * Protocol to use for the redirect. The default value is MatchRequest
     */
    destinationProtocol?: pulumi.Input<string | enums.cdn.v20191231.DestinationProtocol>;
    odataType: pulumi.Input<string>;
    /**
     * The redirect type the rule will use when redirecting traffic.
     */
    redirectType: pulumi.Input<string | enums.cdn.v20191231.RedirectType>;
}

/**
 * Defines the url rewrite action for the delivery rule.
 */
export interface UrlRewriteActionArgs {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'UrlRewrite'.
     */
    name: pulumi.Input<"UrlRewrite">;
    /**
     * Defines the parameters for the action.
     */
    parameters: pulumi.Input<inputs.cdn.v20191231.UrlRewriteActionParametersArgs>;
}

/**
 * Defines the parameters for the url rewrite action.
 */
export interface UrlRewriteActionParametersArgs {
    /**
     * Define the relative URL to which the above requests will be rewritten by.
     */
    destination: pulumi.Input<string>;
    odataType: pulumi.Input<string>;
    /**
     * Whether to preserve unmatched path. Default value is true.
     */
    preserveUnmatchedPath?: pulumi.Input<boolean>;
    /**
     * define a request URI pattern that identifies the type of requests that may be rewritten. If value is blank, all strings are matched.
     */
    sourcePattern: pulumi.Input<string>;
}

