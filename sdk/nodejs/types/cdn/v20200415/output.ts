// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Defines the parameters for the cache expiration action.
 */
export interface CacheExpirationActionParametersResponse {
    /**
     * Caching behavior for the requests
     */
    cacheBehavior: string;
    /**
     * The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
     */
    cacheDuration?: string;
    /**
     * The level at which the content needs to be cached.
     */
    cacheType: string;
    odataType: string;
}

/**
 * Defines the parameters for the cache-key query string action.
 */
export interface CacheKeyQueryStringActionParametersResponse {
    odataType: string;
    /**
     * query parameters to include or exclude (comma separated).
     */
    queryParameters?: string;
    /**
     * Caching behavior for the requests
     */
    queryStringBehavior: string;
}

/**
 * Defines the parameters for using CDN managed certificate for securing custom domain.
 */
export interface CdnCertificateSourceParametersResponse {
    /**
     * Type of certificate used
     */
    certificateType: string;
    odataType: string;
}

/**
 * Defines the ARM Resource ID for the linked endpoints
 */
export interface CdnEndpointResponse {
    /**
     * ARM Resource ID string.
     */
    id?: string;
}

/**
 * Defines the certificate source parameters using CDN managed certificate for enabling SSL.
 */
export interface CdnManagedHttpsParametersResponse {
    /**
     * Defines the source of the SSL certificate.
     * Expected value is 'Cdn'.
     */
    certificateSource: "Cdn";
    /**
     * Defines the certificate source parameters using CDN managed certificate for enabling SSL.
     */
    certificateSourceParameters: outputs.cdn.v20200415.CdnCertificateSourceParametersResponse;
    /**
     * TLS protocol version that will be used for Https
     */
    minimumTlsVersion?: string;
    /**
     * Defines the TLS extension protocol that is used for secure delivery.
     */
    protocolType: string;
}

/**
 * Defines the parameters for Cookies match conditions
 */
export interface CookiesMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * Name of Cookies to be matched
     */
    selector?: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines contents of custom rules
 */
export interface CustomRuleListResponse {
    /**
     * List of rules
     */
    rules?: outputs.cdn.v20200415.CustomRuleResponse[];
}

/**
 * Defines the common attributes for a custom rule that can be included in a waf policy
 */
export interface CustomRuleResponse {
    /**
     * Describes what action to be applied when rule matches
     */
    action: string;
    /**
     * Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
     */
    enabledState?: string;
    /**
     * List of match conditions.
     */
    matchConditions: outputs.cdn.v20200415.MatchConditionResponse[];
    /**
     * Defines the name of the custom rule
     */
    name: string;
    /**
     * Defines in what order this rule be evaluated in the overall list of custom rules
     */
    priority: number;
}

/**
 * The origin group for CDN content which is added when creating a CDN endpoint. Traffic is sent to the origins within the origin group based on origin health.
 */
export interface DeepCreatedOriginGroupResponse {
    /**
     * Health probe settings to the origin that is used to determine the health of the origin.
     */
    healthProbeSettings?: outputs.cdn.v20200415.HealthProbeParametersResponse;
    /**
     * Origin group name which must be unique within the endpoint.
     */
    name: string;
    /**
     * The source of the content being delivered via CDN within given origin group.
     */
    origins: outputs.cdn.v20200415.ResourceReferenceResponse[];
    /**
     * The JSON object that contains the properties to determine origin health using real requests/responses.This property is currently not supported.
     */
    responseBasedOriginErrorDetectionSettings?: outputs.cdn.v20200415.ResponseBasedOriginErrorDetectionParametersResponse;
    /**
     * Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not supported.
     */
    trafficRestorationTimeToHealedOrNewEndpointsInMinutes?: number;
}

/**
 * The main origin of CDN content which is added when creating a CDN endpoint.
 */
export interface DeepCreatedOriginResponse {
    /**
     * Origin is enabled for load balancing or not. By default, origin is always enabled.
     */
    enabled?: boolean;
    /**
     * The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint.
     */
    hostName: string;
    /**
     * The value of the HTTP port. Must be between 1 and 65535.
     */
    httpPort?: number;
    /**
     * The value of the HTTPS port. Must be between 1 and 65535.
     */
    httpsPort?: number;
    /**
     * Origin name which must be unique within the endpoint. 
     */
    name: string;
    /**
     * The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     */
    originHostHeader?: string;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5.
     */
    priority?: number;
    /**
     * The Alias of the Private Link resource. Populating this optional field indicates that this origin is 'Private'
     */
    privateLinkAlias?: string;
    /**
     * A custom message to be included in the approval request to connect to the Private Link.
     */
    privateLinkApprovalMessage?: string;
    /**
     * The location of the Private Link resource. Required only if 'privateLinkResourceId' is populated
     */
    privateLinkLocation?: string;
    /**
     * The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
     */
    privateLinkResourceId?: string;
    /**
     * Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
     */
    weight?: number;
}

/**
 * Defines the cache expiration action for the delivery rule.
 */
export interface DeliveryRuleCacheExpirationActionResponse {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'CacheExpiration'.
     */
    name: "CacheExpiration";
    /**
     * Defines the parameters for the action.
     */
    parameters: outputs.cdn.v20200415.CacheExpirationActionParametersResponse;
}

/**
 * Defines the cache-key query string action for the delivery rule.
 */
export interface DeliveryRuleCacheKeyQueryStringActionResponse {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'CacheKeyQueryString'.
     */
    name: "CacheKeyQueryString";
    /**
     * Defines the parameters for the action.
     */
    parameters: outputs.cdn.v20200415.CacheKeyQueryStringActionParametersResponse;
}

/**
 * Defines the Cookies condition for the delivery rule.
 */
export interface DeliveryRuleCookiesConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'Cookies'.
     */
    name: "Cookies";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.CookiesMatchConditionParametersResponse;
}

/**
 * Defines the HttpVersion condition for the delivery rule.
 */
export interface DeliveryRuleHttpVersionConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'HttpVersion'.
     */
    name: "HttpVersion";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.HttpVersionMatchConditionParametersResponse;
}

/**
 * Defines the IsDevice condition for the delivery rule.
 */
export interface DeliveryRuleIsDeviceConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'IsDevice'.
     */
    name: "IsDevice";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.IsDeviceMatchConditionParametersResponse;
}

/**
 * Defines the PostArgs condition for the delivery rule.
 */
export interface DeliveryRulePostArgsConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'PostArgs'.
     */
    name: "PostArgs";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.PostArgsMatchConditionParametersResponse;
}

/**
 * Defines the QueryString condition for the delivery rule.
 */
export interface DeliveryRuleQueryStringConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'QueryString'.
     */
    name: "QueryString";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.QueryStringMatchConditionParametersResponse;
}

/**
 * Defines the RemoteAddress condition for the delivery rule.
 */
export interface DeliveryRuleRemoteAddressConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RemoteAddress'.
     */
    name: "RemoteAddress";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.RemoteAddressMatchConditionParametersResponse;
}

/**
 * Defines the RequestBody condition for the delivery rule.
 */
export interface DeliveryRuleRequestBodyConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestBody'.
     */
    name: "RequestBody";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.RequestBodyMatchConditionParametersResponse;
}

/**
 * Defines the request header action for the delivery rule.
 */
export interface DeliveryRuleRequestHeaderActionResponse {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'ModifyRequestHeader'.
     */
    name: "ModifyRequestHeader";
    /**
     * Defines the parameters for the action.
     */
    parameters: outputs.cdn.v20200415.HeaderActionParametersResponse;
}

/**
 * Defines the RequestHeader condition for the delivery rule.
 */
export interface DeliveryRuleRequestHeaderConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestHeader'.
     */
    name: "RequestHeader";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.RequestHeaderMatchConditionParametersResponse;
}

/**
 * Defines the RequestMethod condition for the delivery rule.
 */
export interface DeliveryRuleRequestMethodConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestMethod'.
     */
    name: "RequestMethod";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.RequestMethodMatchConditionParametersResponse;
}

/**
 * Defines the RequestScheme condition for the delivery rule.
 */
export interface DeliveryRuleRequestSchemeConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestScheme'.
     */
    name: "RequestScheme";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.RequestSchemeMatchConditionParametersResponse;
}

/**
 * Defines the RequestUri condition for the delivery rule.
 */
export interface DeliveryRuleRequestUriConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'RequestUri'.
     */
    name: "RequestUri";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.RequestUriMatchConditionParametersResponse;
}

/**
 * A rule that specifies a set of actions and conditions
 */
export interface DeliveryRuleResponse {
    /**
     * A list of actions that are executed when all the conditions of a rule are satisfied.
     */
    actions: (outputs.cdn.v20200415.DeliveryRuleCacheExpirationActionResponse | outputs.cdn.v20200415.DeliveryRuleCacheKeyQueryStringActionResponse | outputs.cdn.v20200415.DeliveryRuleRequestHeaderActionResponse | outputs.cdn.v20200415.DeliveryRuleResponseHeaderActionResponse | outputs.cdn.v20200415.UrlRedirectActionResponse | outputs.cdn.v20200415.UrlRewriteActionResponse | outputs.cdn.v20200415.UrlSigningActionResponse)[];
    /**
     * A list of conditions that must be matched for the actions to be executed
     */
    conditions?: (outputs.cdn.v20200415.DeliveryRuleCookiesConditionResponse | outputs.cdn.v20200415.DeliveryRuleHttpVersionConditionResponse | outputs.cdn.v20200415.DeliveryRuleIsDeviceConditionResponse | outputs.cdn.v20200415.DeliveryRulePostArgsConditionResponse | outputs.cdn.v20200415.DeliveryRuleQueryStringConditionResponse | outputs.cdn.v20200415.DeliveryRuleRemoteAddressConditionResponse | outputs.cdn.v20200415.DeliveryRuleRequestBodyConditionResponse | outputs.cdn.v20200415.DeliveryRuleRequestHeaderConditionResponse | outputs.cdn.v20200415.DeliveryRuleRequestMethodConditionResponse | outputs.cdn.v20200415.DeliveryRuleRequestSchemeConditionResponse | outputs.cdn.v20200415.DeliveryRuleRequestUriConditionResponse | outputs.cdn.v20200415.DeliveryRuleUrlFileExtensionConditionResponse | outputs.cdn.v20200415.DeliveryRuleUrlFileNameConditionResponse | outputs.cdn.v20200415.DeliveryRuleUrlPathConditionResponse)[];
    /**
     * Name of the rule
     */
    name?: string;
    /**
     * The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
     */
    order: number;
}

/**
 * Defines the response header action for the delivery rule.
 */
export interface DeliveryRuleResponseHeaderActionResponse {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'ModifyResponseHeader'.
     */
    name: "ModifyResponseHeader";
    /**
     * Defines the parameters for the action.
     */
    parameters: outputs.cdn.v20200415.HeaderActionParametersResponse;
}

/**
 * Defines the UrlFileExtension condition for the delivery rule.
 */
export interface DeliveryRuleUrlFileExtensionConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'UrlFileExtension'.
     */
    name: "UrlFileExtension";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.UrlFileExtensionMatchConditionParametersResponse;
}

/**
 * Defines the UrlFileName condition for the delivery rule.
 */
export interface DeliveryRuleUrlFileNameConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'UrlFileName'.
     */
    name: "UrlFileName";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.UrlFileNameMatchConditionParametersResponse;
}

/**
 * Defines the UrlPath condition for the delivery rule.
 */
export interface DeliveryRuleUrlPathConditionResponse {
    /**
     * The name of the condition for the delivery rule.
     * Expected value is 'UrlPath'.
     */
    name: "UrlPath";
    /**
     * Defines the parameters for the condition.
     */
    parameters: outputs.cdn.v20200415.UrlPathMatchConditionParametersResponse;
}

/**
 * A policy that specifies the delivery rules to be used for an endpoint.
 */
export interface EndpointPropertiesUpdateParametersResponseDeliveryPolicy {
    /**
     * User-friendly description of the policy.
     */
    description?: string;
    /**
     * A list of the delivery rules.
     */
    rules: outputs.cdn.v20200415.DeliveryRuleResponse[];
}

/**
 * Defines the Web Application Firewall policy for the endpoint (if applicable)
 */
export interface EndpointPropertiesUpdateParametersResponseWebApplicationFirewallPolicyLink {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * Rules defining user's geo access within a CDN endpoint.
 */
export interface GeoFilterResponse {
    /**
     * Action of the geo filter, i.e. allow or block access.
     */
    action: string;
    /**
     * Two letter country codes defining user country access in a geo filter, e.g. AU, MX, US.
     */
    countryCodes: string[];
    /**
     * Relative path applicable to geo filter. (e.g. '/mypictures', '/mypicture/kitty.jpg', and etc.)
     */
    relativePath: string;
}

/**
 * Defines the parameters for the request header action.
 */
export interface HeaderActionParametersResponse {
    /**
     * Action to perform
     */
    headerAction: string;
    /**
     * Name of the header to modify
     */
    headerName: string;
    odataType: string;
    /**
     * Value for the specified action
     */
    value?: string;
}

/**
 * The JSON object that contains the properties to send health probes to origin.
 */
export interface HealthProbeParametersResponse {
    /**
     * The number of seconds between health probes.Default is 240sec.
     */
    probeIntervalInSeconds?: number;
    /**
     * The path relative to the origin that is used to determine the health of the origin.
     */
    probePath?: string;
    /**
     * Protocol to use for health probe.
     */
    probeProtocol?: string;
    /**
     * The type of health probe request that is made.
     */
    probeRequestType?: string;
}

/**
 * The JSON object that represents the range for http status codes
 */
export interface HttpErrorRangeParametersResponse {
    /**
     * The inclusive start of the http status code range.
     */
    begin?: number;
    /**
     * The inclusive end of the http status code range.
     */
    end?: number;
}

/**
 * Defines the parameters for HttpVersion match conditions
 */
export interface HttpVersionMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
}

/**
 * Defines the parameters for IsDevice match conditions
 */
export interface IsDeviceMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Describes the parameters for using a user's KeyVault certificate for securing custom domain.
 */
export interface KeyVaultCertificateSourceParametersResponse {
    /**
     * Describes the action that shall be taken when the certificate is removed from Key Vault.
     */
    deleteRule: string;
    odataType: string;
    /**
     * Resource group of the user's Key Vault containing the SSL certificate
     */
    resourceGroupName: string;
    /**
     * The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
     */
    secretName: string;
    /**
     * The version(GUID) of Key Vault Secret in Key Vault.
     */
    secretVersion?: string;
    /**
     * Subscription Id of the user's Key Vault containing the SSL certificate
     */
    subscriptionId: string;
    /**
     * Describes the action that shall be taken when the certificate is updated in Key Vault.
     */
    updateRule: string;
    /**
     * The name of the user's Key Vault containing the SSL certificate
     */
    vaultName: string;
}

/**
 * Describes the parameters for using a user's KeyVault for URL Signing Key.
 */
export interface KeyVaultSigningKeyParametersResponse {
    odataType: string;
    /**
     * Resource group of the user's Key Vault containing the secret
     */
    resourceGroupName: string;
    /**
     * The name of secret in Key Vault.
     */
    secretName: string;
    /**
     * The version(GUID) of secret in Key Vault.
     */
    secretVersion: string;
    /**
     * Subscription Id of the user's Key Vault containing the secret
     */
    subscriptionId: string;
    /**
     * The name of the user's Key Vault containing the secret
     */
    vaultName: string;
}

/**
 * Defines a managed rule group override setting.
 */
export interface ManagedRuleGroupOverrideResponse {
    /**
     * Describes the managed rule group within the rule set to override
     */
    ruleGroupName: string;
    /**
     * List of rules that will be disabled. If none specified, all rules in the group will be disabled.
     */
    rules?: outputs.cdn.v20200415.ManagedRuleOverrideResponse[];
}

/**
 * Defines a managed rule group override setting.
 */
export interface ManagedRuleOverrideResponse {
    /**
     * Describes the override action to be applied when rule matches.
     */
    action?: string;
    /**
     * Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
     */
    enabledState?: string;
    /**
     * Identifier for the managed rule.
     */
    ruleId: string;
}

/**
 * Defines the list of managed rule sets for the policy.
 */
export interface ManagedRuleSetListResponse {
    /**
     * List of rule sets.
     */
    managedRuleSets?: outputs.cdn.v20200415.ManagedRuleSetResponse[];
}

/**
 * Defines a managed rule set.
 */
export interface ManagedRuleSetResponse {
    /**
     * Verizon only : If the rule set supports anomaly detection mode, this describes the threshold for blocking requests.
     */
    anomalyScore?: number;
    /**
     * Defines the rule overrides to apply to the rule set.
     */
    ruleGroupOverrides?: outputs.cdn.v20200415.ManagedRuleGroupOverrideResponse[];
    /**
     * Defines the rule set type to use.
     */
    ruleSetType: string;
    /**
     * Defines the version of the rule set to use.
     */
    ruleSetVersion: string;
}

/**
 * Define match conditions
 */
export interface MatchConditionResponse {
    /**
     * List of possible match values.
     */
    matchValue: string[];
    /**
     * Match variable to compare against.
     */
    matchVariable: string;
    /**
     * Describes if the result of this condition should be negated.
     */
    negateCondition?: boolean;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs.
     */
    selector?: string;
    /**
     * List of transforms.
     */
    transforms?: string[];
}

/**
 * Defines contents of a web application firewall global configuration
 */
export interface PolicySettingsResponse {
    /**
     * If the action type is block, customer can override the response body. The body must be specified in base64 encoding.
     */
    defaultCustomBlockResponseBody?: string;
    /**
     * If the action type is block, this field defines the default customer overridable http response status code.
     */
    defaultCustomBlockResponseStatusCode?: number;
    /**
     * If action type is redirect, this field represents the default redirect URL for the client.
     */
    defaultRedirectUrl?: string;
    /**
     * describes if the policy is in enabled state or disabled state
     */
    enabledState?: string;
    /**
     * Describes if it is in detection mode or prevention mode at policy level.
     */
    mode?: string;
}

/**
 * Defines the parameters for PostArgs match conditions
 */
export interface PostArgsMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * Name of PostArg to be matched
     */
    selector?: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines the parameters for QueryString match conditions
 */
export interface QueryStringMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines contents of rate limit rules
 */
export interface RateLimitRuleListResponse {
    /**
     * List of rules
     */
    rules?: outputs.cdn.v20200415.RateLimitRuleResponse[];
}

/**
 * Defines a rate limiting rule that can be included in a waf policy
 */
export interface RateLimitRuleResponse {
    /**
     * Describes what action to be applied when rule matches
     */
    action: string;
    /**
     * Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
     */
    enabledState?: string;
    /**
     * List of match conditions.
     */
    matchConditions: outputs.cdn.v20200415.MatchConditionResponse[];
    /**
     * Defines the name of the custom rule
     */
    name: string;
    /**
     * Defines in what order this rule be evaluated in the overall list of custom rules
     */
    priority: number;
    /**
     * Defines rate limit duration. Default is 1 minute.
     */
    rateLimitDurationInMinutes: number;
    /**
     * Defines rate limit threshold.
     */
    rateLimitThreshold: number;
}

/**
 * Defines the parameters for RemoteAddress match conditions
 */
export interface RemoteAddressMatchConditionParametersResponse {
    /**
     * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines the parameters for RequestBody match conditions
 */
export interface RequestBodyMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines the parameters for RequestHeader match conditions
 */
export interface RequestHeaderMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * Name of Header to be matched
     */
    selector?: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines the parameters for RequestMethod match conditions
 */
export interface RequestMethodMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
}

/**
 * Defines the parameters for RequestScheme match conditions 
 */
export interface RequestSchemeMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
}

/**
 * Defines the parameters for RequestUri match conditions
 */
export interface RequestUriMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Reference to another resource.
 */
export interface ResourceReferenceResponse {
    /**
     * Resource ID.
     */
    id?: string;
}

/**
 * The JSON object that contains the properties to determine origin health using real requests/responses.
 */
export interface ResponseBasedOriginErrorDetectionParametersResponse {
    /**
     * The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy.
     */
    httpErrorRanges?: outputs.cdn.v20200415.HttpErrorRangeParametersResponse[];
    /**
     * Type of response errors for real user requests for which origin will be deemed unhealthy
     */
    responseBasedDetectedErrorTypes?: string;
    /**
     * The percentage of failed requests in the sample where failover should trigger.
     */
    responseBasedFailoverThresholdPercentage?: number;
}

/**
 * The pricing tier (defines a CDN provider, feature list and rate) of the CDN profile.
 */
export interface SkuResponse {
    /**
     * Name of the pricing tier.
     */
    name?: string;
}

/**
 * Defines the parameters for UrlFileExtension match conditions
 */
export interface UrlFileExtensionMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines the parameters for UrlFilename match conditions
 */
export interface UrlFileNameMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines the parameters for UrlPath match conditions
 */
export interface UrlPathMatchConditionParametersResponse {
    /**
     * The match value for the condition of the delivery rule
     */
    matchValues?: string[];
    /**
     * Describes if this is negate condition or not
     */
    negateCondition?: boolean;
    odataType: string;
    /**
     * Describes operator to be matched
     */
    operator: string;
    /**
     * List of transforms
     */
    transforms?: string[];
}

/**
 * Defines the parameters for the url redirect action.
 */
export interface UrlRedirectActionParametersResponse {
    /**
     * Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
     */
    customFragment?: string;
    /**
     * Host to redirect. Leave empty to use the incoming host as the destination host.
     */
    customHostname?: string;
    /**
     * The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
     */
    customPath?: string;
    /**
     * The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. ? and & will be added automatically so do not include them.
     */
    customQueryString?: string;
    /**
     * Protocol to use for the redirect. The default value is MatchRequest
     */
    destinationProtocol?: string;
    odataType: string;
    /**
     * The redirect type the rule will use when redirecting traffic.
     */
    redirectType: string;
}

/**
 * Defines the url redirect action for the delivery rule.
 */
export interface UrlRedirectActionResponse {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'UrlRedirect'.
     */
    name: "UrlRedirect";
    /**
     * Defines the parameters for the action.
     */
    parameters: outputs.cdn.v20200415.UrlRedirectActionParametersResponse;
}

/**
 * Defines the parameters for the url rewrite action.
 */
export interface UrlRewriteActionParametersResponse {
    /**
     * Define the relative URL to which the above requests will be rewritten by.
     */
    destination: string;
    odataType: string;
    /**
     * Whether to preserve unmatched path. Default value is true.
     */
    preserveUnmatchedPath?: boolean;
    /**
     * define a request URI pattern that identifies the type of requests that may be rewritten. If value is blank, all strings are matched.
     */
    sourcePattern: string;
}

/**
 * Defines the url rewrite action for the delivery rule.
 */
export interface UrlRewriteActionResponse {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'UrlRewrite'.
     */
    name: "UrlRewrite";
    /**
     * Defines the parameters for the action.
     */
    parameters: outputs.cdn.v20200415.UrlRewriteActionParametersResponse;
}

/**
 * Defines the parameters for the Url Signing action.
 */
export interface UrlSigningActionParametersResponse {
    /**
     * Algorithm to use for URL signing
     */
    algorithm?: string;
    /**
     * Match values to match against. Supports CIDR ranges (both IPv4 and IPv6).
     */
    ipSubnets?: string[];
    /**
     * Id reference of the key to be used to verify the hash and should be defined in UrlSigningKeys
     */
    keyId: string;
    odataType?: string;
    /**
     * Defines which query string parameters in the url to be considered for expires, key id etc. 
     */
    parameterNameOverride?: outputs.cdn.v20200415.UrlSigningParamIdentifierResponse[];
}

/**
 * Defines the url signing action for the delivery rule.
 */
export interface UrlSigningActionResponse {
    /**
     * The name of the action for the delivery rule.
     * Expected value is 'UrlSigning'.
     */
    name: "UrlSigning";
    /**
     * Defines the parameters for the action.
     */
    parameters: outputs.cdn.v20200415.UrlSigningActionParametersResponse;
}

/**
 * Url signing key
 */
export interface UrlSigningKeyResponse {
    /**
     * Defines the customer defined key Id. This id will exist in the incoming request to indicate the key used to form the hash.
     */
    keyId: string;
    /**
     * Defines the parameters for using customer key vault for Url Signing Key.
     */
    keySourceParameters: outputs.cdn.v20200415.KeyVaultSigningKeyParametersResponse;
}

/**
 * Defines how to identify a parameter for a specific purpose e.g. expires
 */
export interface UrlSigningParamIdentifierResponse {
    /**
     * Indicates the purpose of the parameter
     */
    paramIndicator: string;
    /**
     * Parameter name
     */
    paramName: string;
}

/**
 * Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
 */
export interface UserManagedHttpsParametersResponse {
    /**
     * Defines the source of the SSL certificate.
     * Expected value is 'AzureKeyVault'.
     */
    certificateSource: "AzureKeyVault";
    /**
     * Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
     */
    certificateSourceParameters: outputs.cdn.v20200415.KeyVaultCertificateSourceParametersResponse;
    /**
     * TLS protocol version that will be used for Https
     */
    minimumTlsVersion?: string;
    /**
     * Defines the TLS extension protocol that is used for secure delivery.
     */
    protocolType: string;
}

