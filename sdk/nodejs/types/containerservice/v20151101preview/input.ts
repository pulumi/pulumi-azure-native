// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Profile for container service agent pool
 */
export interface ContainerServiceAgentPoolProfileArgs {
    /**
     * No. of agents (VMs) that will host docker containers
     */
    count?: pulumi.Input<number>;
    /**
     * DNS prefix to be used to create FQDN for this agent pool
     */
    dnsPrefix: pulumi.Input<string>;
    /**
     * Unique name of the agent pool profile within the context of the subscription and resource group
     */
    name: pulumi.Input<string>;
    /**
     * Size of agent VMs
     */
    vmSize?: pulumi.Input<string | enums.containerservice.v20151101preview.ContainerServiceVMSizeTypes>;
}

export interface ContainerServiceDiagnosticsProfileArgs {
    /**
     * Profile for container service VM diagnostic agent
     */
    vmDiagnostics?: pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceVMDiagnosticsArgs>;
}

/**
 * Profile for Linux VM
 */
export interface ContainerServiceLinuxProfileArgs {
    /**
     * The administrator username to use for all Linux VMs
     */
    adminUsername: pulumi.Input<string>;
    /**
     * Specifies the ssh key configuration for Linux VMs
     */
    ssh: pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceSshConfigurationArgs>;
}

/**
 * Profile for container service master
 */
export interface ContainerServiceMasterProfileArgs {
    /**
     * Number of masters (VMs) in the container cluster
     */
    count?: pulumi.Input<number>;
    /**
     * DNS prefix to be used to create FQDN for master
     */
    dnsPrefix: pulumi.Input<string>;
}

/**
 * Profile for Orchestrator
 */
export interface ContainerServiceOrchestratorProfileArgs {
    /**
     * Specifies what orchestrator will be used to manage container cluster resources.
     */
    orchestratorType?: pulumi.Input<enums.containerservice.v20151101preview.ContainerServiceOchestratorTypes>;
}

/**
 * SSH configuration for Linux based VMs running on Azure
 */
export interface ContainerServiceSshConfigurationArgs {
    /**
     * Gets or sets the list of SSH public keys used to authenticate with Linux based VMs
     */
    publicKeys?: pulumi.Input<pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceSshPublicKeyArgs>[]>;
}

/**
 * Contains information about SSH certificate public key data.
 */
export interface ContainerServiceSshPublicKeyArgs {
    /**
     * Gets or sets Certificate public key used to authenticate with VM through SSH. The certificate must be in Pem format with or without headers.
     */
    keyData: pulumi.Input<string>;
}

/**
 * Describes VM Diagnostics.
 */
export interface ContainerServiceVMDiagnosticsArgs {
    /**
     * Gets or sets whether VM Diagnostic Agent should be provisioned on the Virtual Machine.
     */
    enabled?: pulumi.Input<boolean>;
}

/**
 * Profile for Windows jumpbox
 */
export interface ContainerServiceWindowsProfileArgs {
    /**
     * The administrator password to use for Windows jumpbox
     */
    adminPassword: pulumi.Input<string>;
    /**
     * The administrator username to use for Windows jumpbox
     */
    adminUsername: pulumi.Input<string>;
}

