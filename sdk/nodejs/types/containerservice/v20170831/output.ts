// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Profile for the container service agent pool.
 */
export interface ContainerServiceAgentPoolProfileResponse {
    /**
     * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 
     */
    count?: number;
    /**
     * DNS prefix to be used to create the FQDN for the agent pool.
     */
    dnsPrefix?: string;
    /**
     * FQDN for the agent pool.
     */
    fqdn: string;
    /**
     * Unique name of the agent pool profile in the context of the subscription and resource group.
     */
    name: string;
    /**
     * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
     */
    osDiskSizeGB?: number;
    /**
     * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     */
    osType?: string;
    /**
     * Ports number array used to expose on this agent pool. The default opened ports are different based on your choice of orchestrator.
     */
    ports?: number[];
    /**
     * Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.
     */
    storageProfile?: string;
    /**
     * Size of agent VMs.
     */
    vmSize: string;
    /**
     * VNet SubnetID specifies the VNet's subnet identifier.
     */
    vnetSubnetID?: string;
}
/**
 * containerServiceAgentPoolProfileResponseProvideDefaults sets the appropriate defaults for ContainerServiceAgentPoolProfileResponse
 */
export function containerServiceAgentPoolProfileResponseProvideDefaults(val: ContainerServiceAgentPoolProfileResponse): ContainerServiceAgentPoolProfileResponse {
    return {
        ...val,
        count: (val.count) ?? 1,
    };
}

/**
 * Profile for Linux VMs in the container service cluster.
 */
export interface ContainerServiceLinuxProfileResponse {
    /**
     * The administrator username to use for Linux VMs.
     */
    adminUsername: string;
    /**
     * SSH configuration for Linux-based VMs running on Azure.
     */
    ssh: outputs.containerservice.v20170831.ContainerServiceSshConfigurationResponse;
}

/**
 * Information about a service principal identity for the cluster to use for manipulating Azure APIs. Either secret or keyVaultSecretRef must be specified.
 */
export interface ContainerServiceServicePrincipalProfileResponse {
    /**
     * The ID for the service principal.
     */
    clientId: string;
    /**
     * Reference to a secret stored in Azure Key Vault.
     */
    keyVaultSecretRef?: outputs.containerservice.v20170831.KeyVaultSecretRefResponse;
    /**
     * The secret password associated with the service principal in plain text.
     */
    secret?: string;
}

/**
 * SSH configuration for Linux-based VMs running on Azure.
 */
export interface ContainerServiceSshConfigurationResponse {
    /**
     * The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
     */
    publicKeys: outputs.containerservice.v20170831.ContainerServiceSshPublicKeyResponse[];
}

/**
 * Contains information about SSH certificate public key data.
 */
export interface ContainerServiceSshPublicKeyResponse {
    /**
     * Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
     */
    keyData: string;
}

/**
 * Reference to a secret stored in Azure Key Vault.
 */
export interface KeyVaultSecretRefResponse {
    /**
     * The secret name.
     */
    secretName: string;
    /**
     * Key vault identifier.
     */
    vaultID: string;
    /**
     * The secret version.
     */
    version?: string;
}

