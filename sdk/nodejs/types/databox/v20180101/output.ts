// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Credential details of the account.
 */
export interface AccountCredentialDetailsResponse {
    /**
     * Connection string of the account endpoint to use the account as a storage endpoint on the device.
     */
    accountConnectionString: string;
    /**
     * Name of the account.
     */
    accountName: string;
    /**
     * Per share level unencrypted access credentials.
     */
    shareCredentialDetails: outputs.databox.v20180101.ShareCredentialDetailsResponse[];
}

/**
 * The Network Adapter configuration of a DataBox.
 */
export interface ApplianceNetworkConfigurationResponse {
    /**
     * Mac Address.
     */
    macAddress: string;
    /**
     * Name of the network.
     */
    name: string;
}

/**
 * Contact Details.
 */
export interface ContactDetailsResponse {
    /**
     * Contact name of the person.
     */
    contactName: string;
    /**
     * List of Email-ids to be notified about job progress.
     */
    emailList: string[];
    /**
     * Mobile number of the contact person.
     */
    mobile?: string;
    /**
     * Notification preference for a job stage.
     */
    notificationPreference?: outputs.databox.v20180101.NotificationPreferenceResponse[];
    /**
     * Phone number of the contact person.
     */
    phone: string;
    /**
     * Phone extension number of the contact person.
     */
    phoneExtension?: string;
}

/**
 * Copy progress.
 */
export interface CopyProgressResponse {
    /**
     * Id of the account where the data needs to be uploaded.
     */
    accountId: string;
    /**
     * Amount of data uploaded by the job as of now.
     */
    bytesSentToCloud: number;
    /**
     * Number of files processed by the job as of now.
     */
    filesProcessed: number;
    /**
     * Name of the storage account where the data needs to be uploaded.
     */
    storageAccountName: string;
    /**
     * Total amount of data to be processed by the job.
     */
    totalBytesToProcess: number;
    /**
     * Total number of files to be processed by the job.
     */
    totalFilesToProcess: number;
}

/**
 * Copy log details for a storage account of a DataBox job
 */
export interface DataBoxAccountCopyLogDetailsResponse {
    /**
     * Destination account name.
     */
    accountName: string;
    /**
     * Indicates the type of job details.
     * Expected value is 'DataBox'.
     */
    copyLogDetailsType: "DataBox";
    /**
     * Link for copy logs.
     */
    copyLogLink: string;
}

/**
 * Copy Log Details for a disk
 */
export interface DataBoxDiskCopyLogDetailsResponse {
    /**
     * Indicates the type of job details.
     * Expected value is 'DataBoxDisk'.
     */
    copyLogDetailsType: "DataBoxDisk";
    /**
     * Disk Serial Number.
     */
    diskSerialNumber: string;
    /**
     * Link for copy error logs.
     */
    errorLogLink: string;
    /**
     * Link for copy verbose logs.
     */
    verboseLogLink: string;
}

/**
 * DataBox Disk Copy Progress
 */
export interface DataBoxDiskCopyProgressResponse {
    /**
     * Bytes copied during the copy of disk.
     */
    bytesCopied: number;
    /**
     * Indicates the percentage completed for the copy of the disk.
     */
    percentComplete: number;
    /**
     * The serial number of the disk
     */
    serialNumber: string;
    /**
     * The Status of the copy
     */
    status: string;
}

/**
 * DataBox Disk Job Details.
 */
export interface DataBoxDiskJobDetailsResponse {
    /**
     * Shared access key to download the chain of custody logs
     */
    chainOfCustodySasKey: string;
    /**
     * Contact details for notification and shipping.
     */
    contactDetails: outputs.databox.v20180101.ContactDetailsResponse;
    /**
     * List of copy log details.
     */
    copyLogDetails: (outputs.databox.v20180101.DataBoxAccountCopyLogDetailsResponse | outputs.databox.v20180101.DataBoxDiskCopyLogDetailsResponse | outputs.databox.v20180101.DataBoxHeavyAccountCopyLogDetailsResponse)[];
    /**
     * Copy progress per disk.
     */
    copyProgress: outputs.databox.v20180101.DataBoxDiskCopyProgressResponse[];
    /**
     * Delivery package shipping details.
     */
    deliveryPackage: outputs.databox.v20180101.PackageShippingDetailsResponse;
    /**
     * Destination account details.
     */
    destinationAccountDetails: (outputs.databox.v20180101.DestinationManagedDiskDetailsResponse | outputs.databox.v20180101.DestinationStorageAccountDetailsResponse)[];
    /**
     * Contains the map of disk serial number to the disk size being used for the job. Is returned only after the disks are shipped to the customer.
     */
    disksAndSizeDetails: {[key: string]: number};
    /**
     * Error details for failure. This is optional.
     */
    errorDetails: outputs.databox.v20180101.JobErrorDetailsResponse[];
    /**
     * The expected size of the data, which needs to be transferred in this job, in terabytes.
     */
    expectedDataSizeInTeraBytes?: number;
    /**
     * Indicates the type of job details.
     * Expected value is 'DataBoxDisk'.
     */
    jobDetailsType: "DataBoxDisk";
    /**
     * List of stages that run in the job.
     */
    jobStages: outputs.databox.v20180101.JobStagesResponse[];
    /**
     * User entered passkey for DataBox Disk job.
     */
    passkey?: string;
    /**
     * Preferences for the order.
     */
    preferences?: outputs.databox.v20180101.PreferencesResponse;
    /**
     * User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int.
     */
    preferredDisks?: {[key: string]: number};
    /**
     * Return package shipping details.
     */
    returnPackage: outputs.databox.v20180101.PackageShippingDetailsResponse;
    /**
     * Shared access key to download the return shipment label
     */
    reverseShipmentLabelSasKey: string;
    /**
     * Shipping address of the customer.
     */
    shippingAddress: outputs.databox.v20180101.ShippingAddressResponse;
}
/**
 * dataBoxDiskJobDetailsResponseProvideDefaults sets the appropriate defaults for DataBoxDiskJobDetailsResponse
 */
export function dataBoxDiskJobDetailsResponseProvideDefaults(val: DataBoxDiskJobDetailsResponse): DataBoxDiskJobDetailsResponse {
    return {
        ...val,
        shippingAddress: outputs.databox.v20180101.shippingAddressResponseProvideDefaults(val.shippingAddress),
    };
}

/**
 * The secrets related to disk job.
 */
export interface DataBoxDiskJobSecretsResponse {
    /**
     * Contains the list of secrets object for that device.
     */
    diskSecrets: outputs.databox.v20180101.DiskSecretResponse[];
    /**
     * Whether passkey was provided by user.
     */
    isPasskeyUserDefined: boolean;
    /**
     * Used to indicate what type of job secrets object.
     * Expected value is 'DataBoxDisk'.
     */
    jobSecretsType: "DataBoxDisk";
    /**
     * PassKey for the disk Job.
     */
    passKey: string;
}

/**
 * Copy log details for a storage account for DataBoxHeavy
 */
export interface DataBoxHeavyAccountCopyLogDetailsResponse {
    /**
     * Destination account name.
     */
    accountName: string;
    /**
     * Indicates the type of job details.
     * Expected value is 'DataBoxHeavy'.
     */
    copyLogDetailsType: "DataBoxHeavy";
    /**
     * Link for copy logs.
     */
    copyLogLink: string[];
}

/**
 * DataBoxHeavy Device Job Details
 */
export interface DataBoxHeavyJobDetailsResponse {
    /**
     * Shared access key to download the chain of custody logs
     */
    chainOfCustodySasKey: string;
    /**
     * Contact details for notification and shipping.
     */
    contactDetails: outputs.databox.v20180101.ContactDetailsResponse;
    /**
     * List of copy log details.
     */
    copyLogDetails: (outputs.databox.v20180101.DataBoxAccountCopyLogDetailsResponse | outputs.databox.v20180101.DataBoxDiskCopyLogDetailsResponse | outputs.databox.v20180101.DataBoxHeavyAccountCopyLogDetailsResponse)[];
    /**
     * Copy progress per account.
     */
    copyProgress: outputs.databox.v20180101.CopyProgressResponse[];
    /**
     * Delivery package shipping details.
     */
    deliveryPackage: outputs.databox.v20180101.PackageShippingDetailsResponse;
    /**
     * Destination account details.
     */
    destinationAccountDetails: (outputs.databox.v20180101.DestinationManagedDiskDetailsResponse | outputs.databox.v20180101.DestinationStorageAccountDetailsResponse)[];
    /**
     * Error details for failure. This is optional.
     */
    errorDetails: outputs.databox.v20180101.JobErrorDetailsResponse[];
    /**
     * The expected size of the data, which needs to be transferred in this job, in terabytes.
     */
    expectedDataSizeInTeraBytes?: number;
    /**
     * Indicates the type of job details.
     * Expected value is 'DataBoxHeavy'.
     */
    jobDetailsType: "DataBoxHeavy";
    /**
     * List of stages that run in the job.
     */
    jobStages: outputs.databox.v20180101.JobStagesResponse[];
    /**
     * Preferences for the order.
     */
    preferences?: outputs.databox.v20180101.PreferencesResponse;
    /**
     * Return package shipping details.
     */
    returnPackage: outputs.databox.v20180101.PackageShippingDetailsResponse;
    /**
     * Shared access key to download the return shipment label
     */
    reverseShipmentLabelSasKey: string;
    /**
     * Shipping address of the customer.
     */
    shippingAddress: outputs.databox.v20180101.ShippingAddressResponse;
}
/**
 * dataBoxHeavyJobDetailsResponseProvideDefaults sets the appropriate defaults for DataBoxHeavyJobDetailsResponse
 */
export function dataBoxHeavyJobDetailsResponseProvideDefaults(val: DataBoxHeavyJobDetailsResponse): DataBoxHeavyJobDetailsResponse {
    return {
        ...val,
        shippingAddress: outputs.databox.v20180101.shippingAddressResponseProvideDefaults(val.shippingAddress),
    };
}

/**
 * The secrets related to a DataBoxHeavy job.
 */
export interface DataBoxHeavyJobSecretsResponse {
    /**
     * Contains the list of secret objects for a DataBoxHeavy job.
     */
    cabinetPodSecrets: outputs.databox.v20180101.DataBoxHeavySecretResponse[];
    /**
     * Used to indicate what type of job secrets object.
     * Expected value is 'DataBoxHeavy'.
     */
    jobSecretsType: "DataBoxHeavy";
}

/**
 * The secrets related to a DataBoxHeavy.
 */
export interface DataBoxHeavySecretResponse {
    /**
     * Per account level access credentials.
     */
    accountCredentialDetails: outputs.databox.v20180101.AccountCredentialDetailsResponse[];
    /**
     * Password for out of the box experience on device.
     */
    devicePassword: string;
    /**
     * Serial number of the assigned device.
     */
    deviceSerialNumber: string;
    /**
     * The base 64 encoded public key to authenticate with the device
     */
    encodedValidationCertPubKey: string;
    /**
     * Network configuration of the appliance.
     */
    networkConfigurations: outputs.databox.v20180101.ApplianceNetworkConfigurationResponse[];
}

/**
 * DataBox Job Details
 */
export interface DataBoxJobDetailsResponse {
    /**
     * Shared access key to download the chain of custody logs
     */
    chainOfCustodySasKey: string;
    /**
     * Contact details for notification and shipping.
     */
    contactDetails: outputs.databox.v20180101.ContactDetailsResponse;
    /**
     * List of copy log details.
     */
    copyLogDetails: (outputs.databox.v20180101.DataBoxAccountCopyLogDetailsResponse | outputs.databox.v20180101.DataBoxDiskCopyLogDetailsResponse | outputs.databox.v20180101.DataBoxHeavyAccountCopyLogDetailsResponse)[];
    /**
     * Copy progress per storage account.
     */
    copyProgress: outputs.databox.v20180101.CopyProgressResponse[];
    /**
     * Delivery package shipping details.
     */
    deliveryPackage: outputs.databox.v20180101.PackageShippingDetailsResponse;
    /**
     * Destination account details.
     */
    destinationAccountDetails: (outputs.databox.v20180101.DestinationManagedDiskDetailsResponse | outputs.databox.v20180101.DestinationStorageAccountDetailsResponse)[];
    /**
     * Error details for failure. This is optional.
     */
    errorDetails: outputs.databox.v20180101.JobErrorDetailsResponse[];
    /**
     * The expected size of the data, which needs to be transferred in this job, in terabytes.
     */
    expectedDataSizeInTeraBytes?: number;
    /**
     * Indicates the type of job details.
     * Expected value is 'DataBox'.
     */
    jobDetailsType: "DataBox";
    /**
     * List of stages that run in the job.
     */
    jobStages: outputs.databox.v20180101.JobStagesResponse[];
    /**
     * Preferences for the order.
     */
    preferences?: outputs.databox.v20180101.PreferencesResponse;
    /**
     * Return package shipping details.
     */
    returnPackage: outputs.databox.v20180101.PackageShippingDetailsResponse;
    /**
     * Shared access key to download the return shipment label
     */
    reverseShipmentLabelSasKey: string;
    /**
     * Shipping address of the customer.
     */
    shippingAddress: outputs.databox.v20180101.ShippingAddressResponse;
}
/**
 * dataBoxJobDetailsResponseProvideDefaults sets the appropriate defaults for DataBoxJobDetailsResponse
 */
export function dataBoxJobDetailsResponseProvideDefaults(val: DataBoxJobDetailsResponse): DataBoxJobDetailsResponse {
    return {
        ...val,
        shippingAddress: outputs.databox.v20180101.shippingAddressResponseProvideDefaults(val.shippingAddress),
    };
}

/**
 * The secrets related to a DataBox.
 */
export interface DataBoxSecretResponse {
    /**
     * Per account level access credentials.
     */
    accountCredentialDetails: outputs.databox.v20180101.AccountCredentialDetailsResponse[];
    /**
     * Password for out of the box experience on device.
     */
    devicePassword: string;
    /**
     * Serial number of the assigned device.
     */
    deviceSerialNumber: string;
    /**
     * The base 64 encoded public key to authenticate with the device
     */
    encodedValidationCertPubKey: string;
    /**
     * Network configuration of the appliance.
     */
    networkConfigurations: outputs.databox.v20180101.ApplianceNetworkConfigurationResponse[];
}

/**
 * The secrets related to a DataBox job.
 */
export interface DataboxJobSecretsResponse {
    /**
     * Used to indicate what type of job secrets object.
     * Expected value is 'DataBox'.
     */
    jobSecretsType: "DataBox";
    /**
     * Contains the list of secret objects for a job.
     */
    podSecrets?: outputs.databox.v20180101.DataBoxSecretResponse[];
}

/**
 * Details for the destination compute disks.
 */
export interface DestinationManagedDiskDetailsResponse {
    /**
     * Arm Id of the destination where the data has to be moved.
     */
    accountId?: string;
    /**
     * Data Destination Type.
     * Expected value is 'ManagedDisk'.
     */
    dataDestinationType: "ManagedDisk";
    /**
     * Destination Resource Group Id where the Compute disks should be created.
     */
    resourceGroupId: string;
    /**
     * Arm Id of the storage account that can be used to copy the vhd for staging.
     */
    stagingStorageAccountId: string;
}

/**
 * Details for the destination storage account.
 */
export interface DestinationStorageAccountDetailsResponse {
    /**
     * Arm Id of the destination where the data has to be moved.
     */
    accountId?: string;
    /**
     * Data Destination Type.
     * Expected value is 'StorageAccount'.
     */
    dataDestinationType: "StorageAccount";
    /**
     * Destination Storage Account Arm Id.
     */
    storageAccountId: string;
}

/**
 * Contains all the secrets of a Disk.
 */
export interface DiskSecretResponse {
    /**
     * Bit Locker key of the disk which can be used to unlock the disk to copy data.
     */
    bitLockerKey: string;
    /**
     * Serial number of the assigned disk.
     */
    diskSerialNumber: string;
}

/**
 * Top level error for the job.
 */
export interface ErrorResponse {
    /**
     * Error code that can be used to programmatically identify the error.
     */
    code: string;
    /**
     * Describes the error in detail and provides debugging information.
     */
    message: string;
}

/**
 * Job Error Details for providing the information and recommended action.
 */
export interface JobErrorDetailsResponse {
    /**
     * Code for the error.
     */
    errorCode: number;
    /**
     * Message for the error.
     */
    errorMessage: string;
    /**
     * Contains the non localized exception message
     */
    exceptionMessage: string;
    /**
     * Recommended action for the error.
     */
    recommendedAction: string;
}

/**
 * Job stages.
 */
export interface JobStagesResponse {
    /**
     * Display name of the job stage.
     */
    displayName: string;
    /**
     * Error details for the stage.
     */
    errorDetails: outputs.databox.v20180101.JobErrorDetailsResponse[];
    /**
     * Job Stage Details
     */
    jobStageDetails: any;
    /**
     * Name of the job stage.
     */
    stageName: string;
    /**
     * Status of the job stage.
     */
    stageStatus: string;
    /**
     * Time for the job stage in UTC ISO 8601 format.
     */
    stageTime: string;
}

/**
 * Notification preference for a job stage.
 */
export interface NotificationPreferenceResponse {
    /**
     * Notification is required or not.
     */
    sendNotification: boolean;
    /**
     * Name of the stage.
     */
    stageName: string;
}
/**
 * notificationPreferenceResponseProvideDefaults sets the appropriate defaults for NotificationPreferenceResponse
 */
export function notificationPreferenceResponseProvideDefaults(val: NotificationPreferenceResponse): NotificationPreferenceResponse {
    return {
        ...val,
        sendNotification: (val.sendNotification) ?? true,
    };
}

/**
 * Shipping details.
 */
export interface PackageShippingDetailsResponse {
    /**
     * Name of the carrier.
     */
    carrierName: string;
    /**
     * Tracking Id of shipment.
     */
    trackingId: string;
    /**
     * Url where shipment can be tracked.
     */
    trackingUrl: string;
}

/**
 * Preferences related to the order
 */
export interface PreferencesResponse {
    preferredDataCenterRegion?: string[];
}

/**
 * Credential details of the shares in account.
 */
export interface ShareCredentialDetailsResponse {
    /**
     * Password for the share.
     */
    password: string;
    /**
     * Name of the share.
     */
    shareName: string;
    /**
     * Type of the share.
     */
    shareType: string;
    /**
     * Access protocols supported on the device.
     */
    supportedAccessProtocols: string[];
    /**
     * User name for the share.
     */
    userName: string;
}

/**
 * Shipping address where customer wishes to receive the device.
 */
export interface ShippingAddressResponse {
    /**
     * Type of address.
     */
    addressType?: string;
    /**
     * Name of the City.
     */
    city?: string;
    /**
     * Name of the company.
     */
    companyName?: string;
    /**
     * Name of the Country.
     */
    country: string;
    /**
     * Postal code.
     */
    postalCode: string;
    /**
     * Name of the State or Province.
     */
    stateOrProvince?: string;
    /**
     * Street Address line 1.
     */
    streetAddress1: string;
    /**
     * Street Address line 2.
     */
    streetAddress2?: string;
    /**
     * Street Address line 3.
     */
    streetAddress3?: string;
    /**
     * Extended Zip Code.
     */
    zipExtendedCode?: string;
}
/**
 * shippingAddressResponseProvideDefaults sets the appropriate defaults for ShippingAddressResponse
 */
export function shippingAddressResponseProvideDefaults(val: ShippingAddressResponse): ShippingAddressResponse {
    return {
        ...val,
        addressType: (val.addressType) ?? "None",
    };
}

/**
 * The Sku.
 */
export interface SkuResponse {
    /**
     * The display name of the sku.
     */
    displayName?: string;
    /**
     * The sku family.
     */
    family?: string;
    /**
     * The sku name.
     */
    name: string;
}

/**
 * Unencrypted credentials for accessing device.
 */
export interface UnencryptedCredentialsResponse {
    /**
     * Name of the job.
     */
    jobName: string;
    /**
     * Secrets related to this job.
     */
    jobSecrets: outputs.databox.v20180101.DataBoxDiskJobSecretsResponse | outputs.databox.v20180101.DataBoxHeavyJobSecretsResponse | outputs.databox.v20180101.DataboxJobSecretsResponse;
}

