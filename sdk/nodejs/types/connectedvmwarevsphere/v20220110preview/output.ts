// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

export interface ErrorDetailResponse {
    /**
     * The error's code.
     */
    code: string;
    /**
     * Additional error details.
     */
    details?: outputs.connectedvmwarevsphere.v20220110preview.ErrorDetailResponse[];
    /**
     * A human readable error message.
     */
    message: string;
    /**
     * Indicates which property in the request is responsible for the error.
     */
    target?: string;
}

/**
 * The extended location.
 */
export interface ExtendedLocationResponse {
    /**
     * The extended location name.
     */
    name?: string;
    /**
     * The extended location type.
     */
    type?: string;
}

/**
 * Defines the resource properties.
 */
export interface GuestAgentProfileResponse {
    /**
     * The hybrid machine agent full version.
     */
    agentVersion: string;
    /**
     * Details about the error state.
     */
    errorDetails: outputs.connectedvmwarevsphere.v20220110preview.ErrorDetailResponse[];
    /**
     * The time of the last status change.
     */
    lastStatusChange: string;
    /**
     * The status of the hybrid machine agent.
     */
    status: string;
    /**
     * Specifies the VM's unique SMBIOS ID.
     */
    vmUuid: string;
}

/**
 * Username / Password Credentials to connect to guest.
 */
export interface GuestCredentialResponse {
    /**
     * Gets or sets username to connect with the guest.
     */
    username?: string;
}

/**
 * Defines the resource properties.
 */
export interface HardwareProfileResponse {
    /**
     * Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
     */
    cpuHotAddEnabled: boolean;
    /**
     * Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
     */
    cpuHotRemoveEnabled: boolean;
    /**
     * Gets or sets a value indicating whether memory can be added while this virtual machine is running.
     */
    memoryHotAddEnabled: boolean;
    /**
     * Gets or sets memory size in MBs for the vm.
     */
    memorySizeMB?: number;
    /**
     * Gets or sets the number of vCPUs for the vm.
     */
    numCPUs?: number;
    /**
     * Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
     */
    numCoresPerSocket?: number;
}

/**
 * HTTP Proxy configuration for the VM.
 */
export interface HttpProxyConfigurationResponse {
    /**
     * Gets or sets httpsProxy url.
     */
    httpsProxy?: string;
}

/**
 * Managed service identity.
 */
export interface IdentityResponse {
    /**
     * The principal id of managed service identity.
     */
    principalId: string;
    /**
     * The tenant of managed service identity.
     */
    tenantId: string;
    /**
     * The type of managed service identity.
     */
    type: string;
}

/**
 * Instance view status.
 */
export interface MachineExtensionInstanceViewResponseStatus {
    /**
     * The status code.
     */
    code: string;
    /**
     * The short localizable label for the status.
     */
    displayStatus: string;
    /**
     * The level code.
     */
    level: string;
    /**
     * The detailed status message, including for alerts and error messages.
     */
    message: string;
    /**
     * The time of the status.
     */
    time: string;
}

/**
 * The machine extension instance view.
 */
export interface MachineExtensionPropertiesResponseInstanceView {
    /**
     * The machine extension name.
     */
    name: string;
    /**
     * Instance view status.
     */
    status?: outputs.connectedvmwarevsphere.v20220110preview.MachineExtensionInstanceViewResponseStatus;
    /**
     * Specifies the type of the extension; an example is "CustomScriptExtension".
     */
    type: string;
    /**
     * Specifies the version of the script handler.
     */
    typeHandlerVersion: string;
}

/**
 * Network Interface model
 */
export interface NetworkInterfaceResponse {
    /**
     * Gets or sets the device key value.
     */
    deviceKey?: number;
    /**
     * Gets or sets the nic ip addresses.
     */
    ipAddresses: string[];
    /**
     * Gets or sets the ipsettings.
     */
    ipSettings?: outputs.connectedvmwarevsphere.v20220110preview.NicIPSettingsResponse;
    /**
     * Gets or sets the label of the virtual network in vCenter that the nic is connected to.
     */
    label: string;
    /**
     * Gets or sets the NIC MAC address.
     */
    macAddress: string;
    /**
     * Gets or sets the name of the network interface.
     */
    name?: string;
    /**
     * Gets or sets the ARM Id of the network resource to connect the virtual machine.
     */
    networkId?: string;
    /**
     * Gets or sets the name of the virtual network in vCenter that the nic is connected to.
     */
    networkMoName: string;
    /**
     * Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
     * that the nic is connected to.
     */
    networkMoRefId: string;
    /**
     * NIC type
     */
    nicType?: string;
    /**
     * Gets or sets the power on boot.
     */
    powerOnBoot?: string;
}

/**
 * Defines the resource properties.
 */
export interface NetworkProfileResponse {
    /**
     * Gets or sets the list of network interfaces associated with the virtual machine.
     */
    networkInterfaces?: outputs.connectedvmwarevsphere.v20220110preview.NetworkInterfaceResponse[];
}

/**
 * IP address information for a virtual network adapter reported by the fabric.
 */
export interface NicIPAddressSettingsResponse {
    /**
     * Gets the ip address allocation method.
     */
    allocationMethod: string;
    /**
     * Gets the ip address for the nic.
     */
    ipAddress: string;
    /**
     * Gets the mask.
     */
    subnetMask: string;
}

/**
 * Defines the network interface ip settings.
 */
export interface NicIPSettingsResponse {
    /**
     * Gets or sets the nic allocation method.
     */
    allocationMethod?: string;
    /**
     * Gets or sets the dns servers.
     */
    dnsServers?: string[];
    /**
     * Gets or sets the gateway.
     */
    gateway?: string[];
    /**
     * Gets or sets the ip address for the nic.
     */
    ipAddress?: string;
    /**
     * Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus IPV6 information.
     */
    ipAddressInfo: outputs.connectedvmwarevsphere.v20220110preview.NicIPAddressSettingsResponse[];
    /**
     * Gets or sets the primary server.
     */
    primaryWinsServer: string;
    /**
     * Gets or sets the secondary server.
     */
    secondaryWinsServer: string;
    /**
     * Gets or sets the mask.
     */
    subnetMask?: string;
}

/**
 * Defines the resource properties.
 */
export interface OsProfileResponse {
    /**
     * Gets or sets administrator username.
     */
    adminUsername?: string;
    /**
     * Gets or sets a value indicating whether the VM is ready for extension operations.
     */
    allowExtensionOperations: boolean;
    /**
     * Gets or sets computer name.
     */
    computerName?: string;
    /**
     * Gets or sets the guestId.
     */
    guestId?: string;
    /**
     * Specifies the linux configuration for update management.
     */
    linuxConfiguration?: outputs.connectedvmwarevsphere.v20220110preview.OsProfileResponseLinuxConfiguration;
    /**
     * Gets or sets os name.
     */
    osName: string;
    /**
     * Gets or sets the type of the os.
     */
    osType?: string;
    /**
     * Gets or sets the current running status of VMware Tools running in the guest operating system.
     */
    toolsRunningStatus: string;
    /**
     * Gets or sets the current version of VMware Tools.
     */
    toolsVersion: string;
    /**
     * Gets or sets the current version status of VMware Tools installed in the guest operating system.
     */
    toolsVersionStatus: string;
    /**
     * Specifies the windows configuration for update management.
     */
    windowsConfiguration?: outputs.connectedvmwarevsphere.v20220110preview.OsProfileResponseWindowsConfiguration;
}

/**
 * Specifies the linux configuration for update management.
 */
export interface OsProfileResponseLinuxConfiguration {
    /**
     * Specifies the assessment mode.
     */
    assessmentMode?: string;
    /**
     * Specifies the patch mode.
     */
    patchMode?: string;
}

/**
 * Specifies the windows configuration for update management.
 */
export interface OsProfileResponseWindowsConfiguration {
    /**
     * Specifies the assessment mode.
     */
    assessmentMode?: string;
    /**
     * Specifies the patch mode.
     */
    patchMode?: string;
}

/**
 * Defines the resource properties.
 */
export interface PlacementProfileResponse {
    /**
     * Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
     */
    clusterId?: string;
    /**
     * Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
     */
    datastoreId?: string;
    /**
     * Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
     */
    hostId?: string;
    /**
     * Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
     */
    resourcePoolId?: string;
}

/**
 * The resource status information.
 */
export interface ResourceStatusResponse {
    /**
     * The last update time for this condition.
     */
    lastUpdatedAt: string;
    /**
     * A human readable message indicating details about the status.
     */
    message: string;
    /**
     * The reason for the condition's status.
     */
    reason: string;
    /**
     * Severity with which to treat failures of this type of condition.
     */
    severity: string;
    /**
     * Status of the condition.
     */
    status: string;
    /**
     * The type of the condition.
     */
    type: string;
}

/**
 * Specifies the Security profile settings for the virtual machine.
 */
export interface SecurityProfileResponse {
    /**
     * Specifies the security settings like secure boot used while creating the virtual machine.
     */
    uefiSettings?: outputs.connectedvmwarevsphere.v20220110preview.UefiSettingsResponse;
}

/**
 * Defines the resource properties.
 */
export interface StorageProfileResponse {
    /**
     * Gets or sets the list of virtual disks associated with the virtual machine.
     */
    disks?: outputs.connectedvmwarevsphere.v20220110preview.VirtualDiskResponse[];
    /**
     * Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
     */
    scsiControllers: outputs.connectedvmwarevsphere.v20220110preview.VirtualSCSIControllerResponse[];
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Specifies the security settings like secure boot used while creating the virtual machine.
 */
export interface UefiSettingsResponse {
    /**
     * Specifies whether secure boot should be enabled on the virtual machine.
     */
    secureBootEnabled?: boolean;
}

/**
 * Username / Password Credentials to connect to vcenter.
 */
export interface VICredentialResponse {
    /**
     * Gets or sets username to connect with the vCenter.
     */
    username?: string;
}

/**
 * Virtual disk model
 */
export interface VirtualDiskResponse {
    /**
     * Gets or sets the controller id.
     */
    controllerKey?: number;
    /**
     * Gets or sets the device key value.
     */
    deviceKey?: number;
    /**
     * Gets or sets the device name.
     */
    deviceName?: string;
    /**
     * Gets or sets the disk mode.
     */
    diskMode?: string;
    /**
     * Gets or sets the disk object id.
     */
    diskObjectId: string;
    /**
     * Gets or sets the disk total size.
     */
    diskSizeGB?: number;
    /**
     * Gets or sets the disk backing type.
     */
    diskType?: string;
    /**
     * Gets or sets the label of the virtual disk in vCenter.
     */
    label: string;
    /**
     * Gets or sets the name of the virtual disk.
     */
    name?: string;
    /**
     * Gets or sets the unit number of the disk on the controller.
     */
    unitNumber?: number;
}

/**
 * This data object type contains the properties of a SCSI controller device attached to a virtual machine that is reported by the controller.
 */
export interface VirtualSCSIControllerResponse {
    /**
     * Gets or sets the bus number of the controller.
     */
    busNumber?: number;
    /**
     * Gets or sets the key of the controller.
     */
    controllerKey?: number;
    /**
     * Gets or sets the SCSI controller unit number.
     */
    scsiCtlrUnitNumber?: number;
    /**
     * Gets or sets the sharing mode.
     */
    sharing?: string;
    /**
     * Gets or sets the controller type.
     */
    type?: string;
}

