// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Authorization tuple containing principal Id (of user/service principal/security group) and role definition id.
 */
export interface AuthorizationResponse {
    /**
     * The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     */
    delegatedRoleDefinitionIds?: string[];
    /**
     * Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     */
    principalId: string;
    /**
     * Display name of the principal Id.
     */
    principalIdDisplayName?: string;
    /**
     * The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     */
    roleDefinitionId: string;
}

/**
 * Plan details for the managed services.
 */
export interface PlanResponse {
    /**
     * The plan name.
     */
    name: string;
    /**
     * The product code.
     */
    product: string;
    /**
     * The publisher ID.
     */
    publisher: string;
    /**
     * The plan's version.
     */
    version: string;
}

/**
 * Properties of a registration assignment.
 */
export interface RegistrationAssignmentPropertiesResponse {
    /**
     * Current state of the registration assignment.
     */
    provisioningState: string;
    /**
     * Registration definition inside registration assignment.
     */
    registrationDefinition: outputs.managedservices.v20180601preview.RegistrationAssignmentPropertiesResponseRegistrationDefinition;
    /**
     * Fully qualified path of the registration definition.
     */
    registrationDefinitionId: string;
}

/**
 * Properties of registration definition inside registration assignment.
 */
export interface RegistrationAssignmentPropertiesResponseProperties {
    /**
     * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
     */
    authorizations?: outputs.managedservices.v20180601preview.AuthorizationResponse[];
    /**
     * Description of the registration definition.
     */
    description?: string;
    /**
     * Id of the managedBy tenant.
     */
    managedByTenantId?: string;
    /**
     * Name of the managedBy tenant.
     */
    managedByTenantName?: string;
    /**
     * Id of the home tenant.
     */
    manageeTenantId?: string;
    /**
     * Name of the home tenant.
     */
    manageeTenantName?: string;
    /**
     * Current state of the registration definition.
     */
    provisioningState?: string;
    /**
     * Name of the registration definition.
     */
    registrationDefinitionName?: string;
}

/**
 * Registration definition inside registration assignment.
 */
export interface RegistrationAssignmentPropertiesResponseRegistrationDefinition {
    /**
     * Fully qualified path of the registration definition.
     */
    id: string;
    /**
     * Name of the registration definition.
     */
    name: string;
    /**
     * Plan details for the managed services.
     */
    plan?: outputs.managedservices.v20180601preview.PlanResponse;
    /**
     * Properties of registration definition inside registration assignment.
     */
    properties?: outputs.managedservices.v20180601preview.RegistrationAssignmentPropertiesResponseProperties;
    /**
     * Type of the resource (Microsoft.ManagedServices/registrationDefinitions).
     */
    type: string;
}

/**
 * Properties of a registration definition.
 */
export interface RegistrationDefinitionPropertiesResponse {
    /**
     * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
     */
    authorizations: outputs.managedservices.v20180601preview.AuthorizationResponse[];
    /**
     * Description of the registration definition.
     */
    description?: string;
    /**
     * Id of the managedBy tenant.
     */
    managedByTenantId: string;
    /**
     * Name of the managedBy tenant.
     */
    managedByTenantName: string;
    /**
     * Current state of the registration definition.
     */
    provisioningState: string;
    /**
     * Name of the registration definition.
     */
    registrationDefinitionName?: string;
}

