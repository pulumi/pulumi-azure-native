// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The parameters to provide for the Bot.
 */
export interface BotPropertiesResponse {
    /**
     * Collection of channels for which the bot is configured
     */
    configuredChannels: string[];
    /**
     * The description of the bot
     */
    description?: string;
    /**
     * The Application Insights key
     */
    developerAppInsightKey?: string;
    /**
     * The Application Insights Api Key
     */
    developerAppInsightsApiKey?: string;
    /**
     * The Application Insights App Id
     */
    developerAppInsightsApplicationId?: string;
    /**
     * The Name of the bot
     */
    displayName: string;
    /**
     * Collection of channels for which the bot is enabled
     */
    enabledChannels: string[];
    /**
     * The bot's endpoint
     */
    endpoint: string;
    /**
     * The bot's endpoint version
     */
    endpointVersion: string;
    /**
     * The Icon Url of the bot
     */
    iconUrl?: string;
    /**
     * Collection of LUIS App Ids
     */
    luisAppIds?: string[];
    /**
     * The LUIS Key
     */
    luisKey?: string;
    /**
     * Microsoft App Id for the bot
     */
    msaAppId: string;
}

/**
 * Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
 */
export interface ConnectionSettingParameterResponse {
    /**
     * Key for the Connection Setting Parameter.
     */
    key?: string;
    /**
     * Value associated with the Connection Setting Parameter.
     */
    value?: string;
}

/**
 * Properties for a Connection Setting Item
 */
export interface ConnectionSettingPropertiesResponse {
    /**
     * Client Id associated with the Connection Setting.
     */
    clientId?: string;
    /**
     * Client Secret associated with the Connection Setting
     */
    clientSecret?: string;
    /**
     * Service Provider Parameters associated with the Connection Setting
     */
    parameters?: outputs.botservice.v20180712.ConnectionSettingParameterResponse[];
    /**
     * Scopes associated with the Connection Setting
     */
    scopes?: string;
    /**
     * Service Provider Display Name associated with the Connection Setting
     */
    serviceProviderDisplayName?: string;
    /**
     * Service Provider Id associated with the Connection Setting
     */
    serviceProviderId?: string;
    /**
     * Setting Id set by the service for the Connection Setting.
     */
    settingId: string;
}

/**
 * The parameters to provide for the Direct Line channel.
 */
export interface DirectLineChannelPropertiesResponse {
    /**
     * The list of Direct Line sites
     */
    sites?: outputs.botservice.v20180712.DirectLineSiteResponse[];
}

/**
 * Direct Line channel definition
 */
export interface DirectLineChannelResponse {
    /**
     * The channel name
     * Expected value is 'DirectLineChannel'.
     */
    channelName: "DirectLineChannel";
    /**
     * The set of properties specific to Direct Line channel resource
     */
    properties?: outputs.botservice.v20180712.DirectLineChannelPropertiesResponse;
}

/**
 * A site for the Direct Line channel
 */
export interface DirectLineSiteResponse {
    /**
     * Whether this site is enabled for DirectLine channel.
     */
    isEnabled: boolean;
    /**
     * Whether this site is enabled for authentication with Bot Framework.
     */
    isSecureSiteEnabled?: boolean;
    /**
     * Whether this site is enabled for Bot Framework V1 protocol.
     */
    isV1Enabled: boolean;
    /**
     * Whether this site is enabled for Bot Framework V1 protocol.
     */
    isV3Enabled: boolean;
    /**
     * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key: string;
    /**
     * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key2: string;
    /**
     * Site Id
     */
    siteId: string;
    /**
     * Site name
     */
    siteName: string;
    /**
     * List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
     */
    trustedOrigins?: string[];
}

/**
 * The parameters to provide for the Email channel.
 */
export interface EmailChannelPropertiesResponse {
    /**
     * The email address
     */
    emailAddress: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    password: string;
}

/**
 * Email channel definition
 */
export interface EmailChannelResponse {
    /**
     * The channel name
     * Expected value is 'EmailChannel'.
     */
    channelName: "EmailChannel";
    /**
     * The set of properties specific to email channel resource
     */
    properties?: outputs.botservice.v20180712.EmailChannelPropertiesResponse;
}

/**
 * The properties specific to an Enterprise Channel Node.
 */
export interface EnterpriseChannelNodeResponse {
    /**
     * The location of the Enterprise Channel Node.
     */
    azureLocation: string;
    /**
     * The sku of the Enterprise Channel Node.
     */
    azureSku: string;
    /**
     * Id of Enterprise Channel Node. This is generated by the Bot Framework.
     */
    id: string;
    /**
     * The name of the Enterprise Channel Node.
     */
    name: string;
    /**
     * The current state of the Enterprise Channel Node.
     */
    state?: string;
}

/**
 * The parameters to provide for the Enterprise Channel.
 */
export interface EnterpriseChannelPropertiesResponse {
    /**
     * The nodes associated with the Enterprise Channel.
     */
    nodes: outputs.botservice.v20180712.EnterpriseChannelNodeResponse[];
    /**
     * The current state of the Enterprise Channel.
     */
    state?: string;
}

/**
 * The parameters to provide for the Facebook channel.
 */
export interface FacebookChannelPropertiesResponse {
    /**
     * Facebook application id
     */
    appId: string;
    /**
     * Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    appSecret: string;
    /**
     * Callback Url
     */
    callbackUrl: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * The list of Facebook pages
     */
    pages?: outputs.botservice.v20180712.FacebookPageResponse[];
    /**
     * Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    verifyToken: string;
}

/**
 * Facebook channel definition
 */
export interface FacebookChannelResponse {
    /**
     * The channel name
     * Expected value is 'FacebookChannel'.
     */
    channelName: "FacebookChannel";
    /**
     * The set of properties specific to bot facebook channel
     */
    properties?: outputs.botservice.v20180712.FacebookChannelPropertiesResponse;
}

/**
 * A Facebook page for Facebook channel registration
 */
export interface FacebookPageResponse {
    /**
     * Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    accessToken: string;
    /**
     * Page id
     */
    id: string;
}

/**
 * The parameters to provide for the Kik channel.
 */
export interface KikChannelPropertiesResponse {
    /**
     * Kik API key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    apiKey: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated?: boolean;
    /**
     * The Kik user name
     */
    userName: string;
}

/**
 * Kik channel definition
 */
export interface KikChannelResponse {
    /**
     * The channel name
     * Expected value is 'KikChannel'.
     */
    channelName: "KikChannel";
    /**
     * The set of properties specific to Kik channel resource
     */
    properties?: outputs.botservice.v20180712.KikChannelPropertiesResponse;
}

/**
 * The parameters to provide for the Microsoft Teams channel.
 */
export interface MsTeamsChannelPropertiesResponse {
    /**
     * Webhook for Microsoft Teams channel calls
     */
    callingWebHook?: string;
    /**
     * Enable calling for Microsoft Teams channel
     */
    enableCalling?: boolean;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
}

/**
 * Microsoft Teams channel definition
 */
export interface MsTeamsChannelResponse {
    /**
     * The channel name
     * Expected value is 'MsTeamsChannel'.
     */
    channelName: "MsTeamsChannel";
    /**
     * The set of properties specific to Microsoft Teams channel resource
     */
    properties?: outputs.botservice.v20180712.MsTeamsChannelPropertiesResponse;
}

/**
 * Extra Parameters specific to each Service Provider
 */
export interface ServiceProviderParameterResponse {
    /**
     * Default Name for the Service Provider
     */
    default: string;
    /**
     * Description of the Service Provider
     */
    description: string;
    /**
     * Display Name of the Service Provider
     */
    displayName: string;
    /**
     * Help Url for the  Service Provider
     */
    helpUrl: string;
    /**
     * Name of the Service Provider
     */
    name: string;
    /**
     * Type of the Service Provider
     */
    type: string;
}

/**
 * The Object used to describe a Service Provider supported by Bot Service
 */
export interface ServiceProviderPropertiesResponse {
    /**
     * Display Name of the Service Provider
     */
    devPortalUrl: string;
    /**
     * Display Name of the Service Provider
     */
    displayName: string;
    /**
     * Display Name of the Service Provider
     */
    iconUrl: string;
    /**
     * Id for Service Provider
     */
    id: string;
    /**
     * The list of parameters for the Service Provider
     */
    parameters?: outputs.botservice.v20180712.ServiceProviderParameterResponse[];
    /**
     * Display Name of the Service Provider
     */
    serviceProviderName: string;
}

/**
 * Service Provider Definition
 */
export interface ServiceProviderResponse {
    /**
     * The Properties of a Service Provider Object
     */
    properties?: outputs.botservice.v20180712.ServiceProviderPropertiesResponse;
}

/**
 * The SKU of the cognitive services account.
 */
export interface SkuResponse {
    /**
     * The sku name
     */
    name: string;
    /**
     * Gets the sku tier. This is based on the SKU name.
     */
    tier: string;
}

/**
 * The parameters to provide for the Microsoft Teams channel.
 */
export interface SkypeChannelPropertiesResponse {
    /**
     * Calling web hook for Skype channel
     */
    callingWebHook?: string;
    /**
     * Enable calling for Skype channel
     */
    enableCalling?: boolean;
    /**
     * Enable groups for Skype channel
     */
    enableGroups?: boolean;
    /**
     * Enable media cards for Skype channel
     */
    enableMediaCards?: boolean;
    /**
     * Enable messaging for Skype channel
     */
    enableMessaging?: boolean;
    /**
     * Enable screen sharing for Skype channel
     */
    enableScreenSharing?: boolean;
    /**
     * Enable video for Skype channel
     */
    enableVideo?: boolean;
    /**
     * Group mode for Skype channel
     */
    groupsMode?: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
}

/**
 * Skype channel definition
 */
export interface SkypeChannelResponse {
    /**
     * The channel name
     * Expected value is 'SkypeChannel'.
     */
    channelName: "SkypeChannel";
    /**
     * The set of properties specific to Skype channel resource
     */
    properties?: outputs.botservice.v20180712.SkypeChannelPropertiesResponse;
}

/**
 * The parameters to provide for the Slack channel.
 */
export interface SlackChannelPropertiesResponse {
    /**
     * The Slack client id
     */
    clientId: string;
    /**
     * The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    clientSecret: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated: boolean;
    /**
     * The Slack landing page Url
     */
    landingPageUrl?: string;
    /**
     * The Sms auth token
     */
    lastSubmissionId: string;
    /**
     * The Slack redirect action
     */
    redirectAction: string;
    /**
     * Whether to register the settings before OAuth validation is performed. Recommended to True.
     */
    registerBeforeOAuthFlow: boolean;
    /**
     * The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    verificationToken: string;
}

/**
 * Slack channel definition
 */
export interface SlackChannelResponse {
    /**
     * The channel name
     * Expected value is 'SlackChannel'.
     */
    channelName: "SlackChannel";
    /**
     * The set of properties specific to Slack channel resource
     */
    properties?: outputs.botservice.v20180712.SlackChannelPropertiesResponse;
}

/**
 * The parameters to provide for the Sms channel.
 */
export interface SmsChannelPropertiesResponse {
    /**
     * The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    accountSID: string;
    /**
     * The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    authToken: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated?: boolean;
    /**
     * The Sms phone
     */
    phone: string;
}

/**
 * Sms channel definition
 */
export interface SmsChannelResponse {
    /**
     * The channel name
     * Expected value is 'SmsChannel'.
     */
    channelName: "SmsChannel";
    /**
     * The set of properties specific to Sms channel resource
     */
    properties?: outputs.botservice.v20180712.SmsChannelPropertiesResponse;
}

/**
 * The parameters to provide for the Telegram channel.
 */
export interface TelegramChannelPropertiesResponse {
    /**
     * The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    accessToken: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated?: boolean;
}

/**
 * Telegram channel definition
 */
export interface TelegramChannelResponse {
    /**
     * The channel name
     * Expected value is 'TelegramChannel'.
     */
    channelName: "TelegramChannel";
    /**
     * The set of properties specific to Telegram channel resource
     */
    properties?: outputs.botservice.v20180712.TelegramChannelPropertiesResponse;
}

/**
 * The parameters to provide for the Web Chat channel.
 */
export interface WebChatChannelPropertiesResponse {
    /**
     * The list of Web Chat sites
     */
    sites?: outputs.botservice.v20180712.WebChatSiteResponse[];
    /**
     * Web chat control embed code
     */
    webChatEmbedCode: string;
}

/**
 * Web Chat channel definition
 */
export interface WebChatChannelResponse {
    /**
     * The channel name
     * Expected value is 'WebChatChannel'.
     */
    channelName: "WebChatChannel";
    /**
     * The set of properties specific to Web Chat channel resource
     */
    properties?: outputs.botservice.v20180712.WebChatChannelPropertiesResponse;
}

/**
 * A site for the Webchat channel
 */
export interface WebChatSiteResponse {
    /**
     * Whether this site is enabled for preview versions of Webchat
     */
    enablePreview: boolean;
    /**
     * Whether this site is enabled for DirectLine channel
     */
    isEnabled: boolean;
    /**
     * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key: string;
    /**
     * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key2: string;
    /**
     * Site Id
     */
    siteId: string;
    /**
     * Site name
     */
    siteName: string;
}

