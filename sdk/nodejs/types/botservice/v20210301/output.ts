// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The parameters to provide for the Alexa channel.
 */
export interface AlexaChannelPropertiesResponse {
    /**
     * The Alexa skill Id
     */
    alexaSkillId: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Full Uri used to configured the skill in Alexa
     */
    serviceEndpointUri: string;
    /**
     * Url fragment used in part of the Uri configured in Alexa
     */
    urlFragment: string;
}

/**
 * Alexa channel definition
 */
export interface AlexaChannelResponse {
    /**
     * The channel name
     * Expected value is 'AlexaChannel'.
     */
    channelName: "AlexaChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Alexa channel resource
     */
    properties?: outputs.botservice.v20210301.AlexaChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * alexaChannelResponseProvideDefaults sets the appropriate defaults for AlexaChannelResponse
 */
export function alexaChannelResponseProvideDefaults(val: AlexaChannelResponse): AlexaChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The parameters to provide for the Bot.
 */
export interface BotPropertiesResponse {
    /**
     * Contains resource all settings defined as key/value pairs.
     */
    allSettings?: {[key: string]: string};
    /**
     * The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
     */
    appPasswordHint?: string;
    /**
     * The CMK encryption status
     */
    cmekEncryptionStatus: string;
    /**
     * The CMK Url
     */
    cmekKeyVaultUrl?: string;
    /**
     * Collection of channels for which the bot is configured
     */
    configuredChannels: string[];
    /**
     * The description of the bot
     */
    description?: string;
    /**
     * The Application Insights key
     */
    developerAppInsightKey?: string;
    /**
     * The Application Insights Api Key
     */
    developerAppInsightsApiKey?: string;
    /**
     * The Application Insights App Id
     */
    developerAppInsightsApplicationId?: string;
    /**
     * Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
     */
    disableLocalAuth?: boolean;
    /**
     * The Name of the bot
     */
    displayName: string;
    /**
     * Collection of channels for which the bot is enabled
     */
    enabledChannels: string[];
    /**
     * The bot's endpoint
     */
    endpoint: string;
    /**
     * The bot's endpoint version
     */
    endpointVersion: string;
    /**
     * The Icon Url of the bot
     */
    iconUrl?: string;
    /**
     * Whether Cmek is enabled
     */
    isCmekEnabled?: boolean;
    /**
     * Whether the bot is developerAppInsightsApiKey set
     */
    isDeveloperAppInsightsApiKeySet: boolean;
    /**
     * Whether the bot is streaming supported
     */
    isStreamingSupported?: boolean;
    /**
     * Collection of LUIS App Ids
     */
    luisAppIds?: string[];
    /**
     * The LUIS Key
     */
    luisKey?: string;
    /**
     * The bot's manifest url
     */
    manifestUrl?: string;
    /**
     * Token used to migrate non Azure bot to azure subscription
     */
    migrationToken: string;
    /**
     * Microsoft App Id for the bot
     */
    msaAppId: string;
    /**
     * Microsoft App Managed Identity Resource Id for the bot
     */
    msaAppMSIResourceId?: string;
    /**
     * Microsoft App Tenant Id for the bot
     */
    msaAppTenantId?: string;
    /**
     * Microsoft App Type for the bot
     */
    msaAppType?: string;
    /**
     * The hint to browser (e.g. protocol handler) on how to open the bot for authoring
     */
    openWithHint?: string;
    /**
     * Contains resource parameters defined as key/value pairs.
     */
    parameters?: {[key: string]: string};
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
    /**
     * Whether the bot is in an isolated network
     */
    publicNetworkAccess?: string;
    /**
     * Publishing credentials of the resource
     */
    publishingCredentials?: string;
    /**
     * The channel schema transformation version for the bot
     */
    schemaTransformationVersion?: string;
    /**
     * The storage resourceId for the bot
     */
    storageResourceId?: string;
}
/**
 * botPropertiesResponseProvideDefaults sets the appropriate defaults for BotPropertiesResponse
 */
export function botPropertiesResponseProvideDefaults(val: BotPropertiesResponse): BotPropertiesResponse {
    return {
        ...val,
        isStreamingSupported: (val.isStreamingSupported) ?? false,
        publicNetworkAccess: (val.publicNetworkAccess) ?? "Enabled",
    };
}

/**
 * Channel settings definition
 */
export interface ChannelSettingsResponse {
    /**
     * The bot icon url
     */
    botIconUrl?: string;
    /**
     * The bot id
     */
    botId?: string;
    /**
     * The channel display name
     */
    channelDisplayName?: string;
    /**
     * The channel id
     */
    channelId?: string;
    /**
     * Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
     */
    disableLocalAuth?: boolean;
    /**
     * The extensionKey1
     */
    extensionKey1?: string;
    /**
     * The extensionKey2
     */
    extensionKey2?: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled?: boolean;
    /**
     * The list of sites
     */
    sites?: outputs.botservice.v20210301.SiteResponse[];
}

/**
 * Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
 */
export interface ConnectionSettingParameterResponse {
    /**
     * Key for the Connection Setting Parameter.
     */
    key?: string;
    /**
     * Value associated with the Connection Setting Parameter.
     */
    value?: string;
}

/**
 * Properties for a Connection Setting Item
 */
export interface ConnectionSettingPropertiesResponse {
    /**
     * Client Id associated with the Connection Setting.
     */
    clientId?: string;
    /**
     * Client Secret associated with the Connection Setting
     */
    clientSecret?: string;
    /**
     * Id associated with the Connection Setting.
     */
    id?: string;
    /**
     * Name associated with the Connection Setting.
     */
    name?: string;
    /**
     * Service Provider Parameters associated with the Connection Setting
     */
    parameters?: outputs.botservice.v20210301.ConnectionSettingParameterResponse[];
    /**
     * Provisioning state of the resource
     */
    provisioningState?: string;
    /**
     * Scopes associated with the Connection Setting
     */
    scopes?: string;
    /**
     * Service Provider Display Name associated with the Connection Setting
     */
    serviceProviderDisplayName?: string;
    /**
     * Service Provider Id associated with the Connection Setting
     */
    serviceProviderId?: string;
    /**
     * Setting Id set by the service for the Connection Setting.
     */
    settingId: string;
}

/**
 * The parameters to provide for the Direct Line channel.
 */
export interface DirectLineChannelPropertiesResponse {
    /**
     * Direct Line embed code of the resource
     */
    directLineEmbedCode?: string;
    /**
     * The list of Direct Line sites
     */
    sites?: outputs.botservice.v20210301.DirectLineSiteResponse[];
}

/**
 * Direct Line channel definition
 */
export interface DirectLineChannelResponse {
    /**
     * The channel name
     * Expected value is 'DirectLineChannel'.
     */
    channelName: "DirectLineChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Direct Line channel resource
     */
    properties?: outputs.botservice.v20210301.DirectLineChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * directLineChannelResponseProvideDefaults sets the appropriate defaults for DirectLineChannelResponse
 */
export function directLineChannelResponseProvideDefaults(val: DirectLineChannelResponse): DirectLineChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * A site for the Direct Line channel
 */
export interface DirectLineSiteResponse {
    /**
     * Whether this site is enabled for block user upload.
     */
    isBlockUserUploadEnabled?: boolean;
    /**
     * Whether this site is enabled for DirectLine channel.
     */
    isEnabled: boolean;
    /**
     * Whether this site is enabled for authentication with Bot Framework.
     */
    isSecureSiteEnabled?: boolean;
    /**
     * Whether this site is enabled for Bot Framework V1 protocol.
     */
    isV1Enabled: boolean;
    /**
     * Whether this site is enabled for Bot Framework V1 protocol.
     */
    isV3Enabled: boolean;
    /**
     * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key: string;
    /**
     * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key2: string;
    /**
     * Site Id
     */
    siteId: string;
    /**
     * Site name
     */
    siteName: string;
    /**
     * List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
     */
    trustedOrigins?: string[];
}

/**
 * The parameters to provide for the DirectLine Speech channel.
 */
export interface DirectLineSpeechChannelPropertiesResponse {
    /**
     * The cognitive service region with this channel registration.
     */
    cognitiveServiceRegion: string;
    /**
     * The cognitive service subscription key to use with this channel registration.
     */
    cognitiveServiceSubscriptionKey: string;
    /**
     * Custom voice deployment id (optional).
     */
    customSpeechModelId?: string;
    /**
     * Custom speech model id (optional).
     */
    customVoiceDeploymentId?: string;
    /**
     * Make this a default bot for chosen cognitive service account.
     */
    isDefaultBotForCogSvcAccount?: boolean;
    /**
     * Whether this channel is enabled or not.
     */
    isEnabled?: boolean;
}

/**
 * DirectLine Speech channel definition
 */
export interface DirectLineSpeechChannelResponse {
    /**
     * The channel name
     * Expected value is 'DirectLineSpeechChannel'.
     */
    channelName: "DirectLineSpeechChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to DirectLine Speech channel resource
     */
    properties?: outputs.botservice.v20210301.DirectLineSpeechChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * directLineSpeechChannelResponseProvideDefaults sets the appropriate defaults for DirectLineSpeechChannelResponse
 */
export function directLineSpeechChannelResponseProvideDefaults(val: DirectLineSpeechChannelResponse): DirectLineSpeechChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The parameters to provide for the Email channel.
 */
export interface EmailChannelPropertiesResponse {
    /**
     * The email address
     */
    emailAddress: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    password?: string;
}

/**
 * Email channel definition
 */
export interface EmailChannelResponse {
    /**
     * The channel name
     * Expected value is 'EmailChannel'.
     */
    channelName: "EmailChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to email channel resource
     */
    properties?: outputs.botservice.v20210301.EmailChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * emailChannelResponseProvideDefaults sets the appropriate defaults for EmailChannelResponse
 */
export function emailChannelResponseProvideDefaults(val: EmailChannelResponse): EmailChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The parameters to provide for the Facebook channel.
 */
export interface FacebookChannelPropertiesResponse {
    /**
     * Facebook application id
     */
    appId: string;
    /**
     * Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    appSecret?: string;
    /**
     * Callback Url
     */
    callbackUrl: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * The list of Facebook pages
     */
    pages?: outputs.botservice.v20210301.FacebookPageResponse[];
    /**
     * Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    verifyToken: string;
}

/**
 * Facebook channel definition
 */
export interface FacebookChannelResponse {
    /**
     * The channel name
     * Expected value is 'FacebookChannel'.
     */
    channelName: "FacebookChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to bot facebook channel
     */
    properties?: outputs.botservice.v20210301.FacebookChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * facebookChannelResponseProvideDefaults sets the appropriate defaults for FacebookChannelResponse
 */
export function facebookChannelResponseProvideDefaults(val: FacebookChannelResponse): FacebookChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * A Facebook page for Facebook channel registration
 */
export interface FacebookPageResponse {
    /**
     * Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    accessToken?: string;
    /**
     * Page id
     */
    id: string;
}

/**
 * The parameters to provide for the Kik channel.
 */
export interface KikChannelPropertiesResponse {
    /**
     * Kik API key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    apiKey?: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated?: boolean;
    /**
     * The Kik user name
     */
    userName: string;
}

/**
 * Kik channel definition
 */
export interface KikChannelResponse {
    /**
     * The channel name
     * Expected value is 'KikChannel'.
     */
    channelName: "KikChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Kik channel resource
     */
    properties?: outputs.botservice.v20210301.KikChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * kikChannelResponseProvideDefaults sets the appropriate defaults for KikChannelResponse
 */
export function kikChannelResponseProvideDefaults(val: KikChannelResponse): KikChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The parameters to provide for the Line channel.
 */
export interface LineChannelPropertiesResponse {
    /**
     * Callback Url to enter in line registration.
     */
    callbackUrl: string;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated: boolean;
    /**
     * The list of line channel registrations
     */
    lineRegistrations: outputs.botservice.v20210301.LineRegistrationResponse[];
}

/**
 * Line channel definition
 */
export interface LineChannelResponse {
    /**
     * The channel name
     * Expected value is 'LineChannel'.
     */
    channelName: "LineChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to line channel resource
     */
    properties?: outputs.botservice.v20210301.LineChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * lineChannelResponseProvideDefaults sets the appropriate defaults for LineChannelResponse
 */
export function lineChannelResponseProvideDefaults(val: LineChannelResponse): LineChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The properties corresponding to a line channel registration
 */
export interface LineRegistrationResponse {
    /**
     * Access token for the line channel registration
     */
    channelAccessToken?: string;
    /**
     * Secret for the line channel registration
     */
    channelSecret?: string;
    /**
     * Id generated for the line channel registration
     */
    generatedId: string;
}

/**
 * The parameters to provide for the Microsoft Teams channel.
 */
export interface MsTeamsChannelPropertiesResponse {
    /**
     * Whether this channel accepted terms
     */
    acceptedTerms?: boolean;
    /**
     * Webhook for Microsoft Teams channel calls
     */
    callingWebHook?: string;
    /**
     * Deployment environment for Microsoft Teams channel calls
     */
    deploymentEnvironment?: string;
    /**
     * Enable calling for Microsoft Teams channel
     */
    enableCalling?: boolean;
    /**
     * Webhook for Microsoft Teams channel calls
     */
    incomingCallRoute?: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
}
/**
 * msTeamsChannelPropertiesResponseProvideDefaults sets the appropriate defaults for MsTeamsChannelPropertiesResponse
 */
export function msTeamsChannelPropertiesResponseProvideDefaults(val: MsTeamsChannelPropertiesResponse): MsTeamsChannelPropertiesResponse {
    return {
        ...val,
        acceptedTerms: (val.acceptedTerms) ?? true,
    };
}

/**
 * Microsoft Teams channel definition
 */
export interface MsTeamsChannelResponse {
    /**
     * The channel name
     * Expected value is 'MsTeamsChannel'.
     */
    channelName: "MsTeamsChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Microsoft Teams channel resource
     */
    properties?: outputs.botservice.v20210301.MsTeamsChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * msTeamsChannelResponseProvideDefaults sets the appropriate defaults for MsTeamsChannelResponse
 */
export function msTeamsChannelResponseProvideDefaults(val: MsTeamsChannelResponse): MsTeamsChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
        properties: (val.properties ? outputs.botservice.v20210301.msTeamsChannelPropertiesResponseProvideDefaults(val.properties) : undefined),
    };
}

/**
 * Extra Parameters specific to each Service Provider
 */
export interface ServiceProviderParameterResponse {
    /**
     * Default Name for the Service Provider
     */
    default: string;
    /**
     * Description of the Service Provider
     */
    description: string;
    /**
     * Display Name of the Service Provider
     */
    displayName: string;
    /**
     * Help Url for the  Service Provider
     */
    helpUrl: string;
    /**
     * Meta data for the Service Provider
     */
    metadata: outputs.botservice.v20210301.ServiceProviderParameterResponseMetadata;
    /**
     * Name of the Service Provider
     */
    name: string;
    /**
     * Type of the Service Provider
     */
    type: string;
}

/**
 * the constraints of the bot meta data.
 */
export interface ServiceProviderParameterResponseConstraints {
    /**
     * Whether required the constraints of the bot meta data.
     */
    required?: boolean;
}

/**
 * Meta data for the Service Provider
 */
export interface ServiceProviderParameterResponseMetadata {
    /**
     * the constraints of the bot meta data.
     */
    constraints?: outputs.botservice.v20210301.ServiceProviderParameterResponseConstraints;
}

/**
 * The Object used to describe a Service Provider supported by Bot Service
 */
export interface ServiceProviderPropertiesResponse {
    /**
     * Display Name of the Service Provider
     */
    devPortalUrl: string;
    /**
     * Display Name of the Service Provider
     */
    displayName: string;
    /**
     * Display Name of the Service Provider
     */
    iconUrl: string;
    /**
     * Id for Service Provider
     */
    id: string;
    /**
     * The list of parameters for the Service Provider
     */
    parameters?: outputs.botservice.v20210301.ServiceProviderParameterResponse[];
    /**
     * Display Name of the Service Provider
     */
    serviceProviderName: string;
}

/**
 * Service Provider Definition
 */
export interface ServiceProviderResponse {
    /**
     * The Properties of a Service Provider Object
     */
    properties?: outputs.botservice.v20210301.ServiceProviderPropertiesResponse;
}

/**
 * A site for the channel
 */
export interface SiteResponse {
    /**
     * Entity Tag
     */
    eTag?: string;
    /**
     * Whether this site is enabled for block user upload.
     */
    isBlockUserUploadEnabled?: boolean;
    /**
     * Whether this site is enabled for DirectLine channel.
     */
    isEnabled: boolean;
    /**
     * Whether this site is enabled for authentication with Bot Framework.
     */
    isSecureSiteEnabled?: boolean;
    /**
     * Whether this site is token enabled for channel
     */
    isTokenEnabled?: boolean;
    /**
     * Whether this site is enabled for Bot Framework V1 protocol.
     */
    isV1Enabled: boolean;
    /**
     * Whether this site is enabled for Bot Framework V1 protocol.
     */
    isV3Enabled: boolean;
    /**
     * Whether this site is enabled for preview versions of Webchat
     */
    isWebchatPreviewEnabled: boolean;
    /**
     * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key: string;
    /**
     * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key2: string;
    /**
     * Site Id
     */
    siteId: string;
    /**
     * Site name
     */
    siteName: string;
    /**
     * List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
     */
    trustedOrigins?: string[];
}
/**
 * siteResponseProvideDefaults sets the appropriate defaults for SiteResponse
 */
export function siteResponseProvideDefaults(val: SiteResponse): SiteResponse {
    return {
        ...val,
        isWebchatPreviewEnabled: (val.isWebchatPreviewEnabled) ?? false,
    };
}

/**
 * The SKU of the cognitive services account.
 */
export interface SkuResponse {
    /**
     * The sku name
     */
    name: string;
    /**
     * Gets the sku tier. This is based on the SKU name.
     */
    tier: string;
}

/**
 * The parameters to provide for the Microsoft Teams channel.
 */
export interface SkypeChannelPropertiesResponse {
    /**
     * Calling web hook for Skype channel
     */
    callingWebHook?: string;
    /**
     * Enable calling for Skype channel
     */
    enableCalling?: boolean;
    /**
     * Enable groups for Skype channel
     */
    enableGroups?: boolean;
    /**
     * Enable media cards for Skype channel
     */
    enableMediaCards?: boolean;
    /**
     * Enable messaging for Skype channel
     */
    enableMessaging?: boolean;
    /**
     * Enable screen sharing for Skype channel
     */
    enableScreenSharing?: boolean;
    /**
     * Enable video for Skype channel
     */
    enableVideo?: boolean;
    /**
     * Group mode for Skype channel
     */
    groupsMode?: string;
    /**
     * Incoming call route for Skype channel
     */
    incomingCallRoute?: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
}

/**
 * Skype channel definition
 */
export interface SkypeChannelResponse {
    /**
     * The channel name
     * Expected value is 'SkypeChannel'.
     */
    channelName: "SkypeChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Skype channel resource
     */
    properties?: outputs.botservice.v20210301.SkypeChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * skypeChannelResponseProvideDefaults sets the appropriate defaults for SkypeChannelResponse
 */
export function skypeChannelResponseProvideDefaults(val: SkypeChannelResponse): SkypeChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The parameters to provide for the Slack channel.
 */
export interface SlackChannelPropertiesResponse {
    /**
     * The Slack client id
     */
    clientId?: string;
    /**
     * The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    clientSecret?: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated: boolean;
    /**
     * The Slack landing page Url
     */
    landingPageUrl?: string;
    /**
     * The Sms auth token
     */
    lastSubmissionId: string;
    /**
     * The Slack redirect action
     */
    redirectAction: string;
    /**
     * Whether to register the settings before OAuth validation is performed. Recommended to True.
     */
    registerBeforeOAuthFlow: boolean;
    /**
     * The Slack signing secret.
     */
    signingSecret?: string;
    /**
     * The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    verificationToken?: string;
}

/**
 * Slack channel definition
 */
export interface SlackChannelResponse {
    /**
     * The channel name
     * Expected value is 'SlackChannel'.
     */
    channelName: "SlackChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Slack channel resource
     */
    properties?: outputs.botservice.v20210301.SlackChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * slackChannelResponseProvideDefaults sets the appropriate defaults for SlackChannelResponse
 */
export function slackChannelResponseProvideDefaults(val: SlackChannelResponse): SlackChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The parameters to provide for the Sms channel.
 */
export interface SmsChannelPropertiesResponse {
    /**
     * The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    accountSID: string;
    /**
     * The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    authToken?: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated?: boolean;
    /**
     * The Sms phone
     */
    phone: string;
}

/**
 * Sms channel definition
 */
export interface SmsChannelResponse {
    /**
     * The channel name
     * Expected value is 'SmsChannel'.
     */
    channelName: "SmsChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Sms channel resource
     */
    properties?: outputs.botservice.v20210301.SmsChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * smsChannelResponseProvideDefaults sets the appropriate defaults for SmsChannelResponse
 */
export function smsChannelResponseProvideDefaults(val: SmsChannelResponse): SmsChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The parameters to provide for the Telegram channel.
 */
export interface TelegramChannelPropertiesResponse {
    /**
     * The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    accessToken?: string;
    /**
     * Whether this channel is enabled for the bot
     */
    isEnabled: boolean;
    /**
     * Whether this channel is validated for the bot
     */
    isValidated?: boolean;
}

/**
 * Telegram channel definition
 */
export interface TelegramChannelResponse {
    /**
     * The channel name
     * Expected value is 'TelegramChannel'.
     */
    channelName: "TelegramChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Telegram channel resource
     */
    properties?: outputs.botservice.v20210301.TelegramChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * telegramChannelResponseProvideDefaults sets the appropriate defaults for TelegramChannelResponse
 */
export function telegramChannelResponseProvideDefaults(val: TelegramChannelResponse): TelegramChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * The parameters to provide for the Web Chat channel.
 */
export interface WebChatChannelPropertiesResponse {
    /**
     * The list of Web Chat sites
     */
    sites?: outputs.botservice.v20210301.WebChatSiteResponse[];
    /**
     * Web chat control embed code
     */
    webChatEmbedCode: string;
}

/**
 * Web Chat channel definition
 */
export interface WebChatChannelResponse {
    /**
     * The channel name
     * Expected value is 'WebChatChannel'.
     */
    channelName: "WebChatChannel";
    /**
     * Entity Tag of the resource
     */
    etag?: string;
    /**
     * Specifies the location of the resource.
     */
    location?: string;
    /**
     * The set of properties specific to Web Chat channel resource
     */
    properties?: outputs.botservice.v20210301.WebChatChannelPropertiesResponse;
    /**
     * Provisioning state of the resource
     */
    provisioningState: string;
}
/**
 * webChatChannelResponseProvideDefaults sets the appropriate defaults for WebChatChannelResponse
 */
export function webChatChannelResponseProvideDefaults(val: WebChatChannelResponse): WebChatChannelResponse {
    return {
        ...val,
        location: (val.location) ?? "global",
    };
}

/**
 * A site for the Webchat channel
 */
export interface WebChatSiteResponse {
    /**
     * Whether this site is enabled for DirectLine channel
     */
    isEnabled: boolean;
    /**
     * Whether this site is enabled for preview versions of Webchat
     */
    isWebchatPreviewEnabled: boolean;
    /**
     * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key: string;
    /**
     * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    key2: string;
    /**
     * Site Id
     */
    siteId: string;
    /**
     * Site name
     */
    siteName: string;
}
/**
 * webChatSiteResponseProvideDefaults sets the appropriate defaults for WebChatSiteResponse
 */
export function webChatSiteResponseProvideDefaults(val: WebChatSiteResponse): WebChatSiteResponse {
    return {
        ...val,
        isWebchatPreviewEnabled: (val.isWebchatPreviewEnabled) ?? false,
    };
}

