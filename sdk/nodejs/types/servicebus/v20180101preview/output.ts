// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
 */
export interface ActionResponse {
    /**
     * This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
     */
    compatibilityLevel?: number;
    /**
     * Value that indicates whether the rule action requires preprocessing.
     */
    requiresPreprocessing?: boolean;
    /**
     * SQL expression. e.g. MyProperty='ABC'
     */
    sqlExpression?: string;
}
/**
 * actionResponseProvideDefaults sets the appropriate defaults for ActionResponse
 */
export function actionResponseProvideDefaults(val: ActionResponse): ActionResponse {
    return {
        ...val,
        requiresPreprocessing: (val.requiresPreprocessing) ?? true,
    };
}

/**
 * ConnectionState information.
 */
export interface ConnectionStateResponse {
    /**
     * Description of the connection state.
     */
    description?: string;
    /**
     * Status of the connection.
     */
    status?: string;
}

/**
 * Represents the correlation filter expression.
 */
export interface CorrelationFilterResponse {
    /**
     * Content type of the message.
     */
    contentType?: string;
    /**
     * Identifier of the correlation.
     */
    correlationId?: string;
    /**
     * Application specific label.
     */
    label?: string;
    /**
     * Identifier of the message.
     */
    messageId?: string;
    /**
     * dictionary object for custom filters
     */
    properties?: {[key: string]: string};
    /**
     * Address of the queue to reply to.
     */
    replyTo?: string;
    /**
     * Session identifier to reply to.
     */
    replyToSessionId?: string;
    /**
     * Value that indicates whether the rule action requires preprocessing.
     */
    requiresPreprocessing?: boolean;
    /**
     * Session identifier.
     */
    sessionId?: string;
    /**
     * Address to send to.
     */
    to?: string;
}
/**
 * correlationFilterResponseProvideDefaults sets the appropriate defaults for CorrelationFilterResponse
 */
export function correlationFilterResponseProvideDefaults(val: CorrelationFilterResponse): CorrelationFilterResponse {
    return {
        ...val,
        requiresPreprocessing: (val.requiresPreprocessing) ?? true,
    };
}

/**
 * Properties to configure Encryption
 */
export interface EncryptionResponse {
    /**
     * Enumerates the possible value of keySource for Encryption
     */
    keySource?: string;
    /**
     * Properties of KeyVault
     */
    keyVaultProperties?: outputs.servicebus.v20180101preview.KeyVaultPropertiesResponse;
}
/**
 * encryptionResponseProvideDefaults sets the appropriate defaults for EncryptionResponse
 */
export function encryptionResponseProvideDefaults(val: EncryptionResponse): EncryptionResponse {
    return {
        ...val,
        keySource: (val.keySource) ?? "Microsoft.KeyVault",
    };
}

/**
 * Properties to configure Identity for Bring your Own Keys
 */
export interface IdentityResponse {
    /**
     * ObjectId from the KeyVault
     */
    principalId?: string;
    /**
     * TenantId from the KeyVault
     */
    tenantId?: string;
    /**
     * Enumerates the possible value Identity type, which currently supports only 'SystemAssigned'
     */
    type?: string;
}
/**
 * identityResponseProvideDefaults sets the appropriate defaults for IdentityResponse
 */
export function identityResponseProvideDefaults(val: IdentityResponse): IdentityResponse {
    return {
        ...val,
        type: (val.type) ?? "SystemAssigned",
    };
}

/**
 * Properties to configure keyVault Properties
 */
export interface KeyVaultPropertiesResponse {
    /**
     * Name of the Key from KeyVault
     */
    keyName?: string;
    /**
     * Uri of KeyVault
     */
    keyVaultUri?: string;
}

/**
 * Message Count Details.
 */
export interface MessageCountDetailsResponse {
    /**
     * Number of active messages in the queue, topic, or subscription.
     */
    activeMessageCount: number;
    /**
     * Number of messages that are dead lettered.
     */
    deadLetterMessageCount: number;
    /**
     * Number of scheduled messages.
     */
    scheduledMessageCount: number;
    /**
     * Number of messages transferred into dead letters.
     */
    transferDeadLetterMessageCount: number;
    /**
     * Number of messages transferred to another queue, topic, or subscription.
     */
    transferMessageCount: number;
}

/**
 * Description of NetWorkRuleSet - IpRules resource.
 */
export interface NWRuleSetIpRulesResponse {
    /**
     * The IP Filter Action
     */
    action?: string;
    /**
     * IP Mask
     */
    ipMask?: string;
}
/**
 * nwruleSetIpRulesResponseProvideDefaults sets the appropriate defaults for NWRuleSetIpRulesResponse
 */
export function nwruleSetIpRulesResponseProvideDefaults(val: NWRuleSetIpRulesResponse): NWRuleSetIpRulesResponse {
    return {
        ...val,
        action: (val.action) ?? "Allow",
    };
}

/**
 * Description of VirtualNetworkRules - NetworkRules resource.
 */
export interface NWRuleSetVirtualNetworkRulesResponse {
    /**
     * Value that indicates whether to ignore missing VNet Service Endpoint
     */
    ignoreMissingVnetServiceEndpoint?: boolean;
    /**
     * Subnet properties
     */
    subnet?: outputs.servicebus.v20180101preview.SubnetResponse;
}

/**
 * PrivateEndpoint information.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint.
     */
    id?: string;
}

/**
 * SKU of the namespace.
 */
export interface SBSkuResponse {
    /**
     * The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
     */
    capacity?: number;
    /**
     * Name of this SKU.
     */
    name: string;
    /**
     * The billing tier of this particular SKU.
     */
    tier?: string;
}

/**
 * Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
 */
export interface SqlFilterResponse {
    /**
     * This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
     */
    compatibilityLevel?: number;
    /**
     * Value that indicates whether the rule action requires preprocessing.
     */
    requiresPreprocessing?: boolean;
    /**
     * The SQL expression. e.g. MyProperty='ABC'
     */
    sqlExpression?: string;
}
/**
 * sqlFilterResponseProvideDefaults sets the appropriate defaults for SqlFilterResponse
 */
export function sqlFilterResponseProvideDefaults(val: SqlFilterResponse): SqlFilterResponse {
    return {
        ...val,
        compatibilityLevel: (val.compatibilityLevel) ?? 20,
        requiresPreprocessing: (val.requiresPreprocessing) ?? true,
    };
}

/**
 * Properties supplied for Subnet
 */
export interface SubnetResponse {
    /**
     * Resource ID of Virtual Network Subnet
     */
    id: string;
}

