// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20181001 from "./v20181001/output";
export * as v20190201 from "./v20190201/output";
export * as v20190301 from "./v20190301/output";
export * as v20190601 from "./v20190601/output";
export * as v20191001 from "./v20191001/output";
export * as v20200301 from "./v20200301/output";
export * as v20200901 from "./v20200901/output";
export * as v20220601 from "./v20220601/output";
/**
 * Server endpoint cloud tiering status object.
 */
export interface CloudTieringCachePerformanceResponse {
    /**
     * Count of bytes that were served from the local server
     */
    cacheHitBytes: number;
    /**
     * Percentage of total bytes (hit + miss) that were served from the local server
     */
    cacheHitBytesPercent: number;
    /**
     * Count of bytes that were served from the cloud
     */
    cacheMissBytes: number;
    /**
     * Last updated timestamp
     */
    lastUpdatedTimestamp: string;
}

/**
 * Status of the date policy
 */
export interface CloudTieringDatePolicyStatusResponse {
    /**
     * Last updated timestamp
     */
    lastUpdatedTimestamp: string;
    /**
     * Most recent access time of tiered files
     */
    tieredFilesMostRecentAccessTimestamp: string;
}

/**
 * Server endpoint cloud tiering status object.
 */
export interface CloudTieringFilesNotTieringResponse {
    /**
     * Array of tiering errors
     */
    errors: outputs.storagesync.FilesNotTieringErrorResponse[];
    /**
     * Last updated timestamp
     */
    lastUpdatedTimestamp: string;
    /**
     * Last cloud tiering result (HResult)
     */
    totalFileCount: number;
}

/**
 * Server endpoint cloud tiering status object.
 */
export interface CloudTieringSpaceSavingsResponse {
    /**
     * Cached content size on the server
     */
    cachedSizeBytes: number;
    /**
     * Last updated timestamp
     */
    lastUpdatedTimestamp: string;
    /**
     * Count of bytes saved on the server
     */
    spaceSavingsBytes: number;
    /**
     * Percentage of cached size over total size
     */
    spaceSavingsPercent: number;
    /**
     * Total size of content in the azure file share
     */
    totalSizeCloudBytes: number;
    /**
     * Volume size
     */
    volumeSizeBytes: number;
}

/**
 * Status of the volume free space policy
 */
export interface CloudTieringVolumeFreeSpacePolicyStatusResponse {
    /**
     * Current volume free space percentage.
     */
    currentVolumeFreeSpacePercent: number;
    /**
     * In the case where multiple server endpoints are present in a volume, an effective free space policy is applied.
     */
    effectiveVolumeFreeSpacePolicy: number;
    /**
     * Last updated timestamp
     */
    lastUpdatedTimestamp: string;
}

/**
 * Files not tiering error object
 */
export interface FilesNotTieringErrorResponse {
    /**
     * Error code (HResult)
     */
    errorCode: number;
    /**
     * Count of files with this error
     */
    fileCount: number;
}

/**
 * The Private Endpoint Connection resource.
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    id: string;
    /**
     * The name of the resource
     */
    name: string;
    /**
     * The resource of private end point.
     */
    privateEndpoint?: outputs.storagesync.PrivateEndpointResponse;
    /**
     * A collection of information about the state of the connection between service consumer and provider.
     */
    privateLinkServiceConnectionState: outputs.storagesync.PrivateLinkServiceConnectionStateResponse;
    /**
     * The provisioning state of the private endpoint connection resource.
     */
    provisioningState: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    type: string;
}

/**
 * The Private Endpoint resource.
 */
export interface PrivateEndpointResponse {
    /**
     * The ARM identifier for Private Endpoint
     */
    id: string;
}

/**
 * A collection of information about the state of the connection between service consumer and provider.
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval/rejection of the connection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
     */
    status?: string;
}

/**
 * Server endpoint cloud tiering status object.
 */
export interface ServerEndpointCloudTieringStatusResponse {
    /**
     * Information regarding how well the local cache on the server is performing.
     */
    cachePerformance: outputs.storagesync.CloudTieringCachePerformanceResponse;
    /**
     * Status of the date policy
     */
    datePolicyStatus: outputs.storagesync.CloudTieringDatePolicyStatusResponse;
    /**
     * Information regarding files that failed to be tiered
     */
    filesNotTiering: outputs.storagesync.CloudTieringFilesNotTieringResponse;
    /**
     * Cloud tiering health state.
     */
    health: string;
    /**
     * The last updated timestamp of health state
     */
    healthLastUpdatedTimestamp: string;
    /**
     * Last cloud tiering result (HResult)
     */
    lastCloudTieringResult: number;
    /**
     * Last cloud tiering success timestamp
     */
    lastSuccessTimestamp: string;
    /**
     * Last updated timestamp
     */
    lastUpdatedTimestamp: string;
    /**
     * Information regarding how much local space cloud tiering is saving.
     */
    spaceSavings: outputs.storagesync.CloudTieringSpaceSavingsResponse;
    /**
     * Status of the volume free space policy
     */
    volumeFreeSpacePolicyStatus: outputs.storagesync.CloudTieringVolumeFreeSpacePolicyStatusResponse;
}

/**
 * Files not syncing error object
 */
export interface ServerEndpointFilesNotSyncingErrorResponse {
    /**
     * Error code (HResult)
     */
    errorCode: number;
    /**
     * Count of persistent files not syncing with the specified error code
     */
    persistentCount: number;
    /**
     * Count of transient files not syncing with the specified error code
     */
    transientCount: number;
}

/**
 * Server endpoint recall error object
 */
export interface ServerEndpointRecallErrorResponse {
    /**
     * Count of occurences of the error
     */
    count: number;
    /**
     * Error code (HResult)
     */
    errorCode: number;
}

/**
 * Server endpoint recall status object.
 */
export interface ServerEndpointRecallStatusResponse {
    /**
     * Last updated timestamp
     */
    lastUpdatedTimestamp: string;
    /**
     * Array of recall errors
     */
    recallErrors: outputs.storagesync.ServerEndpointRecallErrorResponse[];
    /**
     * Total count of recall errors.
     */
    totalRecallErrorsCount: number;
}

/**
 * Sync Session status object.
 */
export interface ServerEndpointSyncActivityStatusResponse {
    /**
     * Applied bytes
     */
    appliedBytes: number;
    /**
     * Applied item count.
     */
    appliedItemCount: number;
    /**
     * Per item error count
     */
    perItemErrorCount: number;
    /**
     * Sync mode
     */
    syncMode: string;
    /**
     * Timestamp when properties were updated
     */
    timestamp: string;
    /**
     * Total bytes (if available)
     */
    totalBytes: number;
    /**
     * Total item count (if available)
     */
    totalItemCount: number;
}

/**
 * Sync Session status object.
 */
export interface ServerEndpointSyncSessionStatusResponse {
    /**
     * Array of per-item errors coming from the last sync session.
     */
    filesNotSyncingErrors: outputs.storagesync.ServerEndpointFilesNotSyncingErrorResponse[];
    /**
     * Sync mode
     */
    lastSyncMode: string;
    /**
     * Last sync per item error count.
     */
    lastSyncPerItemErrorCount: number;
    /**
     * Last sync result (HResult)
     */
    lastSyncResult: number;
    /**
     * Last sync success timestamp
     */
    lastSyncSuccessTimestamp: string;
    /**
     * Last sync timestamp
     */
    lastSyncTimestamp: string;
    /**
     * Count of persistent files not syncing.
     */
    persistentFilesNotSyncingCount: number;
    /**
     * Count of transient files not syncing.
     */
    transientFilesNotSyncingCount: number;
}

/**
 * Server Endpoint sync status
 */
export interface ServerEndpointSyncStatusResponse {
    /**
     * Combined Health Status.
     */
    combinedHealth: string;
    /**
     * Download sync activity
     */
    downloadActivity: outputs.storagesync.ServerEndpointSyncActivityStatusResponse;
    /**
     * Download Health Status.
     */
    downloadHealth: string;
    /**
     * Download Status
     */
    downloadStatus: outputs.storagesync.ServerEndpointSyncSessionStatusResponse;
    /**
     * Last Updated Timestamp
     */
    lastUpdatedTimestamp: string;
    /**
     * Offline Data Transfer State
     */
    offlineDataTransferStatus: string;
    /**
     * Sync activity
     */
    syncActivity: string;
    /**
     * Total count of persistent files not syncing (combined upload + download).
     */
    totalPersistentFilesNotSyncingCount: number;
    /**
     * Upload sync activity
     */
    uploadActivity: outputs.storagesync.ServerEndpointSyncActivityStatusResponse;
    /**
     * Upload Health Status.
     */
    uploadHealth: string;
    /**
     * Upload Status
     */
    uploadStatus: outputs.storagesync.ServerEndpointSyncSessionStatusResponse;
}

