// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
 */
export interface AccessPolicyEntryResponse {
    /**
     *  Application ID of the client making request on behalf of a principal
     */
    applicationId?: string;
    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     */
    objectId: string;
    /**
     * Permissions the identity has for keys, secrets and certificates.
     */
    permissions: outputs.keyvault.v20180214preview.PermissionsResponse;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId: string;
}

/**
 * A rule governing the accessibility of a vault from a specific ip address or ip range.
 */
export interface IPRuleResponse {
    /**
     * An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
     */
    value: string;
}

/**
 * A set of rules governing the network accessibility of a vault.
 */
export interface NetworkRuleSetResponse {
    /**
     * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
     */
    bypass?: string;
    /**
     * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
     */
    defaultAction?: string;
    /**
     * The list of IP address rules.
     */
    ipRules?: outputs.keyvault.v20180214preview.IPRuleResponse[];
    /**
     * The list of virtual network rules.
     */
    virtualNetworkRules?: outputs.keyvault.v20180214preview.VirtualNetworkRuleResponse[];
}

/**
 * Permissions the identity has for keys, secrets, certificates and storage.
 */
export interface PermissionsResponse {
    /**
     * Permissions to certificates
     */
    certificates?: string[];
    /**
     * Permissions to keys
     */
    keys?: string[];
    /**
     * Permissions to secrets
     */
    secrets?: string[];
    /**
     * Permissions to storage accounts
     */
    storage?: string[];
}

/**
 * The secret management attributes.
 */
export interface SecretAttributesResponse {
    /**
     * Creation time in seconds since 1970-01-01T00:00:00Z.
     */
    created: number;
    /**
     * Determines whether the object is enabled.
     */
    enabled?: boolean;
    /**
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     */
    expires?: number;
    /**
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     */
    notBefore?: number;
    /**
     * Last updated time in seconds since 1970-01-01T00:00:00Z.
     */
    updated: number;
}

/**
 * Properties of the secret
 */
export interface SecretPropertiesResponse {
    /**
     * The attributes of the secret.
     */
    attributes?: outputs.keyvault.v20180214preview.SecretAttributesResponse;
    /**
     * The content type of the secret.
     */
    contentType?: string;
    /**
     * The URI to retrieve the current version of the secret.
     */
    secretUri: string;
    /**
     * The URI to retrieve the specific version of the secret.
     */
    secretUriWithVersion: string;
    /**
     * The value of the secret. NOTE: 'value' will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     */
    value?: string;
}

/**
 * SKU details
 */
export interface SkuResponse {
    /**
     * SKU family name
     */
    family: string;
    /**
     * SKU name to specify whether the key vault is a standard vault or a premium vault.
     */
    name: string;
}

/**
 * Properties of the vault
 */
export interface VaultPropertiesResponse {
    /**
     * An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
     */
    accessPolicies?: outputs.keyvault.v20180214preview.AccessPolicyEntryResponse[];
    /**
     * The vault's create mode to indicate whether the vault need to be recovered or not.
     */
    createMode?: string;
    /**
     * Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
     */
    enablePurgeProtection?: boolean;
    /**
     * Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.
     */
    enableSoftDelete?: boolean;
    /**
     * Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
     */
    enabledForDeployment?: boolean;
    /**
     * Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
     */
    enabledForDiskEncryption?: boolean;
    /**
     * Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
     */
    enabledForTemplateDeployment?: boolean;
    /**
     * A collection of rules governing the accessibility of the vault from specific network locations.
     */
    networkAcls?: outputs.keyvault.v20180214preview.NetworkRuleSetResponse;
    /**
     * SKU details
     */
    sku: outputs.keyvault.v20180214preview.SkuResponse;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId: string;
    /**
     * The URI of the vault for performing operations on keys and secrets.
     */
    vaultUri?: string;
}

/**
 * A rule governing the accessibility of a vault from a specific virtual network.
 */
export interface VirtualNetworkRuleResponse {
    /**
     * Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
     */
    id: string;
}

