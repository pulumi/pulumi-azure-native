// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
 */
export interface AccessPolicyEntryResponse {
    /**
     *  Application ID of the client making request on behalf of a principal
     */
    applicationId?: string;
    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     */
    objectId: string;
    /**
     * Permissions the identity has for keys, secrets and certificates.
     */
    permissions: outputs.keyvault.v20210401preview.PermissionsResponse;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId: string;
}

export interface ActionResponse {
    /**
     * The type of action.
     */
    type?: string;
}

/**
 * A rule governing the accessibility of a vault from a specific ip address or ip range.
 */
export interface IPRuleResponse {
    /**
     * An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
     */
    value: string;
}

/**
 * The object attributes managed by the Azure Key Vault service.
 */
export interface KeyAttributesResponse {
    /**
     * Creation time in seconds since 1970-01-01T00:00:00Z.
     */
    created: number;
    /**
     * Determines whether or not the object is enabled.
     */
    enabled?: boolean;
    /**
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     */
    expires?: number;
    /**
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     */
    notBefore?: number;
    /**
     * The deletion recovery level currently in effect for the object. If it contains 'Purgeable', then the object can be permanently deleted by a privileged user; otherwise, only the system can purge the object at the end of the retention interval.
     */
    recoveryLevel: string;
    /**
     * Last updated time in seconds since 1970-01-01T00:00:00Z.
     */
    updated: number;
}

export interface KeyRotationPolicyAttributesResponse {
    /**
     * Creation time in seconds since 1970-01-01T00:00:00Z.
     */
    created: number;
    /**
     * The expiration time for the new key version. It should be in ISO8601 format. Eg: 'P90D', 'P1Y'.
     */
    expiryTime?: string;
    /**
     * Last updated time in seconds since 1970-01-01T00:00:00Z.
     */
    updated: number;
}

export interface LifetimeActionResponse {
    /**
     * The action of key rotation policy lifetimeAction.
     */
    action?: outputs.keyvault.v20210401preview.ActionResponse;
    /**
     * The trigger of key rotation policy lifetimeAction.
     */
    trigger?: outputs.keyvault.v20210401preview.TriggerResponse;
}

/**
 * A rule governing the accessibility of a managed hsm pool from a specific ip address or ip range.
 */
export interface MHSMIPRuleResponse {
    /**
     * An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
     */
    value: string;
}

/**
 * A set of rules governing the network accessibility of a managed hsm pool.
 */
export interface MHSMNetworkRuleSetResponse {
    /**
     * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
     */
    bypass?: string;
    /**
     * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
     */
    defaultAction?: string;
    /**
     * The list of IP address rules.
     */
    ipRules?: outputs.keyvault.v20210401preview.MHSMIPRuleResponse[];
    /**
     * The list of virtual network rules.
     */
    virtualNetworkRules?: outputs.keyvault.v20210401preview.MHSMVirtualNetworkRuleResponse[];
}

/**
 * Private endpoint connection item.
 */
export interface MHSMPrivateEndpointConnectionItemResponse {
    /**
     * Modified whenever there is a change in the state of private endpoint connection.
     */
    etag?: string;
    /**
     * Id of private endpoint connection.
     */
    id?: string;
    /**
     * Properties of the private endpoint object.
     */
    privateEndpoint?: outputs.keyvault.v20210401preview.MHSMPrivateEndpointResponse;
    /**
     * Approval state of the private link connection.
     */
    privateLinkServiceConnectionState?: outputs.keyvault.v20210401preview.MHSMPrivateLinkServiceConnectionStateResponse;
    /**
     * Provisioning state of the private endpoint connection.
     */
    provisioningState: string;
}

/**
 * Private endpoint object properties.
 */
export interface MHSMPrivateEndpointResponse {
    /**
     * Full identifier of the private endpoint resource.
     */
    id: string;
}

/**
 * An object that represents the approval state of the private link connection.
 */
export interface MHSMPrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval or rejection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been approved, rejected or removed by the key vault owner.
     */
    status?: string;
}

/**
 * A rule governing the accessibility of a managed hsm pool from a specific virtual network.
 */
export interface MHSMVirtualNetworkRuleResponse {
    /**
     * Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
     */
    id: string;
}

/**
 * Properties of the managed HSM Pool
 */
export interface ManagedHsmPropertiesResponse {
    /**
     * The create mode to indicate whether the resource is being created or is being recovered from a deleted resource.
     */
    createMode?: string;
    /**
     * Property specifying whether protection against purge is enabled for this managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible.
     */
    enablePurgeProtection?: boolean;
    /**
     * Property to specify whether the 'soft delete' functionality is enabled for this managed HSM pool. If it's not set to any value(true or false) when creating new managed HSM pool, it will be set to true by default. Once set to true, it cannot be reverted to false.
     */
    enableSoftDelete?: boolean;
    /**
     * The URI of the managed hsm pool for performing operations on keys.
     */
    hsmUri: string;
    /**
     * Array of initial administrators object ids for this managed hsm pool.
     */
    initialAdminObjectIds?: string[];
    /**
     * Rules governing the accessibility of the key vault from specific network locations.
     */
    networkAcls?: outputs.keyvault.v20210401preview.MHSMNetworkRuleSetResponse;
    /**
     * List of private endpoint connections associated with the managed hsm pool.
     */
    privateEndpointConnections: outputs.keyvault.v20210401preview.MHSMPrivateEndpointConnectionItemResponse[];
    /**
     * Provisioning state.
     */
    provisioningState: string;
    /**
     * Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     */
    publicNetworkAccess?: string;
    /**
     * The scheduled purge date in UTC.
     */
    scheduledPurgeDate: string;
    /**
     * softDelete data retention days. It accepts >=7 and <=90.
     */
    softDeleteRetentionInDays?: number;
    /**
     * Resource Status Message.
     */
    statusMessage: string;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the managed HSM pool.
     */
    tenantId?: string;
}
/**
 * managedHsmPropertiesResponseProvideDefaults sets the appropriate defaults for ManagedHsmPropertiesResponse
 */
export function managedHsmPropertiesResponseProvideDefaults(val: ManagedHsmPropertiesResponse): ManagedHsmPropertiesResponse {
    return {
        ...val,
        enablePurgeProtection: (val.enablePurgeProtection) ?? true,
        enableSoftDelete: (val.enableSoftDelete) ?? true,
        softDeleteRetentionInDays: (val.softDeleteRetentionInDays) ?? 90,
    };
}

/**
 * SKU details
 */
export interface ManagedHsmSkuResponse {
    /**
     * SKU Family of the managed HSM Pool
     */
    family: string;
    /**
     * SKU of the managed HSM Pool
     */
    name: string;
}

/**
 * A set of rules governing the network accessibility of a vault.
 */
export interface NetworkRuleSetResponse {
    /**
     * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
     */
    bypass?: string;
    /**
     * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
     */
    defaultAction?: string;
    /**
     * The list of IP address rules.
     */
    ipRules?: outputs.keyvault.v20210401preview.IPRuleResponse[];
    /**
     * The list of virtual network rules.
     */
    virtualNetworkRules?: outputs.keyvault.v20210401preview.VirtualNetworkRuleResponse[];
}

/**
 * Permissions the identity has for keys, secrets, certificates and storage.
 */
export interface PermissionsResponse {
    /**
     * Permissions to certificates
     */
    certificates?: string[];
    /**
     * Permissions to keys
     */
    keys?: string[];
    /**
     * Permissions to secrets
     */
    secrets?: string[];
    /**
     * Permissions to storage accounts
     */
    storage?: string[];
}

/**
 * Private endpoint connection item.
 */
export interface PrivateEndpointConnectionItemResponse {
    /**
     * Modified whenever there is a change in the state of private endpoint connection.
     */
    etag?: string;
    /**
     * Id of private endpoint connection.
     */
    id?: string;
    /**
     * Properties of the private endpoint object.
     */
    privateEndpoint?: outputs.keyvault.v20210401preview.PrivateEndpointResponse;
    /**
     * Approval state of the private link connection.
     */
    privateLinkServiceConnectionState?: outputs.keyvault.v20210401preview.PrivateLinkServiceConnectionStateResponse;
    /**
     * Provisioning state of the private endpoint connection.
     */
    provisioningState: string;
}

/**
 * Private endpoint object properties.
 */
export interface PrivateEndpointResponse {
    /**
     * Full identifier of the private endpoint resource.
     */
    id: string;
}

/**
 * An object that represents the approval state of the private link connection.
 */
export interface PrivateLinkServiceConnectionStateResponse {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: string;
    /**
     * The reason for approval or rejection.
     */
    description?: string;
    /**
     * Indicates whether the connection has been approved, rejected or removed by the key vault owner.
     */
    status?: string;
}

export interface RotationPolicyResponse {
    /**
     * The attributes of key rotation policy.
     */
    attributes?: outputs.keyvault.v20210401preview.KeyRotationPolicyAttributesResponse;
    /**
     * The lifetimeActions for key rotation action.
     */
    lifetimeActions?: outputs.keyvault.v20210401preview.LifetimeActionResponse[];
}

/**
 * The secret management attributes.
 */
export interface SecretAttributesResponse {
    /**
     * Creation time in seconds since 1970-01-01T00:00:00Z.
     */
    created: number;
    /**
     * Determines whether the object is enabled.
     */
    enabled?: boolean;
    /**
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     */
    expires?: number;
    /**
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     */
    notBefore?: number;
    /**
     * Last updated time in seconds since 1970-01-01T00:00:00Z.
     */
    updated: number;
}

/**
 * Properties of the secret
 */
export interface SecretPropertiesResponse {
    /**
     * The attributes of the secret.
     */
    attributes?: outputs.keyvault.v20210401preview.SecretAttributesResponse;
    /**
     * The content type of the secret.
     */
    contentType?: string;
    /**
     * The URI to retrieve the current version of the secret.
     */
    secretUri: string;
    /**
     * The URI to retrieve the specific version of the secret.
     */
    secretUriWithVersion: string;
    /**
     * The value of the secret. NOTE: 'value' will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     */
    value?: string;
}

/**
 * SKU details
 */
export interface SkuResponse {
    /**
     * SKU family name
     */
    family: string;
    /**
     * SKU name to specify whether the key vault is a standard vault or a premium vault.
     */
    name: string;
}

/**
 * Metadata pertaining to creation and last modification of the key vault resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of the key vault resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the key vault resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the key vault resource.
     */
    createdByType?: string;
    /**
     * The timestamp of the key vault resource last modification (UTC).
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the key vault resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the key vault resource.
     */
    lastModifiedByType?: string;
}

export interface TriggerResponse {
    /**
     * The time duration after key creation to rotate the key. It should be in ISO8601 format. Eg: 'P90D', 'P1Y'.
     */
    timeAfterCreate?: string;
    /**
     * The time duration before key expiring to rotate the key. It should be in ISO8601 format. Eg: 'P90D', 'P1Y'.
     */
    timeBeforeExpiry?: string;
}

/**
 * Properties of the vault
 */
export interface VaultPropertiesResponse {
    /**
     * An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
     */
    accessPolicies?: outputs.keyvault.v20210401preview.AccessPolicyEntryResponse[];
    /**
     * Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
     */
    enablePurgeProtection?: boolean;
    /**
     * Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.
     */
    enableRbacAuthorization?: boolean;
    /**
     * Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.
     */
    enableSoftDelete?: boolean;
    /**
     * Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
     */
    enabledForDeployment?: boolean;
    /**
     * Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
     */
    enabledForDiskEncryption?: boolean;
    /**
     * Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
     */
    enabledForTemplateDeployment?: boolean;
    /**
     * The resource id of HSM Pool.
     */
    hsmPoolResourceId: string;
    /**
     * Rules governing the accessibility of the key vault from specific network locations.
     */
    networkAcls?: outputs.keyvault.v20210401preview.NetworkRuleSetResponse;
    /**
     * List of private endpoint connections associated with the key vault.
     */
    privateEndpointConnections: outputs.keyvault.v20210401preview.PrivateEndpointConnectionItemResponse[];
    /**
     * Provisioning state of the vault.
     */
    provisioningState?: string;
    /**
     * SKU details
     */
    sku: outputs.keyvault.v20210401preview.SkuResponse;
    /**
     * softDelete data retention days. It accepts >=7 and <=90.
     */
    softDeleteRetentionInDays?: number;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId: string;
    /**
     * The URI of the vault for performing operations on keys and secrets.
     */
    vaultUri?: string;
}
/**
 * vaultPropertiesResponseProvideDefaults sets the appropriate defaults for VaultPropertiesResponse
 */
export function vaultPropertiesResponseProvideDefaults(val: VaultPropertiesResponse): VaultPropertiesResponse {
    return {
        ...val,
        enableRbacAuthorization: (val.enableRbacAuthorization) ?? false,
        enableSoftDelete: (val.enableSoftDelete) ?? true,
        softDeleteRetentionInDays: (val.softDeleteRetentionInDays) ?? 90,
    };
}

/**
 * A rule governing the accessibility of a vault from a specific virtual network.
 */
export interface VirtualNetworkRuleResponse {
    /**
     * Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
     */
    id: string;
    /**
     * Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.
     */
    ignoreMissingVnetServiceEndpoint?: boolean;
}

