// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
 */
export interface AccessPolicyEntryArgs {
    /**
     *  Application ID of the client making request on behalf of a principal
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     */
    objectId: pulumi.Input<string>;
    /**
     * Permissions the identity has for keys, secrets and certificates.
     */
    permissions: pulumi.Input<inputs.keyvault.v20180214.PermissionsArgs>;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId: pulumi.Input<string>;
}

/**
 * A rule governing the accessibility of a vault from a specific ip address or ip range.
 */
export interface IPRuleArgs {
    /**
     * An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
     */
    value: pulumi.Input<string>;
}

/**
 * A set of rules governing the network accessibility of a vault.
 */
export interface NetworkRuleSetArgs {
    /**
     * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
     */
    bypass?: pulumi.Input<string | enums.keyvault.v20180214.NetworkRuleBypassOptions>;
    /**
     * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
     */
    defaultAction?: pulumi.Input<string | enums.keyvault.v20180214.NetworkRuleAction>;
    /**
     * The list of IP address rules.
     */
    ipRules?: pulumi.Input<pulumi.Input<inputs.keyvault.v20180214.IPRuleArgs>[]>;
    /**
     * The list of virtual network rules.
     */
    virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.keyvault.v20180214.VirtualNetworkRuleArgs>[]>;
}

/**
 * Permissions the identity has for keys, secrets, certificates and storage.
 */
export interface PermissionsArgs {
    /**
     * Permissions to certificates
     */
    certificates?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20180214.CertificatePermissions>[]>;
    /**
     * Permissions to keys
     */
    keys?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20180214.KeyPermissions>[]>;
    /**
     * Permissions to secrets
     */
    secrets?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20180214.SecretPermissions>[]>;
    /**
     * Permissions to storage accounts
     */
    storage?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20180214.StoragePermissions>[]>;
}

/**
 * An object that represents the approval state of the private link connection.
 */
export interface PrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionRequired?: pulumi.Input<string>;
    /**
     * The reason for approval or rejection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been approved, rejected or removed by the key vault owner.
     */
    status?: pulumi.Input<string | enums.keyvault.v20180214.PrivateEndpointServiceConnectionStatus>;
}

/**
 * The secret management attributes.
 */
export interface SecretAttributesArgs {
    /**
     * Determines whether the object is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     */
    expires?: pulumi.Input<number>;
    /**
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     */
    notBefore?: pulumi.Input<number>;
}

/**
 * Properties of the secret
 */
export interface SecretPropertiesArgs {
    /**
     * The attributes of the secret.
     */
    attributes?: pulumi.Input<inputs.keyvault.v20180214.SecretAttributesArgs>;
    /**
     * The content type of the secret.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The value of the secret. NOTE: 'value' will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     */
    value?: pulumi.Input<string>;
}

/**
 * SKU details
 */
export interface SkuArgs {
    /**
     * SKU family name
     */
    family: pulumi.Input<string | enums.keyvault.v20180214.SkuFamily>;
    /**
     * SKU name to specify whether the key vault is a standard vault or a premium vault.
     */
    name: pulumi.Input<enums.keyvault.v20180214.SkuName>;
}

/**
 * Properties of the vault
 */
export interface VaultPropertiesArgs {
    /**
     * An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
     */
    accessPolicies?: pulumi.Input<pulumi.Input<inputs.keyvault.v20180214.AccessPolicyEntryArgs>[]>;
    /**
     * The vault's create mode to indicate whether the vault need to be recovered or not.
     */
    createMode?: pulumi.Input<enums.keyvault.v20180214.CreateMode>;
    /**
     * Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
     */
    enablePurgeProtection?: pulumi.Input<boolean>;
    /**
     * Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.
     */
    enableSoftDelete?: pulumi.Input<boolean>;
    /**
     * Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
     */
    enabledForDeployment?: pulumi.Input<boolean>;
    /**
     * Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
     */
    enabledForDiskEncryption?: pulumi.Input<boolean>;
    /**
     * Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
     */
    enabledForTemplateDeployment?: pulumi.Input<boolean>;
    /**
     * Rules governing the accessibility of the key vault from specific network locations.
     */
    networkAcls?: pulumi.Input<inputs.keyvault.v20180214.NetworkRuleSetArgs>;
    /**
     * SKU details
     */
    sku: pulumi.Input<inputs.keyvault.v20180214.SkuArgs>;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The URI of the vault for performing operations on keys and secrets.
     */
    vaultUri?: pulumi.Input<string>;
}

/**
 * A rule governing the accessibility of a vault from a specific virtual network.
 */
export interface VirtualNetworkRuleArgs {
    /**
     * Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
     */
    id: pulumi.Input<string>;
}

