// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
 */
export interface AccessPolicyEntryArgs {
    /**
     *  Application ID of the client making request on behalf of a principal
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     */
    objectId: pulumi.Input<string>;
    /**
     * Permissions the identity has for keys, secrets and certificates.
     */
    permissions: pulumi.Input<inputs.keyvault.v20211001.PermissionsArgs>;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId: pulumi.Input<string>;
}

/**
 * A rule governing the accessibility of a vault from a specific ip address or ip range.
 */
export interface IPRuleArgs {
    /**
     * An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
     */
    value: pulumi.Input<string>;
}

/**
 * The object attributes managed by the Azure Key Vault service.
 */
export interface KeyAttributesArgs {
    /**
     * Determines whether or not the object is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     */
    expires?: pulumi.Input<number>;
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: pulumi.Input<boolean>;
    /**
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     */
    notBefore?: pulumi.Input<number>;
}

/**
 * The properties of the key.
 */
export interface KeyPropertiesArgs {
    /**
     * The attributes of the key.
     */
    attributes?: pulumi.Input<inputs.keyvault.v20211001.KeyAttributesArgs>;
    /**
     * The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     */
    curveName?: pulumi.Input<string | enums.keyvault.v20211001.JsonWebKeyCurveName>;
    keyOps?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20211001.JsonWebKeyOperation>[]>;
    /**
     * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     */
    keySize?: pulumi.Input<number>;
    /**
     * The type of the key. For valid values, see JsonWebKeyType.
     */
    kty?: pulumi.Input<string | enums.keyvault.v20211001.JsonWebKeyType>;
}

/**
 * A rule governing the accessibility of a managed hsm pool from a specific ip address or ip range.
 */
export interface MHSMIPRuleArgs {
    /**
     * An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
     */
    value: pulumi.Input<string>;
}

/**
 * A set of rules governing the network accessibility of a managed hsm pool.
 */
export interface MHSMNetworkRuleSetArgs {
    /**
     * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
     */
    bypass?: pulumi.Input<string | enums.keyvault.v20211001.NetworkRuleBypassOptions>;
    /**
     * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
     */
    defaultAction?: pulumi.Input<string | enums.keyvault.v20211001.NetworkRuleAction>;
    /**
     * The list of IP address rules.
     */
    ipRules?: pulumi.Input<pulumi.Input<inputs.keyvault.v20211001.MHSMIPRuleArgs>[]>;
    /**
     * The list of virtual network rules.
     */
    virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.keyvault.v20211001.MHSMVirtualNetworkRuleArgs>[]>;
}

/**
 * An object that represents the approval state of the private link connection.
 */
export interface MHSMPrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: pulumi.Input<string | enums.keyvault.v20211001.ActionsRequired>;
    /**
     * The reason for approval or rejection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been approved, rejected or removed by the key vault owner.
     */
    status?: pulumi.Input<string | enums.keyvault.v20211001.PrivateEndpointServiceConnectionStatus>;
}

/**
 * A rule governing the accessibility of a managed hsm pool from a specific virtual network.
 */
export interface MHSMVirtualNetworkRuleArgs {
    /**
     * Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
     */
    id: pulumi.Input<string>;
}

/**
 * Properties of the managed HSM Pool
 */
export interface ManagedHsmPropertiesArgs {
    /**
     * The create mode to indicate whether the resource is being created or is being recovered from a deleted resource.
     */
    createMode?: pulumi.Input<enums.keyvault.v20211001.CreateMode>;
    /**
     * Property specifying whether protection against purge is enabled for this managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible.
     */
    enablePurgeProtection?: pulumi.Input<boolean>;
    /**
     * Property to specify whether the 'soft delete' functionality is enabled for this managed HSM pool. If it's not set to any value(true or false) when creating new managed HSM pool, it will be set to true by default. Once set to true, it cannot be reverted to false.
     */
    enableSoftDelete?: pulumi.Input<boolean>;
    /**
     * Array of initial administrators object ids for this managed hsm pool.
     */
    initialAdminObjectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rules governing the accessibility of the key vault from specific network locations.
     */
    networkAcls?: pulumi.Input<inputs.keyvault.v20211001.MHSMNetworkRuleSetArgs>;
    /**
     * Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     */
    publicNetworkAccess?: pulumi.Input<string | enums.keyvault.v20211001.PublicNetworkAccess>;
    /**
     * softDelete data retention days. It accepts >=7 and <=90.
     */
    softDeleteRetentionInDays?: pulumi.Input<number>;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the managed HSM pool.
     */
    tenantId?: pulumi.Input<string>;
}
/**
 * managedHsmPropertiesArgsProvideDefaults sets the appropriate defaults for ManagedHsmPropertiesArgs
 */
export function managedHsmPropertiesArgsProvideDefaults(val: ManagedHsmPropertiesArgs): ManagedHsmPropertiesArgs {
    return {
        ...val,
        enablePurgeProtection: (val.enablePurgeProtection) ?? true,
        enableSoftDelete: (val.enableSoftDelete) ?? true,
        softDeleteRetentionInDays: (val.softDeleteRetentionInDays) ?? 90,
    };
}

/**
 * SKU details
 */
export interface ManagedHsmSkuArgs {
    /**
     * SKU Family of the managed HSM Pool
     */
    family: pulumi.Input<string | enums.keyvault.v20211001.ManagedHsmSkuFamily>;
    /**
     * SKU of the managed HSM Pool
     */
    name: pulumi.Input<enums.keyvault.v20211001.ManagedHsmSkuName>;
}

/**
 * A set of rules governing the network accessibility of a vault.
 */
export interface NetworkRuleSetArgs {
    /**
     * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
     */
    bypass?: pulumi.Input<string | enums.keyvault.v20211001.NetworkRuleBypassOptions>;
    /**
     * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
     */
    defaultAction?: pulumi.Input<string | enums.keyvault.v20211001.NetworkRuleAction>;
    /**
     * The list of IP address rules.
     */
    ipRules?: pulumi.Input<pulumi.Input<inputs.keyvault.v20211001.IPRuleArgs>[]>;
    /**
     * The list of virtual network rules.
     */
    virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.keyvault.v20211001.VirtualNetworkRuleArgs>[]>;
}

/**
 * Permissions the identity has for keys, secrets, certificates and storage.
 */
export interface PermissionsArgs {
    /**
     * Permissions to certificates
     */
    certificates?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20211001.CertificatePermissions>[]>;
    /**
     * Permissions to keys
     */
    keys?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20211001.KeyPermissions>[]>;
    /**
     * Permissions to secrets
     */
    secrets?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20211001.SecretPermissions>[]>;
    /**
     * Permissions to storage accounts
     */
    storage?: pulumi.Input<pulumi.Input<string | enums.keyvault.v20211001.StoragePermissions>[]>;
}

/**
 * An object that represents the approval state of the private link connection.
 */
export interface PrivateLinkServiceConnectionStateArgs {
    /**
     * A message indicating if changes on the service provider require any updates on the consumer.
     */
    actionsRequired?: pulumi.Input<string | enums.keyvault.v20211001.ActionsRequired>;
    /**
     * The reason for approval or rejection.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the connection has been approved, rejected or removed by the key vault owner.
     */
    status?: pulumi.Input<string | enums.keyvault.v20211001.PrivateEndpointServiceConnectionStatus>;
}

/**
 * The secret management attributes.
 */
export interface SecretAttributesArgs {
    /**
     * Determines whether the object is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     */
    expires?: pulumi.Input<number>;
    /**
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     */
    notBefore?: pulumi.Input<number>;
}

/**
 * Properties of the secret
 */
export interface SecretPropertiesArgs {
    /**
     * The attributes of the secret.
     */
    attributes?: pulumi.Input<inputs.keyvault.v20211001.SecretAttributesArgs>;
    /**
     * The content type of the secret.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The value of the secret. NOTE: 'value' will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     */
    value?: pulumi.Input<string>;
}

/**
 * SKU details
 */
export interface SkuArgs {
    /**
     * SKU family name
     */
    family: pulumi.Input<string | enums.keyvault.v20211001.SkuFamily>;
    /**
     * SKU name to specify whether the key vault is a standard vault or a premium vault.
     */
    name: pulumi.Input<enums.keyvault.v20211001.SkuName>;
}

/**
 * Properties of the vault
 */
export interface VaultPropertiesArgs {
    /**
     * An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
     */
    accessPolicies?: pulumi.Input<pulumi.Input<inputs.keyvault.v20211001.AccessPolicyEntryArgs>[]>;
    /**
     * The vault's create mode to indicate whether the vault need to be recovered or not.
     */
    createMode?: pulumi.Input<enums.keyvault.v20211001.CreateMode>;
    /**
     * Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
     */
    enablePurgeProtection?: pulumi.Input<boolean>;
    /**
     * Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.
     */
    enableRbacAuthorization?: pulumi.Input<boolean>;
    /**
     * Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.
     */
    enableSoftDelete?: pulumi.Input<boolean>;
    /**
     * Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
     */
    enabledForDeployment?: pulumi.Input<boolean>;
    /**
     * Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
     */
    enabledForDiskEncryption?: pulumi.Input<boolean>;
    /**
     * Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
     */
    enabledForTemplateDeployment?: pulumi.Input<boolean>;
    /**
     * Rules governing the accessibility of the key vault from specific network locations.
     */
    networkAcls?: pulumi.Input<inputs.keyvault.v20211001.NetworkRuleSetArgs>;
    /**
     * Provisioning state of the vault.
     */
    provisioningState?: pulumi.Input<string | enums.keyvault.v20211001.VaultProvisioningState>;
    /**
     * Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.
     */
    publicNetworkAccess?: pulumi.Input<string>;
    /**
     * SKU details
     */
    sku: pulumi.Input<inputs.keyvault.v20211001.SkuArgs>;
    /**
     * softDelete data retention days. It accepts >=7 and <=90.
     */
    softDeleteRetentionInDays?: pulumi.Input<number>;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The URI of the vault for performing operations on keys and secrets.
     */
    vaultUri?: pulumi.Input<string>;
}
/**
 * vaultPropertiesArgsProvideDefaults sets the appropriate defaults for VaultPropertiesArgs
 */
export function vaultPropertiesArgsProvideDefaults(val: VaultPropertiesArgs): VaultPropertiesArgs {
    return {
        ...val,
        enableRbacAuthorization: (val.enableRbacAuthorization) ?? false,
        enableSoftDelete: (val.enableSoftDelete) ?? true,
        publicNetworkAccess: (val.publicNetworkAccess) ?? "enabled",
        softDeleteRetentionInDays: (val.softDeleteRetentionInDays) ?? 90,
    };
}

/**
 * A rule governing the accessibility of a vault from a specific virtual network.
 */
export interface VirtualNetworkRuleArgs {
    /**
     * Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
     */
    id: pulumi.Input<string>;
    /**
     * Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.
     */
    ignoreMissingVnetServiceEndpoint?: pulumi.Input<boolean>;
}

