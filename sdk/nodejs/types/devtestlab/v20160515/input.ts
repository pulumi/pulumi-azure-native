// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level.
 */
export interface ApplicableScheduleArgs {
    /**
     * The auto-shutdown schedule, if one has been set at the lab or lab resource level.
     */
    labVmsShutdown?: pulumi.Input<inputs.devtestlab.v20160515.ScheduleArgs>;
    /**
     * The auto-startup schedule, if one has been set at the lab or lab resource level.
     */
    labVmsStartup?: pulumi.Input<inputs.devtestlab.v20160515.ScheduleArgs>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The tags of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Properties of an Azure Resource Manager template parameter.
 */
export interface ArmTemplateParameterPropertiesArgs {
    /**
     * The name of the template parameter.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the template parameter.
     */
    value?: pulumi.Input<string>;
}

/**
 * Properties of an artifact deployment.
 */
export interface ArtifactDeploymentStatusPropertiesArgs {
    /**
     * The total count of the artifacts that were successfully applied.
     */
    artifactsApplied?: pulumi.Input<number>;
    /**
     * The deployment status of the artifact.
     */
    deploymentStatus?: pulumi.Input<string>;
    /**
     * The total count of the artifacts that were tentatively applied.
     */
    totalArtifacts?: pulumi.Input<number>;
}

/**
 * Properties of an artifact.
 */
export interface ArtifactInstallPropertiesArgs {
    /**
     * The artifact's identifier.
     */
    artifactId?: pulumi.Input<string>;
    /**
     * The status message from the deployment.
     */
    deploymentStatusMessage?: pulumi.Input<string>;
    /**
     * The time that the artifact starts to install on the virtual machine.
     */
    installTime?: pulumi.Input<string>;
    /**
     * The parameters of the artifact.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.devtestlab.v20160515.ArtifactParameterPropertiesArgs>[]>;
    /**
     * The status of the artifact.
     */
    status?: pulumi.Input<string>;
    /**
     * The status message from the virtual machine extension.
     */
    vmExtensionStatusMessage?: pulumi.Input<string>;
}

/**
 * Properties of an artifact parameter.
 */
export interface ArtifactParameterPropertiesArgs {
    /**
     * The name of the artifact parameter.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the artifact parameter.
     */
    value?: pulumi.Input<string>;
}

/**
 * Parameters for creating multiple virtual machines as a single action.
 */
export interface BulkCreationParametersArgs {
    /**
     * The number of virtual machine instances to create.
     */
    instanceCount?: pulumi.Input<number>;
}

/**
 * A data disks attached to a virtual machine.
 */
export interface ComputeDataDiskArgs {
    /**
     * Gets data disk size in GiB.
     */
    diskSizeGiB?: pulumi.Input<number>;
    /**
     * When backed by a blob, the URI of underlying blob.
     */
    diskUri?: pulumi.Input<string>;
    /**
     * When backed by managed disk, this is the ID of the compute disk resource.
     */
    managedDiskId?: pulumi.Input<string>;
    /**
     * Gets data disk name.
     */
    name?: pulumi.Input<string>;
}

/**
 * Status information about a virtual machine.
 */
export interface ComputeVmInstanceViewStatusArgs {
    /**
     * Gets the status Code.
     */
    code?: pulumi.Input<string>;
    /**
     * Gets the short localizable label for the status.
     */
    displayStatus?: pulumi.Input<string>;
    /**
     * Gets the message associated with the status.
     */
    message?: pulumi.Input<string>;
}

/**
 * Properties of a virtual machine returned by the Microsoft.Compute API.
 */
export interface ComputeVmPropertiesArgs {
    /**
     * Gets data disks blob uri for the virtual machine.
     */
    dataDiskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Gets all data disks attached to the virtual machine.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.devtestlab.v20160515.ComputeDataDiskArgs>[]>;
    /**
     * Gets the network interface ID of the virtual machine.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * Gets OS disk blob uri for the virtual machine.
     */
    osDiskId?: pulumi.Input<string>;
    /**
     * Gets the OS type of the virtual machine.
     */
    osType?: pulumi.Input<string>;
    /**
     * Gets the statuses of the virtual machine.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.devtestlab.v20160515.ComputeVmInstanceViewStatusArgs>[]>;
    /**
     * Gets the size of the virtual machine.
     */
    vmSize?: pulumi.Input<string>;
}

/**
 * Properties for creating a custom image from a VHD.
 */
export interface CustomImagePropertiesCustomArgs {
    /**
     * The image name.
     */
    imageName?: pulumi.Input<string>;
    /**
     * The OS type of the custom image (i.e. Windows, Linux)
     */
    osType: pulumi.Input<string | enums.devtestlab.v20160515.CustomImageOsType>;
    /**
     * Indicates whether sysprep has been run on the VHD.
     */
    sysPrep?: pulumi.Input<boolean>;
}

/**
 * Properties for creating a custom image from a virtual machine.
 */
export interface CustomImagePropertiesFromVmArgs {
    /**
     * The Linux OS information of the VM.
     */
    linuxOsInfo?: pulumi.Input<inputs.devtestlab.v20160515.LinuxOsInfoArgs>;
    /**
     * The source vm identifier.
     */
    sourceVmId?: pulumi.Input<string>;
    /**
     * The Windows OS information of the VM.
     */
    windowsOsInfo?: pulumi.Input<inputs.devtestlab.v20160515.WindowsOsInfoArgs>;
}

/**
 * Properties of a daily schedule.
 */
export interface DayDetailsArgs {
    /**
     * The time of day the schedule will occur.
     */
    time?: pulumi.Input<string>;
}

/**
 * Properties of an environment deployment.
 */
export interface EnvironmentDeploymentPropertiesArgs {
    /**
     * The Azure Resource Manager template's identifier.
     */
    armTemplateId?: pulumi.Input<string>;
    /**
     * The parameters of the Azure Resource Manager template.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.devtestlab.v20160515.ArmTemplateParameterPropertiesArgs>[]>;
}

/**
 * An event to be notified for.
 */
export interface EventArgs {
    /**
     * The event type for which this notification is enabled (i.e. AutoShutdown, Cost)
     */
    eventName?: pulumi.Input<string | enums.devtestlab.v20160515.NotificationChannelEventType>;
}

/**
 * Subnet information as returned by the Microsoft.Network API.
 */
export interface ExternalSubnetArgs {
    /**
     * Gets or sets the identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * Gets or sets the name.
     */
    name?: pulumi.Input<string>;
}

/**
 * Information about a VM from which a formula is to be created.
 */
export interface FormulaPropertiesFromVmArgs {
    /**
     * The identifier of the VM from which a formula is to be created.
     */
    labVmId?: pulumi.Input<string>;
}

/**
 * The reference information for an Azure Marketplace image.
 */
export interface GalleryImageReferenceArgs {
    /**
     * The offer of the gallery image.
     */
    offer?: pulumi.Input<string>;
    /**
     * The OS type of the gallery image.
     */
    osType?: pulumi.Input<string>;
    /**
     * The publisher of the gallery image.
     */
    publisher?: pulumi.Input<string>;
    /**
     * The SKU of the gallery image.
     */
    sku?: pulumi.Input<string>;
    /**
     * The version of the gallery image.
     */
    version?: pulumi.Input<string>;
}

/**
 * Properties of an hourly schedule.
 */
export interface HourDetailsArgs {
    /**
     * Minutes of the hour the schedule will run.
     */
    minute?: pulumi.Input<number>;
}

/**
 * Properties of a managed identity
 */
export interface IdentityPropertiesArgs {
    /**
     * The client secret URL of the identity.
     */
    clientSecretUrl?: pulumi.Input<string>;
    /**
     * The principal id of resource identity.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The tenant identifier of resource.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Managed identity.
     */
    type?: pulumi.Input<string>;
}

/**
 * A rule for NAT - exposing a VM's port (backendPort) on the public IP address using a load balancer.
 */
export interface InboundNatRuleArgs {
    /**
     * The port to which the external traffic will be redirected.
     */
    backendPort?: pulumi.Input<number>;
    /**
     * The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically.
     */
    frontendPort?: pulumi.Input<number>;
    /**
     * The transport protocol for the endpoint.
     */
    transportProtocol?: pulumi.Input<string | enums.devtestlab.v20160515.TransportProtocol>;
}

/**
 * Properties for creating a virtual machine.
 */
export interface LabVirtualMachineCreationParameterArgs {
    /**
     * Indicates whether another user can take ownership of the virtual machine
     */
    allowClaim?: pulumi.Input<boolean>;
    /**
     * The applicable schedule for the virtual machine.
     */
    applicableSchedule?: pulumi.Input<inputs.devtestlab.v20160515.ApplicableScheduleArgs>;
    /**
     * The artifact deployment status for the virtual machine.
     */
    artifactDeploymentStatus?: pulumi.Input<inputs.devtestlab.v20160515.ArtifactDeploymentStatusPropertiesArgs>;
    /**
     * The artifacts to be installed on the virtual machine.
     */
    artifacts?: pulumi.Input<pulumi.Input<inputs.devtestlab.v20160515.ArtifactInstallPropertiesArgs>[]>;
    /**
     * The number of virtual machine instances to create.
     */
    bulkCreationParameters?: pulumi.Input<inputs.devtestlab.v20160515.BulkCreationParametersArgs>;
    /**
     * The compute virtual machine properties.
     */
    computeVm?: pulumi.Input<inputs.devtestlab.v20160515.ComputeVmPropertiesArgs>;
    /**
     * The email address of creator of the virtual machine.
     */
    createdByUser?: pulumi.Input<string>;
    /**
     * The object identifier of the creator of the virtual machine.
     */
    createdByUserId?: pulumi.Input<string>;
    /**
     * The creation date of the virtual machine.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * The custom image identifier of the virtual machine.
     */
    customImageId?: pulumi.Input<string>;
    /**
     * Indicates whether the virtual machine is to be created without a public IP address.
     */
    disallowPublicIpAddress?: pulumi.Input<boolean>;
    /**
     * The resource ID of the environment that contains this virtual machine, if any.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The expiration date for VM.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The fully-qualified domain name of the virtual machine.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * The Microsoft Azure Marketplace image reference of the virtual machine.
     */
    galleryImageReference?: pulumi.Input<inputs.devtestlab.v20160515.GalleryImageReferenceArgs>;
    /**
     * Indicates whether this virtual machine uses an SSH key for authentication.
     */
    isAuthenticationWithSshKey?: pulumi.Input<boolean>;
    /**
     * The lab subnet name of the virtual machine.
     */
    labSubnetName?: pulumi.Input<string>;
    /**
     * The lab virtual network identifier of the virtual machine.
     */
    labVirtualNetworkId?: pulumi.Input<string>;
    /**
     * The location of the new virtual machine or environment
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the virtual machine or environment
     */
    name?: pulumi.Input<string>;
    /**
     * The network interface properties.
     */
    networkInterface?: pulumi.Input<inputs.devtestlab.v20160515.NetworkInterfacePropertiesArgs>;
    /**
     * The notes of the virtual machine.
     */
    notes?: pulumi.Input<string>;
    /**
     * The OS type of the virtual machine.
     */
    osType?: pulumi.Input<string>;
    /**
     * The object identifier of the owner of the virtual machine.
     */
    ownerObjectId?: pulumi.Input<string>;
    /**
     * The user principal name of the virtual machine owner.
     */
    ownerUserPrincipalName?: pulumi.Input<string>;
    /**
     * The password of the virtual machine administrator.
     */
    password?: pulumi.Input<string>;
    /**
     * The provisioning status of the resource.
     */
    provisioningState?: pulumi.Input<string>;
    /**
     * The size of the virtual machine.
     */
    size?: pulumi.Input<string>;
    /**
     * The SSH key of the virtual machine administrator.
     */
    sshKey?: pulumi.Input<string>;
    /**
     * Storage type to use for virtual machine (i.e. Standard, Premium).
     */
    storageType?: pulumi.Input<string>;
    /**
     * The tags of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The unique immutable identifier of a resource (Guid).
     */
    uniqueIdentifier?: pulumi.Input<string>;
    /**
     * The user name of the virtual machine.
     */
    userName?: pulumi.Input<string>;
    /**
     * Tells source of creation of lab virtual machine. Output property only.
     */
    virtualMachineCreationSource?: pulumi.Input<string | enums.devtestlab.v20160515.VirtualMachineCreationSource>;
}

/**
 * Information about a Linux OS.
 */
export interface LinuxOsInfoArgs {
    /**
     * The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
     */
    linuxOsState?: pulumi.Input<string | enums.devtestlab.v20160515.LinuxOsState>;
}

/**
 * Properties of a network interface.
 */
export interface NetworkInterfacePropertiesArgs {
    /**
     * The DNS name.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * The private IP address.
     */
    privateIpAddress?: pulumi.Input<string>;
    /**
     * The public IP address.
     */
    publicIpAddress?: pulumi.Input<string>;
    /**
     * The resource ID of the public IP address.
     */
    publicIpAddressId?: pulumi.Input<string>;
    /**
     * The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
     */
    rdpAuthority?: pulumi.Input<string>;
    /**
     * The configuration for sharing a public IP address across multiple virtual machines.
     */
    sharedPublicIpAddressConfiguration?: pulumi.Input<inputs.devtestlab.v20160515.SharedPublicIpAddressConfigurationArgs>;
    /**
     * The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
     */
    sshAuthority?: pulumi.Input<string>;
    /**
     * The resource ID of the sub net.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The resource ID of the virtual network.
     */
    virtualNetworkId?: pulumi.Input<string>;
}

/**
 * Notification settings for a schedule.
 */
export interface NotificationSettingsArgs {
    /**
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     */
    status?: pulumi.Input<string | enums.devtestlab.v20160515.NotificationStatus>;
    /**
     * Time in minutes before event at which notification will be sent.
     */
    timeInMinutes?: pulumi.Input<number>;
    /**
     * The webhook URL to which the notification will be sent.
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * Properties of a network port.
 */
export interface PortArgs {
    /**
     * Backend port of the target virtual machine.
     */
    backendPort?: pulumi.Input<number>;
    /**
     * Protocol type of the port.
     */
    transportProtocol?: pulumi.Input<string | enums.devtestlab.v20160515.TransportProtocol>;
}

/**
 * A schedule.
 */
export interface ScheduleArgs {
    /**
     * If the schedule will occur once each day of the week, specify the daily recurrence.
     */
    dailyRecurrence?: pulumi.Input<inputs.devtestlab.v20160515.DayDetailsArgs>;
    /**
     * If the schedule will occur multiple times a day, specify the hourly recurrence.
     */
    hourlyRecurrence?: pulumi.Input<inputs.devtestlab.v20160515.HourDetailsArgs>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * Notification settings.
     */
    notificationSettings?: pulumi.Input<inputs.devtestlab.v20160515.NotificationSettingsArgs>;
    /**
     * The provisioning status of the resource.
     */
    provisioningState?: pulumi.Input<string>;
    /**
     * The status of the schedule (i.e. Enabled, Disabled)
     */
    status?: pulumi.Input<string | enums.devtestlab.v20160515.EnableStatus>;
    /**
     * The tags of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource ID to which the schedule belongs
     */
    targetResourceId?: pulumi.Input<string>;
    /**
     * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     */
    taskType?: pulumi.Input<string>;
    /**
     * The time zone ID (e.g. Pacific Standard time).
     */
    timeZoneId?: pulumi.Input<string>;
    /**
     * The unique immutable identifier of a resource (Guid).
     */
    uniqueIdentifier?: pulumi.Input<string>;
    /**
     * If the schedule will occur only some days of the week, specify the weekly recurrence.
     */
    weeklyRecurrence?: pulumi.Input<inputs.devtestlab.v20160515.WeekDetailsArgs>;
}

/**
 * Properties of a virtual machine that determine how it is connected to a load balancer.
 */
export interface SharedPublicIpAddressConfigurationArgs {
    /**
     * The incoming NAT rules
     */
    inboundNatRules?: pulumi.Input<pulumi.Input<inputs.devtestlab.v20160515.InboundNatRuleArgs>[]>;
}

/**
 * Subnet information.
 */
export interface SubnetArgs {
    /**
     * The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)).
     */
    allowPublicIp?: pulumi.Input<string | enums.devtestlab.v20160515.UsagePermissionType>;
    /**
     * The name of the subnet as seen in the lab.
     */
    labSubnetName?: pulumi.Input<string>;
    /**
     * The resource ID of the subnet.
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * Property overrides on a subnet of a virtual network.
 */
export interface SubnetOverrideArgs {
    /**
     * The name given to the subnet within the lab.
     */
    labSubnetName?: pulumi.Input<string>;
    /**
     * The resource ID of the subnet.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Properties that virtual machines on this subnet will share.
     */
    sharedPublicIpAddressConfiguration?: pulumi.Input<inputs.devtestlab.v20160515.SubnetSharedPublicIpAddressConfigurationArgs>;
    /**
     * Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
     */
    useInVmCreationPermission?: pulumi.Input<string | enums.devtestlab.v20160515.UsagePermissionType>;
    /**
     * Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
     */
    usePublicIpAddressPermission?: pulumi.Input<string | enums.devtestlab.v20160515.UsagePermissionType>;
    /**
     * The virtual network pool associated with this subnet.
     */
    virtualNetworkPoolName?: pulumi.Input<string>;
}

/**
 * Configuration for public IP address sharing.
 */
export interface SubnetSharedPublicIpAddressConfigurationArgs {
    /**
     * Backend ports that virtual machines on this subnet are allowed to expose
     */
    allowedPorts?: pulumi.Input<pulumi.Input<inputs.devtestlab.v20160515.PortArgs>[]>;
}

/**
 * Identity attributes of a lab user.
 */
export interface UserIdentityArgs {
    /**
     * Set to the app Id of the client JWT making the request.
     */
    appId?: pulumi.Input<string>;
    /**
     * Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available.
     */
    objectId?: pulumi.Input<string>;
    /**
     * Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id.
     */
    principalId?: pulumi.Input<string>;
    /**
     * Set to the principal name / UPN of the client JWT making the request.
     */
    principalName?: pulumi.Input<string>;
    /**
     * Set to the tenant ID of the client JWT making the request.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * Properties of a user's secret store.
 */
export interface UserSecretStoreArgs {
    /**
     * The ID of the user's Key vault.
     */
    keyVaultId?: pulumi.Input<string>;
    /**
     * The URI of the user's Key vault.
     */
    keyVaultUri?: pulumi.Input<string>;
}

/**
 * Properties of a weekly schedule.
 */
export interface WeekDetailsArgs {
    /**
     * The time of the day the schedule will occur.
     */
    time?: pulumi.Input<string>;
    /**
     * The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     */
    weekdays?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Information about a Windows OS.
 */
export interface WindowsOsInfoArgs {
    /**
     * The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
     */
    windowsOsState?: pulumi.Input<string | enums.devtestlab.v20160515.WindowsOsState>;
}

