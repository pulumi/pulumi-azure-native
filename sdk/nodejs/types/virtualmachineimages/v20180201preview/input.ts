// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
 */
export interface ImageTemplateIsoSourceArgs {
    /**
     * SHA256 Checksum of the ISO image.
     */
    sha256Checksum: pulumi.Input<string>;
    /**
     * URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
     */
    sourceURI: pulumi.Input<string>;
    /**
     * Specifies the type of source image you want to start with.
     * Expected value is 'ISO'.
     */
    type: pulumi.Input<"ISO">;
}

/**
 * Distribute as a Managed Disk Image.
 */
export interface ImageTemplateManagedImageDistributorArgs {
    /**
     * Tags that will be applied to the artifact once it has been created/updated by the distributor.
     */
    artifactTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource Id of the Managed Disk Image
     */
    imageId: pulumi.Input<string>;
    /**
     * Azure location for the image, should match if image already exists
     */
    location: pulumi.Input<string>;
    /**
     * The name to be used for the associated RunOutput.
     */
    runOutputName: pulumi.Input<string>;
    /**
     * Type of distribution.
     * Expected value is 'managedImage'.
     */
    type: pulumi.Input<"managedImage">;
}

/**
 * Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
 */
export interface ImageTemplatePlatformImageSourceArgs {
    /**
     * Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    offer?: pulumi.Input<string>;
    /**
     * Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    publisher?: pulumi.Input<string>;
    /**
     * Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    sku?: pulumi.Input<string>;
    /**
     * Specifies the type of source image you want to start with.
     * Expected value is 'PlatformImage'.
     */
    type: pulumi.Input<"PlatformImage">;
    /**
     * Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    version?: pulumi.Input<string>;
}

/**
 * Distribute via Shared Image Gallery.
 */
export interface ImageTemplateSharedImageDistributorArgs {
    /**
     * Tags that will be applied to the artifact once it has been created/updated by the distributor.
     */
    artifactTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource Id of the Shared Image Gallery image
     */
    galleryImageId: pulumi.Input<string>;
    replicationRegions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name to be used for the associated RunOutput.
     */
    runOutputName: pulumi.Input<string>;
    /**
     * Type of distribution.
     * Expected value is 'sharedImage'.
     */
    type: pulumi.Input<"sharedImage">;
}

/**
 * Runs a shell script during the customization phase
 */
export interface ImageTemplateShellCustomizerArgs {
    /**
     * Friendly Name to provide context on what this customization step does
     */
    name?: pulumi.Input<string>;
    /**
     * The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
     */
    script?: pulumi.Input<string>;
    /**
     * The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
     * Expected value is 'shell'.
     */
    type: pulumi.Input<"shell">;
}

