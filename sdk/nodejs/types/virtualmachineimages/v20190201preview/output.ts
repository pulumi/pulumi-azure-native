// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
 */
export interface ImageTemplateIsoSourceResponse {
    /**
     * SHA256 Checksum of the ISO image.
     */
    sha256Checksum: string;
    /**
     * URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
     */
    sourceURI: string;
    /**
     * Specifies the type of source image you want to start with.
     * Expected value is 'ISO'.
     */
    type: "ISO";
}

export interface ImageTemplateLastRunStatusResponse {
    /**
     * End time of the last run (UTC)
     */
    endTime?: string;
    /**
     * Verbose information about the last run state
     */
    message?: string;
    /**
     * State of the last run
     */
    runState?: string;
    /**
     * Sub-state of the last run
     */
    runSubState?: string;
    /**
     * Start time of the last run (UTC)
     */
    startTime?: string;
}

/**
 * Distribute as a Managed Disk Image.
 */
export interface ImageTemplateManagedImageDistributorResponse {
    /**
     * Tags that will be applied to the artifact once it has been created/updated by the distributor.
     */
    artifactTags?: {[key: string]: string};
    /**
     * Resource Id of the Managed Disk Image
     */
    imageId: string;
    /**
     * Azure location for the image, should match if image already exists
     */
    location: string;
    /**
     * The name to be used for the associated RunOutput.
     */
    runOutputName: string;
    /**
     * Type of distribution.
     * Expected value is 'ManagedImage'.
     */
    type: "ManagedImage";
}

/**
 * Describes an image source that is a managed image in customer subscription.
 */
export interface ImageTemplateManagedImageSourceResponse {
    /**
     * ARM resource id of the managed image in customer subscription
     */
    imageId: string;
    /**
     * Specifies the type of source image you want to start with.
     * Expected value is 'ManagedImage'.
     */
    type: "ManagedImage";
}

/**
 * Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
 */
export interface ImageTemplatePlatformImageSourceResponse {
    /**
     * Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    offer?: string;
    /**
     * Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    publisher?: string;
    /**
     * Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    sku?: string;
    /**
     * Specifies the type of source image you want to start with.
     * Expected value is 'PlatformImage'.
     */
    type: "PlatformImage";
    /**
     * Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
     */
    version?: string;
}

/**
 * Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
 */
export interface ImageTemplatePowerShellCustomizerResponse {
    /**
     * Array of PowerShell commands to execute
     */
    inline?: string[];
    /**
     * Friendly Name to provide context on what this customization step does
     */
    name?: string;
    /**
     * The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
     */
    script?: string;
    /**
     * The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
     * Expected value is 'PowerShell'.
     */
    type: "PowerShell";
    /**
     * Valid exit codes for the PowerShell script. [Default: 0]
     */
    validExitCodes?: number[];
}

/**
 * Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
 */
export interface ImageTemplateRestartCustomizerResponse {
    /**
     * Friendly Name to provide context on what this customization step does
     */
    name?: string;
    /**
     * Command to check if restart succeeded [Default: '']
     */
    restartCheckCommand?: string;
    /**
     * Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
     */
    restartCommand?: string;
    /**
     * Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
     */
    restartTimeout?: string;
    /**
     * The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
     * Expected value is 'WindowsRestart'.
     */
    type: "WindowsRestart";
}

/**
 * Distribute via Shared Image Gallery.
 */
export interface ImageTemplateSharedImageDistributorResponse {
    /**
     * Tags that will be applied to the artifact once it has been created/updated by the distributor.
     */
    artifactTags?: {[key: string]: string};
    /**
     * Resource Id of the Shared Image Gallery image
     */
    galleryImageId: string;
    replicationRegions: string[];
    /**
     * The name to be used for the associated RunOutput.
     */
    runOutputName: string;
    /**
     * Type of distribution.
     * Expected value is 'SharedImage'.
     */
    type: "SharedImage";
}

/**
 * Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
 */
export interface ImageTemplateShellCustomizerResponse {
    /**
     * Array of shell commands to execute
     */
    inline?: string[];
    /**
     * Friendly Name to provide context on what this customization step does
     */
    name?: string;
    /**
     * The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
     */
    script?: string;
    /**
     * The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
     * Expected value is 'Shell'.
     */
    type: "Shell";
}

/**
 * Distribute via VHD in a storage account.
 */
export interface ImageTemplateVhdDistributorResponse {
    /**
     * Tags that will be applied to the artifact once it has been created/updated by the distributor.
     */
    artifactTags?: {[key: string]: string};
    /**
     * The name to be used for the associated RunOutput.
     */
    runOutputName: string;
    /**
     * Type of distribution.
     * Expected value is 'VHD'.
     */
    type: "VHD";
}

export interface ProvisioningErrorResponse {
    /**
     * Verbose error message about the provisioning failure
     */
    message?: string;
    /**
     * Error code of the provisioning failure
     */
    provisioningErrorCode?: string;
}

