// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Actions to invoke when the alert fires.
 */
export interface ActionsResponse {
    /**
     * Action Group resource Ids to invoke when the alert fires.
     */
    actionGroups?: string[];
    /**
     * The properties of an alert payload.
     */
    customProperties?: {[key: string]: string};
}

/**
 * A condition of the scheduled query rule.
 */
export interface ConditionResponse {
    /**
     * List of Dimensions conditions
     */
    dimensions?: outputs.insights.v20220615.DimensionResponse[];
    /**
     * The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
     */
    failingPeriods?: outputs.insights.v20220615.ConditionResponseFailingPeriods;
    /**
     * The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
     */
    metricMeasureColumn?: string;
    /**
     * The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
     */
    metricName?: string;
    /**
     * The criteria operator. Relevant and required only for rules of the kind LogAlert.
     */
    operator?: string;
    /**
     * Log query alert
     */
    query?: string;
    /**
     * The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
     */
    resourceIdColumn?: string;
    /**
     * the criteria threshold value that activates the alert. Relevant and required only for rules of the kind LogAlert.
     */
    threshold?: number;
    /**
     * Aggregation type. Relevant and required only for rules of the kind LogAlert.
     */
    timeAggregation?: string;
}
/**
 * conditionResponseProvideDefaults sets the appropriate defaults for ConditionResponse
 */
export function conditionResponseProvideDefaults(val: ConditionResponse): ConditionResponse {
    return {
        ...val,
        failingPeriods: (val.failingPeriods ? outputs.insights.v20220615.conditionResponseFailingPeriodsProvideDefaults(val.failingPeriods) : undefined),
    };
}

/**
 * The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
 */
export interface ConditionResponseFailingPeriods {
    /**
     * The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
     */
    minFailingPeriodsToAlert?: number;
    /**
     * The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
     */
    numberOfEvaluationPeriods?: number;
}
/**
 * conditionResponseFailingPeriodsProvideDefaults sets the appropriate defaults for ConditionResponseFailingPeriods
 */
export function conditionResponseFailingPeriodsProvideDefaults(val: ConditionResponseFailingPeriods): ConditionResponseFailingPeriods {
    return {
        ...val,
        minFailingPeriodsToAlert: (val.minFailingPeriodsToAlert) ?? 1,
        numberOfEvaluationPeriods: (val.numberOfEvaluationPeriods) ?? 1,
    };
}

/**
 * Dimension splitting and filtering definition
 */
export interface DimensionResponse {
    /**
     * Name of the dimension
     */
    name: string;
    /**
     * Operator for dimension values
     */
    operator: string;
    /**
     * List of dimension values
     */
    values: string[];
}

/**
 * A header to add to the WebTest.
 */
export interface HeaderFieldResponse {
    /**
     * The name of the header.
     */
    headerFieldName?: string;
    /**
     * The value of the header.
     */
    headerFieldValue?: string;
}

/**
 * The rule criteria that defines the conditions of the scheduled query rule.
 */
export interface ScheduledQueryRuleCriteriaResponse {
    /**
     * A list of conditions to evaluate against the specified scopes
     */
    allOf?: outputs.insights.v20220615.ConditionResponse[];
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
 */
export interface WebTestGeolocationResponse {
    /**
     * Location ID for the WebTest to run from.
     */
    location?: string;
}

/**
 * An XML configuration specification for a WebTest.
 */
export interface WebTestPropertiesResponseConfiguration {
    /**
     * The XML specification of a WebTest to run against an application.
     */
    webTest?: string;
}

/**
 * The collection of content validation properties
 */
export interface WebTestPropertiesResponseContentValidation {
    /**
     * Content to look for in the return of the WebTest.  Must not be null or empty.
     */
    contentMatch?: string;
    /**
     * When set, this value makes the ContentMatch validation case insensitive.
     */
    ignoreCase?: boolean;
    /**
     * When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
     */
    passIfTextFound?: boolean;
}

/**
 * The collection of request properties
 */
export interface WebTestPropertiesResponseRequest {
    /**
     * Follow redirects for this web test.
     */
    followRedirects?: boolean;
    /**
     * List of headers and their values to add to the WebTest call.
     */
    headers?: outputs.insights.v20220615.HeaderFieldResponse[];
    /**
     * Http verb to use for this web test.
     */
    httpVerb?: string;
    /**
     * Parse Dependent request for this WebTest.
     */
    parseDependentRequests?: boolean;
    /**
     * Base64 encoded string body to send with this web test.
     */
    requestBody?: string;
    /**
     * Url location to test.
     */
    requestUrl?: string;
}

/**
 * The collection of validation rule properties
 */
export interface WebTestPropertiesResponseValidationRules {
    /**
     * The collection of content validation properties
     */
    contentValidation?: outputs.insights.v20220615.WebTestPropertiesResponseContentValidation;
    /**
     * Validate that the WebTest returns the http status code provided.
     */
    expectedHttpStatusCode?: number;
    /**
     * When set, validation will ignore the status code.
     */
    ignoreHttpsStatusCode?: boolean;
    /**
     * A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
     */
    sSLCertRemainingLifetimeCheck?: number;
    /**
     * Checks to see if the SSL cert is still valid.
     */
    sSLCheck?: boolean;
}

