// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Definition of custom data column.
 */
export interface ColumnDefinitionArgs {
    /**
     * The name of the column.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of the column data.
     */
    type?: pulumi.Input<string | enums.insights.v20210901preview.KnownColumnDefinitionType>;
}

/**
 * Network access control rules for the endpoints.
 */
export interface DataCollectionEndpointNetworkAclsArgs {
    /**
     * The configuration to set whether network access from public internet to the endpoints are allowed.
     */
    publicNetworkAccess?: pulumi.Input<string | enums.insights.v20210901preview.KnownPublicNetworkAccessOptions>;
}

/**
 * The specification of data sources. 
 * This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
 */
export interface DataCollectionRuleDataSourcesArgs {
    /**
     * The list of Azure VM extension data source configurations.
     */
    extensions?: pulumi.Input<pulumi.Input<inputs.insights.v20210901preview.ExtensionDataSourceArgs>[]>;
    /**
     * The list of IIS logs source configurations.
     */
    iisLogs?: pulumi.Input<pulumi.Input<inputs.insights.v20210901preview.IisLogsDataSourceArgs>[]>;
    /**
     * The list of Log files source configurations.
     */
    logFiles?: pulumi.Input<pulumi.Input<inputs.insights.v20210901preview.LogFilesDataSourceArgs>[]>;
    /**
     * The list of performance counter data source configurations.
     */
    performanceCounters?: pulumi.Input<pulumi.Input<inputs.insights.v20210901preview.PerfCounterDataSourceArgs>[]>;
    /**
     * The list of Syslog data source configurations.
     */
    syslog?: pulumi.Input<pulumi.Input<inputs.insights.v20210901preview.SyslogDataSourceArgs>[]>;
    /**
     * The list of Windows Event Log data source configurations.
     */
    windowsEventLogs?: pulumi.Input<pulumi.Input<inputs.insights.v20210901preview.WindowsEventLogDataSourceArgs>[]>;
}

/**
 * The specification of destinations.
 */
export interface DataCollectionRuleDestinationsArgs {
    /**
     * Azure Monitor Metrics destination.
     */
    azureMonitorMetrics?: pulumi.Input<inputs.insights.v20210901preview.DestinationsSpecAzureMonitorMetricsArgs>;
    /**
     * List of Log Analytics destinations.
     */
    logAnalytics?: pulumi.Input<pulumi.Input<inputs.insights.v20210901preview.LogAnalyticsDestinationArgs>[]>;
}

/**
 * Definition of which streams are sent to which destinations.
 */
export interface DataFlowArgs {
    /**
     * List of destinations for this data flow.
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The output stream of the transform. Only required if the transform changes data to a different stream.
     */
    outputStream?: pulumi.Input<string>;
    /**
     * List of streams for this data flow.
     */
    streams?: pulumi.Input<pulumi.Input<string | enums.insights.v20210901preview.KnownDataFlowStreams>[]>;
    /**
     * The KQL query to transform stream data.
     */
    transformKql?: pulumi.Input<string>;
}

/**
 * Azure Monitor Metrics destination.
 */
export interface DestinationsSpecAzureMonitorMetricsArgs {
    /**
     * A friendly name for the destination. 
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     */
    name?: pulumi.Input<string>;
}

/**
 * Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
 * Collected from either Windows and Linux machines, depending on which extension is defined.
 */
export interface ExtensionDataSourceArgs {
    /**
     * The name of the VM extension.
     */
    extensionName: pulumi.Input<string>;
    /**
     * The extension settings. The format is specific for particular extension.
     */
    extensionSettings?: any;
    /**
     * The list of data sources this extension needs data from.
     */
    inputDataSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: pulumi.Input<pulumi.Input<string | enums.insights.v20210901preview.KnownExtensionDataSourceStreams>[]>;
}

/**
 * Enables IIS logs to be collected by this data collection rule.
 */
export interface IisLogsDataSourceArgs {
    /**
     * Absolute paths file location
     */
    logDirectories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * IIS streams
     */
    streams: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Log Analytics destination.
 */
export interface LogAnalyticsDestinationArgs {
    /**
     * A friendly name for the destination. 
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The resource ID of the Log Analytics workspace.
     */
    workspaceResourceId?: pulumi.Input<string>;
}

/**
 * Text settings
 */
export interface LogFileSettingsTextArgs {
    /**
     * One of the supported timestamp formats
     */
    recordStartTimestampFormat: pulumi.Input<string | enums.insights.v20210901preview.KnownLogFileTextSettingsRecordStartTimestampFormat>;
}

/**
 * Definition of which custom log files will be collected by this data collection rule
 */
export interface LogFilesDataSourceArgs {
    /**
     * File Patterns where the log files are located
     */
    filePatterns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The data format of the log files
     */
    format: pulumi.Input<string | enums.insights.v20210901preview.KnownLogFilesDataSourceFormat>;
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The log files specific settings.
     */
    settings?: pulumi.Input<inputs.insights.v20210901preview.LogFilesDataSourceSettingsArgs>;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data source
     */
    streams: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The log files specific settings.
 */
export interface LogFilesDataSourceSettingsArgs {
    /**
     * Text settings
     */
    text?: pulumi.Input<inputs.insights.v20210901preview.LogFileSettingsTextArgs>;
}

/**
 * Definition of which performance counters will be collected and how they will be collected by this data collection rule.
 * Collected from both Windows and Linux machines where the counter is present.
 */
export interface PerfCounterDataSourceArgs {
    /**
     * A list of specifier names of the performance counters you want to collect.
     * Use a wildcard (*) to collect a counter for all instances.
     * To get a list of performance counters on Windows, run the command 'typeperf'.
     */
    counterSpecifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of seconds between consecutive counter measurements (samples).
     */
    samplingFrequencyInSeconds?: pulumi.Input<number>;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: pulumi.Input<pulumi.Input<string | enums.insights.v20210901preview.KnownPerfCounterDataSourceStreams>[]>;
}

/**
 * Declaration of a custom stream.
 */
export interface StreamDeclarationArgs {
    /**
     * List of columns used by data in this stream.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.insights.v20210901preview.ColumnDefinitionArgs>[]>;
}

/**
 * Definition of which syslog data will be collected and how it will be collected.
 * Only collected from Linux machines.
 */
export interface SyslogDataSourceArgs {
    /**
     * The list of facility names.
     */
    facilityNames?: pulumi.Input<pulumi.Input<string | enums.insights.v20210901preview.KnownSyslogDataSourceFacilityNames>[]>;
    /**
     * The log levels to collect.
     */
    logLevels?: pulumi.Input<pulumi.Input<string | enums.insights.v20210901preview.KnownSyslogDataSourceLogLevels>[]>;
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: pulumi.Input<pulumi.Input<string | enums.insights.v20210901preview.KnownSyslogDataSourceStreams>[]>;
}

/**
 * Definition of which Windows Event Log events will be collected and how they will be collected.
 * Only collected from Windows machines.
 */
export interface WindowsEventLogDataSourceArgs {
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: pulumi.Input<string>;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: pulumi.Input<pulumi.Input<string | enums.insights.v20210901preview.KnownWindowsEventLogDataSourceStreams>[]>;
    /**
     * A list of Windows Event Log queries in XPATH format.
     */
    xPathQueries?: pulumi.Input<pulumi.Input<string>[]>;
}

