// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Definition of custom data column.
 */
export interface ColumnDefinitionResponse {
    /**
     * The name of the column.
     */
    name?: string;
    /**
     * The type of the column data.
     */
    type?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface DataCollectionEndpointResourceResponseSystemData {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * The endpoint used by clients to access their configuration.
 */
export interface DataCollectionEndpointResponseConfigurationAccess {
    /**
     * The endpoint. This property is READ-ONLY.
     */
    endpoint: string;
}

/**
 * The endpoint used by clients to ingest logs.
 */
export interface DataCollectionEndpointResponseLogsIngestion {
    /**
     * The endpoint. This property is READ-ONLY.
     */
    endpoint: string;
}

/**
 * Network access control rules for the endpoints.
 */
export interface DataCollectionEndpointResponseNetworkAcls {
    /**
     * The configuration to set whether network access from public internet to the endpoints are allowed.
     */
    publicNetworkAccess?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * Metadata about the resource
 */
export interface DataCollectionRuleAssociationResponseMetadata {
    /**
     * Azure offering managing this resource on-behalf-of customer.
     */
    provisionedBy: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface DataCollectionRuleResourceResponseSystemData {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * The specification of data sources. 
 * This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
 */
export interface DataCollectionRuleResponseDataSources {
    /**
     * The list of Azure VM extension data source configurations.
     */
    extensions?: outputs.insights.v20210901preview.ExtensionDataSourceResponse[];
    /**
     * The list of IIS logs source configurations.
     */
    iisLogs?: outputs.insights.v20210901preview.IisLogsDataSourceResponse[];
    /**
     * The list of Log files source configurations.
     */
    logFiles?: outputs.insights.v20210901preview.LogFilesDataSourceResponse[];
    /**
     * The list of performance counter data source configurations.
     */
    performanceCounters?: outputs.insights.v20210901preview.PerfCounterDataSourceResponse[];
    /**
     * The list of Syslog data source configurations.
     */
    syslog?: outputs.insights.v20210901preview.SyslogDataSourceResponse[];
    /**
     * The list of Windows Event Log data source configurations.
     */
    windowsEventLogs?: outputs.insights.v20210901preview.WindowsEventLogDataSourceResponse[];
}

/**
 * The specification of destinations.
 */
export interface DataCollectionRuleResponseDestinations {
    /**
     * Azure Monitor Metrics destination.
     */
    azureMonitorMetrics?: outputs.insights.v20210901preview.DestinationsSpecResponseAzureMonitorMetrics;
    /**
     * List of Log Analytics destinations.
     */
    logAnalytics?: outputs.insights.v20210901preview.LogAnalyticsDestinationResponse[];
}

/**
 * Metadata about the resource
 */
export interface DataCollectionRuleResponseMetadata {
    /**
     * Azure offering managing this resource on-behalf-of customer.
     */
    provisionedBy: string;
}

/**
 * Definition of which streams are sent to which destinations.
 */
export interface DataFlowResponse {
    /**
     * List of destinations for this data flow.
     */
    destinations?: string[];
    /**
     * The output stream of the transform. Only required if the transform changes data to a different stream.
     */
    outputStream?: string;
    /**
     * List of streams for this data flow.
     */
    streams?: string[];
    /**
     * The KQL query to transform stream data.
     */
    transformKql?: string;
}

/**
 * Azure Monitor Metrics destination.
 */
export interface DestinationsSpecResponseAzureMonitorMetrics {
    /**
     * A friendly name for the destination. 
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     */
    name?: string;
}

/**
 * Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
 * Collected from either Windows and Linux machines, depending on which extension is defined.
 */
export interface ExtensionDataSourceResponse {
    /**
     * The name of the VM extension.
     */
    extensionName: string;
    /**
     * The extension settings. The format is specific for particular extension.
     */
    extensionSettings?: any;
    /**
     * The list of data sources this extension needs data from.
     */
    inputDataSources?: string[];
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: string[];
}

/**
 * Enables IIS logs to be collected by this data collection rule.
 */
export interface IisLogsDataSourceResponse {
    /**
     * Absolute paths file location
     */
    logDirectories?: string[];
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * IIS streams
     */
    streams: string[];
}

/**
 * Log Analytics destination.
 */
export interface LogAnalyticsDestinationResponse {
    /**
     * A friendly name for the destination. 
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * The Customer ID of the Log Analytics workspace.
     */
    workspaceId: string;
    /**
     * The resource ID of the Log Analytics workspace.
     */
    workspaceResourceId?: string;
}

/**
 * Text settings
 */
export interface LogFileSettingsResponseText {
    /**
     * One of the supported timestamp formats
     */
    recordStartTimestampFormat: string;
}

/**
 * Definition of which custom log files will be collected by this data collection rule
 */
export interface LogFilesDataSourceResponse {
    /**
     * File Patterns where the log files are located
     */
    filePatterns: string[];
    /**
     * The data format of the log files
     */
    format: string;
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * The log files specific settings.
     */
    settings?: outputs.insights.v20210901preview.LogFilesDataSourceResponseSettings;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data source
     */
    streams: string[];
}

/**
 * The log files specific settings.
 */
export interface LogFilesDataSourceResponseSettings {
    /**
     * Text settings
     */
    text?: outputs.insights.v20210901preview.LogFileSettingsResponseText;
}

/**
 * Definition of which performance counters will be collected and how they will be collected by this data collection rule.
 * Collected from both Windows and Linux machines where the counter is present.
 */
export interface PerfCounterDataSourceResponse {
    /**
     * A list of specifier names of the performance counters you want to collect.
     * Use a wildcard (*) to collect a counter for all instances.
     * To get a list of performance counters on Windows, run the command 'typeperf'.
     */
    counterSpecifiers?: string[];
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * The number of seconds between consecutive counter measurements (samples).
     */
    samplingFrequencyInSeconds?: number;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: string[];
}

/**
 * Declaration of a custom stream.
 */
export interface StreamDeclarationResponse {
    /**
     * List of columns used by data in this stream.
     */
    columns?: outputs.insights.v20210901preview.ColumnDefinitionResponse[];
}

/**
 * Definition of which syslog data will be collected and how it will be collected.
 * Only collected from Linux machines.
 */
export interface SyslogDataSourceResponse {
    /**
     * The list of facility names.
     */
    facilityNames?: string[];
    /**
     * The log levels to collect.
     */
    logLevels?: string[];
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: string[];
}

/**
 * Definition of which Windows Event Log events will be collected and how they will be collected.
 * Only collected from Windows machines.
 */
export interface WindowsEventLogDataSourceResponse {
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: string[];
    /**
     * A list of Windows Event Log queries in XPATH format.
     */
    xPathQueries?: string[];
}

