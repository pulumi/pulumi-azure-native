// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export * as v20140401 from "./v20140401/output";
export * as v20150401 from "./v20150401/output";
export * as v20150501 from "./v20150501/output";
export * as v20160301 from "./v20160301/output";
export * as v20170401 from "./v20170401/output";
export * as v20170501preview from "./v20170501preview/output";
export * as v20180301 from "./v20180301/output";
export * as v20180416 from "./v20180416/output";
export * as v20180501preview from "./v20180501preview/output";
export * as v20180601preview from "./v20180601preview/output";
export * as v20180901 from "./v20180901/output";
export * as v20190301 from "./v20190301/output";
export * as v20190601 from "./v20190601/output";
export * as v20191017preview from "./v20191017preview/output";
export * as v20191101preview from "./v20191101preview/output";
export * as v20200101preview from "./v20200101preview/output";
export * as v20200202 from "./v20200202/output";
export * as v20200202preview from "./v20200202preview/output";
export * as v20200501preview from "./v20200501preview/output";
export * as v20201001 from "./v20201001/output";
export * as v20201005preview from "./v20201005preview/output";
export * as v20201020 from "./v20201020/output";
export * as v20201120 from "./v20201120/output";
export * as v20210201preview from "./v20210201preview/output";
export * as v20210308 from "./v20210308/output";
export * as v20210401 from "./v20210401/output";
export * as v20210501preview from "./v20210501preview/output";
export * as v20210701preview from "./v20210701preview/output";
export * as v20210801 from "./v20210801/output";
export * as v20210901 from "./v20210901/output";
export * as v20210901preview from "./v20210901preview/output";
export * as v20220401 from "./v20220401/output";
export * as v20220601 from "./v20220601/output";
export * as v20220615 from "./v20220615/output";
export * as v20221001 from "./v20221001/output";
/**
 * A pointer to an Azure Action Group.
 */
export interface ActionGroupResponse {
    /**
     * The resource ID of the Action Group. This cannot be null or empty.
     */
    actionGroupId: string;
    /**
     * the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
     */
    webhookProperties?: {[key: string]: string};
}

/**
 * A list of Activity Log Alert rule actions.
 */
export interface ActionListResponse {
    /**
     * The list of the Action Groups.
     */
    actionGroups?: outputs.insights.ActionGroupResponse[];
}

/**
 * An Activity Log Alert rule condition that is met when all its member conditions are met.
 */
export interface AlertRuleAllOfConditionResponse {
    /**
     * The list of Activity Log Alert rule conditions.
     */
    allOf: outputs.insights.AlertRuleAnyOfOrLeafConditionResponse[];
}

/**
 * An Activity Log Alert rule condition that is met when all its member conditions are met.
 * Each condition can be of one of the following types:
 * __Important__: Each type has its unique subset of properties. Properties from different types CANNOT exist in one condition.
 *    * __Leaf Condition -__ must contain 'field' and either 'equals' or 'containsAny'.
 *   _Please note, 'anyOf' should __not__ be set in a Leaf Condition._
 *   * __AnyOf Condition -__ must contain __only__ 'anyOf' (which is an array of Leaf Conditions).
 *   _Please note, 'field', 'equals' and 'containsAny' should __not__ be set in an AnyOf Condition._
 */
export interface AlertRuleAnyOfOrLeafConditionResponse {
    /**
     * An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met.
     */
    anyOf?: outputs.insights.AlertRuleLeafConditionResponse[];
    /**
     * The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
     */
    containsAny?: string[];
    /**
     * The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
     */
    equals?: string;
    /**
     * The name of the Activity Log event's field that this condition will examine.
     * The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
     */
    field?: string;
}

/**
 * An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
 * This condition must contain 'field' and either 'equals' or 'containsAny'.
 */
export interface AlertRuleLeafConditionResponse {
    /**
     * The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
     */
    containsAny?: string[];
    /**
     * The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
     */
    equals?: string;
    /**
     * The name of the Activity Log event's field that this condition will examine.
     * The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
     */
    field?: string;
}

/**
 * Specify action need to be taken when rule type is Alert
 */
export interface AlertingActionResponse {
    /**
     * Azure action group reference.
     */
    aznsAction?: outputs.insights.AzNsActionGroupResponse;
    /**
     * Specifies the action. Supported values - AlertingAction, LogToMetricAction
     * Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'.
     */
    odataType: "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction";
    /**
     * Severity of the alert
     */
    severity: string;
    /**
     * time (in minutes) for which Alerts should be throttled or suppressed.
     */
    throttlingInMin?: number;
    /**
     * The trigger condition that results in the alert rule being.
     */
    trigger: outputs.insights.TriggerConditionResponse;
}

/**
 * A set of properties that can be defined in the context of a specific item type. Each type may have its own properties.
 */
export interface ApplicationInsightsComponentAnalyticsItemPropertiesResponse {
    /**
     * A function alias, used when the type of the item is Function
     */
    functionAlias?: string;
}

/**
 * An Application Insights component daily data volume cap
 */
export interface ApplicationInsightsComponentDataVolumeCapResponse {
    /**
     * Daily data volume cap in GB.
     */
    cap?: number;
    /**
     * Maximum daily data volume cap that the user can set for this component.
     */
    maxHistoryCap: number;
    /**
     * Daily data volume cap UTC reset hour.
     */
    resetTime: number;
    /**
     * Do not send a notification email when the daily data volume cap is met.
     */
    stopSendNotificationWhenHitCap?: boolean;
    /**
     * Reserved, not used for now.
     */
    stopSendNotificationWhenHitThreshold?: boolean;
    /**
     * Reserved, not used for now.
     */
    warningThreshold?: number;
}

/**
 * Static definitions of the ProactiveDetection configuration rule (same values for all components).
 */
export interface ApplicationInsightsComponentProactiveDetectionConfigurationResponseRuleDefinitions {
    /**
     * The rule description
     */
    description?: string;
    /**
     * The rule name as it is displayed in UI
     */
    displayName?: string;
    /**
     * URL which displays additional info about the proactive detection rule
     */
    helpUrl?: string;
    /**
     * A flag indicating whether the rule is enabled by default
     */
    isEnabledByDefault?: boolean;
    /**
     * A flag indicating whether the rule is hidden (from the UI)
     */
    isHidden?: boolean;
    /**
     * A flag indicating whether the rule is in preview
     */
    isInPreview?: boolean;
    /**
     * The rule name
     */
    name?: string;
    /**
     * A flag indicating whether email notifications are supported for detections for this rule
     */
    supportsEmailNotifications?: boolean;
}

/**
 * An arm role receiver.
 */
export interface ArmRoleReceiverResponse {
    /**
     * The name of the arm role receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
    /**
     * The arm role id.
     */
    roleId: string;
    /**
     * Indicates whether to use common alert schema.
     */
    useCommonAlertSchema?: boolean;
}
/**
 * armRoleReceiverResponseProvideDefaults sets the appropriate defaults for ArmRoleReceiverResponse
 */
export function armRoleReceiverResponseProvideDefaults(val: ArmRoleReceiverResponse): ArmRoleReceiverResponse {
    return {
        ...val,
        useCommonAlertSchema: (val.useCommonAlertSchema) ?? false,
    };
}

/**
 * The Azure Automation Runbook notification receiver.
 */
export interface AutomationRunbookReceiverResponse {
    /**
     * The Azure automation account Id which holds this runbook and authenticate to Azure resource.
     */
    automationAccountId: string;
    /**
     * Indicates whether this instance is global runbook.
     */
    isGlobalRunbook: boolean;
    /**
     * Indicates name of the webhook.
     */
    name?: string;
    /**
     * The name for this runbook.
     */
    runbookName: string;
    /**
     * The URI where webhooks should be sent.
     */
    serviceUri?: string;
    /**
     * Indicates whether to use common alert schema.
     */
    useCommonAlertSchema?: boolean;
    /**
     * The resource id for webhook linked to this runbook.
     */
    webhookResourceId: string;
}
/**
 * automationRunbookReceiverResponseProvideDefaults sets the appropriate defaults for AutomationRunbookReceiverResponse
 */
export function automationRunbookReceiverResponseProvideDefaults(val: AutomationRunbookReceiverResponse): AutomationRunbookReceiverResponse {
    return {
        ...val,
        useCommonAlertSchema: (val.useCommonAlertSchema) ?? false,
    };
}

/**
 * Autoscale notification.
 */
export interface AutoscaleNotificationResponse {
    /**
     * the email notification.
     */
    email?: outputs.insights.EmailNotificationResponse;
    /**
     * the operation associated with the notification and its value must be "scale"
     */
    operation: string;
    /**
     * the collection of webhook notifications.
     */
    webhooks?: outputs.insights.WebhookNotificationResponse[];
}
/**
 * autoscaleNotificationResponseProvideDefaults sets the appropriate defaults for AutoscaleNotificationResponse
 */
export function autoscaleNotificationResponseProvideDefaults(val: AutoscaleNotificationResponse): AutoscaleNotificationResponse {
    return {
        ...val,
        email: (val.email ? outputs.insights.emailNotificationResponseProvideDefaults(val.email) : undefined),
    };
}

/**
 * Autoscale profile.
 */
export interface AutoscaleProfileResponse {
    /**
     * the number of instances that can be used during this profile.
     */
    capacity: outputs.insights.ScaleCapacityResponse;
    /**
     * the specific date-time for the profile. This element is not used if the Recurrence element is used.
     */
    fixedDate?: outputs.insights.TimeWindowResponse;
    /**
     * the name of the profile.
     */
    name: string;
    /**
     * the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
     */
    recurrence?: outputs.insights.RecurrenceResponse;
    /**
     * the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
     */
    rules: outputs.insights.ScaleRuleResponse[];
}

/**
 * Azure action group
 */
export interface AzNsActionGroupResponse {
    /**
     * Azure Action Group reference.
     */
    actionGroup?: string[];
    /**
     * Custom payload to be sent for all webhook URI in Azure action group
     */
    customWebhookPayload?: string;
    /**
     * Custom subject override for all email ids in Azure action group
     */
    emailSubject?: string;
}

/**
 * The Azure mobile App push notification receiver.
 */
export interface AzureAppPushReceiverResponse {
    /**
     * The email address registered for the Azure mobile app.
     */
    emailAddress: string;
    /**
     * The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
}

/**
 * An azure function receiver.
 */
export interface AzureFunctionReceiverResponse {
    /**
     * The azure resource id of the function app.
     */
    functionAppResourceId: string;
    /**
     * The function name in the function app.
     */
    functionName: string;
    /**
     * The http trigger url where http request sent to.
     */
    httpTriggerUrl: string;
    /**
     * The name of the azure function receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
    /**
     * Indicates whether to use common alert schema.
     */
    useCommonAlertSchema?: boolean;
}
/**
 * azureFunctionReceiverResponseProvideDefaults sets the appropriate defaults for AzureFunctionReceiverResponse
 */
export function azureFunctionReceiverResponseProvideDefaults(val: AzureFunctionReceiverResponse): AzureFunctionReceiverResponse {
    return {
        ...val,
        useCommonAlertSchema: (val.useCommonAlertSchema) ?? false,
    };
}

/**
 * Specifies the criteria for converting log to metric.
 */
export interface CriteriaResponse {
    /**
     * List of Dimensions for creating metric
     */
    dimensions?: outputs.insights.DimensionResponse[];
    /**
     * Name of the metric
     */
    metricName: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface DataCollectionEndpointResourceResponseSystemData {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * The endpoint used by clients to access their configuration.
 */
export interface DataCollectionEndpointResponseConfigurationAccess {
    /**
     * The endpoint. This property is READ-ONLY.
     */
    endpoint: string;
}

/**
 * The endpoint used by clients to ingest logs.
 */
export interface DataCollectionEndpointResponseLogsIngestion {
    /**
     * The endpoint. This property is READ-ONLY.
     */
    endpoint: string;
}

/**
 * Network access control rules for the endpoints.
 */
export interface DataCollectionEndpointResponseNetworkAcls {
    /**
     * The configuration to set whether network access from public internet to the endpoints are allowed.
     */
    publicNetworkAccess?: string;
}

/**
 * The specification of data sources. 
 * This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
 */
export interface DataCollectionRuleResponseDataSources {
    /**
     * The list of Azure VM extension data source configurations.
     */
    extensions?: outputs.insights.ExtensionDataSourceResponse[];
    /**
     * The list of performance counter data source configurations.
     */
    performanceCounters?: outputs.insights.PerfCounterDataSourceResponse[];
    /**
     * The list of Syslog data source configurations.
     */
    syslog?: outputs.insights.SyslogDataSourceResponse[];
    /**
     * The list of Windows Event Log data source configurations.
     */
    windowsEventLogs?: outputs.insights.WindowsEventLogDataSourceResponse[];
}

/**
 * The specification of destinations.
 */
export interface DataCollectionRuleResponseDestinations {
    /**
     * Azure Monitor Metrics destination.
     */
    azureMonitorMetrics?: outputs.insights.DestinationsSpecResponseAzureMonitorMetrics;
    /**
     * List of Log Analytics destinations.
     */
    logAnalytics?: outputs.insights.LogAnalyticsDestinationResponse[];
}

/**
 * Definition of which streams are sent to which destinations.
 */
export interface DataFlowResponse {
    /**
     * List of destinations for this data flow.
     */
    destinations?: string[];
    /**
     * List of streams for this data flow.
     */
    streams?: string[];
}

export interface DataSourceConfigurationResponse {
    /**
     * Windows event logs configuration.
     */
    eventLogs?: outputs.insights.EventLogConfigurationResponse[];
    /**
     * Performance counter configuration
     */
    perfCounters?: outputs.insights.PerformanceCounterConfigurationResponse[];
    /**
     * ETW providers configuration
     */
    providers?: outputs.insights.EtwProviderConfigurationResponse[];
}

/**
 * Data source object contains configuration to collect telemetry and one or more sinks to send that telemetry data to
 */
export interface DataSourceResponse {
    configuration: outputs.insights.DataSourceConfigurationResponse;
    /**
     * Datasource kind
     */
    kind: string;
    sinks: outputs.insights.SinkConfigurationResponse[];
}

/**
 * Azure Monitor Metrics destination.
 */
export interface DestinationsSpecResponseAzureMonitorMetrics {
    /**
     * A friendly name for the destination. 
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     */
    name?: string;
}

/**
 * Specifies the criteria for converting log to metric.
 */
export interface DimensionResponse {
    /**
     * Name of the dimension
     */
    name: string;
    /**
     * Operator for dimension values
     */
    operator: string;
    /**
     * List of dimension values
     */
    values: string[];
}

/**
 * Criterion for dynamic threshold.
 */
export interface DynamicMetricCriteriaResponse {
    /**
     * The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
     */
    alertSensitivity: string;
    /**
     * Specifies the type of threshold criteria
     * Expected value is 'DynamicThresholdCriterion'.
     */
    criterionType: "DynamicThresholdCriterion";
    /**
     * List of dimension conditions.
     */
    dimensions?: outputs.insights.MetricDimensionResponse[];
    /**
     * The minimum number of violations required within the selected lookback time window required to raise an alert.
     */
    failingPeriods: outputs.insights.DynamicThresholdFailingPeriodsResponse;
    /**
     * Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
     */
    ignoreDataBefore?: string;
    /**
     * Name of the metric.
     */
    metricName: string;
    /**
     * Namespace of the metric.
     */
    metricNamespace?: string;
    /**
     * Name of the criteria.
     */
    name: string;
    /**
     * The operator used to compare the metric value against the threshold.
     */
    operator: string;
    /**
     * Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
     */
    skipMetricValidation?: boolean;
    /**
     * the criteria time aggregation types.
     */
    timeAggregation: string;
}

/**
 * The minimum number of violations required within the selected lookback time window required to raise an alert.
 */
export interface DynamicThresholdFailingPeriodsResponse {
    /**
     * The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
     */
    minFailingPeriodsToAlert: number;
    /**
     * The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
     */
    numberOfEvaluationPeriods: number;
}

/**
 * Email notification of an autoscale event.
 */
export interface EmailNotificationResponse {
    /**
     * the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
     */
    customEmails?: string[];
    /**
     * a value indicating whether to send email to subscription administrator.
     */
    sendToSubscriptionAdministrator?: boolean;
    /**
     * a value indicating whether to send email to subscription co-administrators.
     */
    sendToSubscriptionCoAdministrators?: boolean;
}
/**
 * emailNotificationResponseProvideDefaults sets the appropriate defaults for EmailNotificationResponse
 */
export function emailNotificationResponseProvideDefaults(val: EmailNotificationResponse): EmailNotificationResponse {
    return {
        ...val,
        sendToSubscriptionAdministrator: (val.sendToSubscriptionAdministrator) ?? false,
        sendToSubscriptionCoAdministrators: (val.sendToSubscriptionCoAdministrators) ?? false,
    };
}

/**
 * An email receiver.
 */
export interface EmailReceiverResponse {
    /**
     * The email address of this receiver.
     */
    emailAddress: string;
    /**
     * The name of the email receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
    /**
     * The receiver status of the e-mail.
     */
    status: string;
    /**
     * Indicates whether to use common alert schema.
     */
    useCommonAlertSchema?: boolean;
}
/**
 * emailReceiverResponseProvideDefaults sets the appropriate defaults for EmailReceiverResponse
 */
export function emailReceiverResponseProvideDefaults(val: EmailReceiverResponse): EmailReceiverResponse {
    return {
        ...val,
        useCommonAlertSchema: (val.useCommonAlertSchema) ?? false,
    };
}

export interface EtwEventConfigurationResponse {
    filter?: string;
    id: number;
    name: string;
}

export interface EtwProviderConfigurationResponse {
    events: outputs.insights.EtwEventConfigurationResponse[];
    id: string;
}

export interface EventLogConfigurationResponse {
    filter?: string;
    logName: string;
}

/**
 * Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
 * Collected from either Windows and Linux machines, depending on which extension is defined.
 */
export interface ExtensionDataSourceResponse {
    /**
     * The name of the VM extension.
     */
    extensionName: string;
    /**
     * The extension settings. The format is specific for particular extension.
     */
    extensionSettings?: any;
    /**
     * The list of data sources this extension needs data from.
     */
    inputDataSources?: string[];
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: string[];
}

/**
 * An Itsm receiver.
 */
export interface ItsmReceiverResponse {
    /**
     * Unique identification of ITSM connection among multiple defined in above workspace.
     */
    connectionId: string;
    /**
     * The name of the Itsm receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
    /**
     * Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
     */
    region: string;
    /**
     * JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
     */
    ticketConfiguration: string;
    /**
     * OMS LA instance identifier.
     */
    workspaceId: string;
}

/**
 * A rule condition based on a certain number of locations failing.
 */
export interface LocationThresholdRuleConditionResponse {
    /**
     * the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
     */
    dataSource?: outputs.insights.RuleManagementEventDataSourceResponse | outputs.insights.RuleMetricDataSourceResponse;
    /**
     * the number of locations that must fail to activate the alert.
     */
    failedLocationCount: number;
    /**
     * specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
     * Expected value is 'Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition'.
     */
    odataType: "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition";
    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     */
    windowSize?: string;
}

/**
 * Log Analytics destination.
 */
export interface LogAnalyticsDestinationResponse {
    /**
     * A friendly name for the destination. 
     * This name should be unique across all destinations (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * The Customer ID of the Log Analytics workspace.
     */
    workspaceId: string;
    /**
     * The resource ID of the Log Analytics workspace.
     */
    workspaceResourceId?: string;
}

/**
 * A log metrics trigger descriptor.
 */
export interface LogMetricTriggerResponse {
    /**
     * Evaluation of metric on a particular column
     */
    metricColumn?: string;
    /**
     * Metric Trigger Type - 'Consecutive' or 'Total'
     */
    metricTriggerType?: string;
    /**
     * The threshold of the metric trigger.
     */
    threshold?: number;
    /**
     * Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
     */
    thresholdOperator?: string;
}

/**
 * Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
 */
export interface LogSettingsResponse {
    /**
     * Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
     */
    category?: string;
    /**
     * a value indicating whether this log is enabled.
     */
    enabled: boolean;
    /**
     * the retention policy for this log.
     */
    retentionPolicy?: outputs.insights.RetentionPolicyResponse;
}

/**
 * Specify action need to be taken when rule type is converting log to metric
 */
export interface LogToMetricActionResponse {
    /**
     * Criteria of Metric
     */
    criteria: outputs.insights.CriteriaResponse[];
    /**
     * Specifies the action. Supported values - AlertingAction, LogToMetricAction
     * Expected value is 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction'.
     */
    odataType: "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction";
}

/**
 * A logic app receiver.
 */
export interface LogicAppReceiverResponse {
    /**
     * The callback url where http request sent to.
     */
    callbackUrl: string;
    /**
     * The name of the logic app receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
    /**
     * The azure resource id of the logic app receiver.
     */
    resourceId: string;
    /**
     * Indicates whether to use common alert schema.
     */
    useCommonAlertSchema?: boolean;
}
/**
 * logicAppReceiverResponseProvideDefaults sets the appropriate defaults for LogicAppReceiverResponse
 */
export function logicAppReceiverResponseProvideDefaults(val: LogicAppReceiverResponse): LogicAppReceiverResponse {
    return {
        ...val,
        useCommonAlertSchema: (val.useCommonAlertSchema) ?? false,
    };
}

/**
 * How the data that is collected should be combined over time.
 */
export interface ManagementEventAggregationConditionResponse {
    /**
     * the condition operator.
     */
    operator?: string;
    /**
     * The threshold value that activates the alert.
     */
    threshold?: number;
    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     */
    windowSize?: string;
}

/**
 * A management event rule condition.
 */
export interface ManagementEventRuleConditionResponse {
    /**
     * How the data that is collected should be combined over time and when the alert is activated. Note that for management event alerts aggregation is optional – if it is not provided then any event will cause the alert to activate.
     */
    aggregation?: outputs.insights.ManagementEventAggregationConditionResponse;
    /**
     * the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
     */
    dataSource?: outputs.insights.RuleManagementEventDataSourceResponse | outputs.insights.RuleMetricDataSourceResponse;
    /**
     * specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
     * Expected value is 'Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition'.
     */
    odataType: "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition";
}

/**
 * Part of Management Group diagnostic setting. Specifies the settings for a particular log.
 */
export interface ManagementGroupLogSettingsResponse {
    /**
     * Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
     */
    category: string;
    /**
     * a value indicating whether this log is enabled.
     */
    enabled: boolean;
}

/**
 * An alert action.
 */
export interface MetricAlertActionResponse {
    /**
     * the id of the action group to use.
     */
    actionGroupId?: string;
    /**
     * This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
     */
    webHookProperties?: {[key: string]: string};
}

/**
 * Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
 */
export interface MetricAlertMultipleResourceMultipleMetricCriteriaResponse {
    /**
     * the list of multiple metric criteria for this 'all of' operation. 
     */
    allOf?: (outputs.insights.DynamicMetricCriteriaResponse | outputs.insights.MetricCriteriaResponse)[];
    /**
     * specifies the type of the alert criteria.
     * Expected value is 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'.
     */
    odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria";
}

/**
 * Specifies the metric alert criteria for a single resource that has multiple metric criteria.
 */
export interface MetricAlertSingleResourceMultipleMetricCriteriaResponse {
    /**
     * The list of metric criteria for this 'all of' operation. 
     */
    allOf?: outputs.insights.MetricCriteriaResponse[];
    /**
     * specifies the type of the alert criteria.
     * Expected value is 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'.
     */
    odataType: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria";
}

/**
 * Criterion to filter metrics.
 */
export interface MetricCriteriaResponse {
    /**
     * Specifies the type of threshold criteria
     * Expected value is 'StaticThresholdCriterion'.
     */
    criterionType: "StaticThresholdCriterion";
    /**
     * List of dimension conditions.
     */
    dimensions?: outputs.insights.MetricDimensionResponse[];
    /**
     * Name of the metric.
     */
    metricName: string;
    /**
     * Namespace of the metric.
     */
    metricNamespace?: string;
    /**
     * Name of the criteria.
     */
    name: string;
    /**
     * the criteria operator.
     */
    operator: string;
    /**
     * Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
     */
    skipMetricValidation?: boolean;
    /**
     * the criteria threshold value that activates the alert.
     */
    threshold: number;
    /**
     * the criteria time aggregation types.
     */
    timeAggregation: string;
}

/**
 * Specifies a metric dimension.
 */
export interface MetricDimensionResponse {
    /**
     * Name of the dimension.
     */
    name: string;
    /**
     * the dimension operator. Only 'Include' and 'Exclude' are supported
     */
    operator: string;
    /**
     * list of dimension values.
     */
    values: string[];
}

/**
 * Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
 */
export interface MetricSettingsResponse {
    /**
     * Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
     */
    category?: string;
    /**
     * a value indicating whether this category is enabled.
     */
    enabled: boolean;
    /**
     * the retention policy for this category.
     */
    retentionPolicy?: outputs.insights.RetentionPolicyResponse;
    /**
     * the timegrain of the metric in ISO8601 format.
     */
    timeGrain?: string;
}

/**
 * The trigger that results in a scaling action.
 */
export interface MetricTriggerResponse {
    /**
     * List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
     */
    dimensions?: outputs.insights.ScaleRuleMetricDimensionResponse[];
    /**
     * a value indicating whether metric should divide per instance.
     */
    dividePerInstance?: boolean;
    /**
     * the name of the metric that defines what the rule monitors.
     */
    metricName: string;
    /**
     * the namespace of the metric that defines what the rule monitors.
     */
    metricNamespace?: string;
    /**
     * the location of the resource the rule monitors.
     */
    metricResourceLocation?: string;
    /**
     * the resource identifier of the resource the rule monitors.
     */
    metricResourceUri: string;
    /**
     * the operator that is used to compare the metric data and the threshold.
     */
    operator: string;
    /**
     * the metric statistic type. How the metrics from multiple instances are combined.
     */
    statistic: string;
    /**
     * the threshold of the metric that triggers the scale action.
     */
    threshold: number;
    /**
     * time aggregation type. How the data that is collected should be combined over time. The default value is Average.
     */
    timeAggregation: string;
    /**
     * the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
     */
    timeGrain: string;
    /**
     * the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
     */
    timeWindow: string;
}

/**
 * Customer Managed Identity
 */
export interface MyWorkbookManagedIdentityResponse {
    /**
     * The identity type.
     */
    type?: string;
    /**
     * Customer Managed Identity
     */
    userAssignedIdentities?: outputs.insights.MyWorkbookUserAssignedIdentitiesResponse;
}

/**
 * Customer Managed Identity
 */
export interface MyWorkbookUserAssignedIdentitiesResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
}

/**
 * Definition of which performance counters will be collected and how they will be collected by this data collection rule.
 * Collected from both Windows and Linux machines where the counter is present.
 */
export interface PerfCounterDataSourceResponse {
    /**
     * A list of specifier names of the performance counters you want to collect.
     * Use a wildcard (*) to collect a counter for all instances.
     * To get a list of performance counters on Windows, run the command 'typeperf'.
     */
    counterSpecifiers?: string[];
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * The number of seconds between consecutive counter measurements (samples).
     */
    samplingFrequencyInSeconds?: number;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: string[];
}

export interface PerformanceCounterConfigurationResponse {
    instance?: string;
    name: string;
    samplingPeriod: string;
}

/**
 * A private endpoint connection
 */
export interface PrivateEndpointConnectionResponse {
    /**
     * Azure resource Id
     */
    id: string;
    /**
     * Azure resource name
     */
    name: string;
    /**
     * Private endpoint which the connection belongs to.
     */
    privateEndpoint?: outputs.insights.PrivateEndpointPropertyResponse;
    /**
     * Connection state of the private endpoint connection.
     */
    privateLinkServiceConnectionState?: outputs.insights.PrivateLinkServiceConnectionStatePropertyResponse;
    /**
     * State of the private endpoint connection.
     */
    provisioningState: string;
    /**
     * Azure resource type
     */
    type: string;
}

/**
 * Private endpoint which the connection belongs to.
 */
export interface PrivateEndpointPropertyResponse {
    /**
     * Resource id of the private endpoint.
     */
    id?: string;
}

/**
 * The private link scope resource reference.
 */
export interface PrivateLinkScopedResourceResponse {
    /**
     * The full resource Id of the private link scope resource.
     */
    resourceId?: string;
    /**
     * The private link scope unique Identifier.
     */
    scopeId?: string;
}

/**
 * State of the private endpoint connection.
 */
export interface PrivateLinkServiceConnectionStatePropertyResponse {
    /**
     * The actions required for private link service connection.
     */
    actionsRequired: string;
    /**
     * The private link service connection description.
     */
    description: string;
    /**
     * The private link service connection status.
     */
    status: string;
}

/**
 * The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
 */
export interface RecurrenceResponse {
    /**
     * the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
     */
    frequency: string;
    /**
     * the scheduling constraints for when the profile begins.
     */
    schedule: outputs.insights.RecurrentScheduleResponse;
}

/**
 * The scheduling constraints for when the profile begins.
 */
export interface RecurrentScheduleResponse {
    /**
     * the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
     */
    days: string[];
    /**
     * A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
     */
    hours: number[];
    /**
     * A collection of minutes at which the profile takes effect at.
     */
    minutes: number[];
    /**
     * the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
     */
    timeZone: string;
}

/**
 * Specifies the retention policy for the log.
 */
export interface RetentionPolicyResponse {
    /**
     * the number of days for the retention in days. A value of 0 will retain the events indefinitely.
     */
    days: number;
    /**
     * a value indicating whether the retention policy is enabled.
     */
    enabled: boolean;
}

/**
 * Specifies the action to send email when the rule condition is evaluated. The discriminator is always RuleEmailAction in this case.
 */
export interface RuleEmailActionResponse {
    /**
     * the list of administrator's custom email addresses to notify of the activation of the alert.
     */
    customEmails?: string[];
    /**
     * specifies the type of the action. There are two types of actions: RuleEmailAction and RuleWebhookAction.
     * Expected value is 'Microsoft.Azure.Management.Insights.Models.RuleEmailAction'.
     */
    odataType: "Microsoft.Azure.Management.Insights.Models.RuleEmailAction";
    /**
     * Whether the administrators (service and co-administrators) of the service should be notified when the alert is activated.
     */
    sendToServiceOwners?: boolean;
}

/**
 * The claims for a rule management event data source.
 */
export interface RuleManagementEventClaimsDataSourceResponse {
    /**
     * the email address.
     */
    emailAddress?: string;
}

/**
 * A rule management event data source. The discriminator fields is always RuleManagementEventDataSource in this case.
 */
export interface RuleManagementEventDataSourceResponse {
    /**
     * the claims.
     */
    claims?: outputs.insights.RuleManagementEventClaimsDataSourceResponse;
    /**
     * the event name.
     */
    eventName?: string;
    /**
     * the event source.
     */
    eventSource?: string;
    /**
     * the legacy resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
     */
    legacyResourceId?: string;
    /**
     * the level.
     */
    level?: string;
    /**
     * the namespace of the metric.
     */
    metricNamespace?: string;
    /**
     * specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
     * Expected value is 'Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource'.
     */
    odataType: "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource";
    /**
     * The name of the operation that should be checked for. If no name is provided, any operation will match.
     */
    operationName?: string;
    /**
     * the resource group name.
     */
    resourceGroupName?: string;
    /**
     * the location of the resource.
     */
    resourceLocation?: string;
    /**
     * the resource provider name.
     */
    resourceProviderName?: string;
    /**
     * the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
     */
    resourceUri?: string;
    /**
     * The status of the operation that should be checked for. If no status is provided, any status will match.
     */
    status?: string;
    /**
     * the substatus.
     */
    subStatus?: string;
}

/**
 * A rule metric data source. The discriminator value is always RuleMetricDataSource in this case.
 */
export interface RuleMetricDataSourceResponse {
    /**
     * the legacy resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
     */
    legacyResourceId?: string;
    /**
     * the name of the metric that defines what the rule monitors.
     */
    metricName?: string;
    /**
     * the namespace of the metric.
     */
    metricNamespace?: string;
    /**
     * specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
     * Expected value is 'Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource'.
     */
    odataType: "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource";
    /**
     * the location of the resource.
     */
    resourceLocation?: string;
    /**
     * the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
     */
    resourceUri?: string;
}

/**
 * Specifies the action to post to service when the rule condition is evaluated. The discriminator is always RuleWebhookAction in this case.
 */
export interface RuleWebhookActionResponse {
    /**
     * specifies the type of the action. There are two types of actions: RuleEmailAction and RuleWebhookAction.
     * Expected value is 'Microsoft.Azure.Management.Insights.Models.RuleWebhookAction'.
     */
    odataType: "Microsoft.Azure.Management.Insights.Models.RuleWebhookAction";
    /**
     * the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
     */
    properties?: {[key: string]: string};
    /**
     * the service uri to Post the notification when the alert activates or resolves.
     */
    serviceUri?: string;
}

/**
 * The parameters for the scaling action.
 */
export interface ScaleActionResponse {
    /**
     * the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
     */
    cooldown: string;
    /**
     * the scale direction. Whether the scaling action increases or decreases the number of instances.
     */
    direction: string;
    /**
     * the type of action that should occur when the scale rule fires.
     */
    type: string;
    /**
     * the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
     */
    value?: string;
}
/**
 * scaleActionResponseProvideDefaults sets the appropriate defaults for ScaleActionResponse
 */
export function scaleActionResponseProvideDefaults(val: ScaleActionResponse): ScaleActionResponse {
    return {
        ...val,
        value: (val.value) ?? "1",
    };
}

/**
 * The number of instances that can be used during this profile.
 */
export interface ScaleCapacityResponse {
    /**
     * the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.
     */
    default: string;
    /**
     * the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.
     */
    maximum: string;
    /**
     * the minimum number of instances for the resource.
     */
    minimum: string;
}

/**
 * Specifies an auto scale rule metric dimension.
 */
export interface ScaleRuleMetricDimensionResponse {
    /**
     * Name of the dimension.
     */
    dimensionName: string;
    /**
     * the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
     */
    operator: string;
    /**
     * list of dimension values. For example: ["App1","App2"].
     */
    values: string[];
}

/**
 * A rule that provide the triggers and parameters for the scaling action.
 */
export interface ScaleRuleResponse {
    /**
     * the trigger that results in a scaling action.
     */
    metricTrigger: outputs.insights.MetricTriggerResponse;
    /**
     * the parameters for the scaling action.
     */
    scaleAction: outputs.insights.ScaleActionResponse;
}
/**
 * scaleRuleResponseProvideDefaults sets the appropriate defaults for ScaleRuleResponse
 */
export function scaleRuleResponseProvideDefaults(val: ScaleRuleResponse): ScaleRuleResponse {
    return {
        ...val,
        scaleAction: outputs.insights.scaleActionResponseProvideDefaults(val.scaleAction),
    };
}

/**
 * Defines how often to run the search and the time interval.
 */
export interface ScheduleResponse {
    /**
     * frequency (in minutes) at which rule condition should be evaluated.
     */
    frequencyInMinutes: number;
    /**
     * Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
     */
    timeWindowInMinutes: number;
}

export interface SinkConfigurationResponse {
    kind: string;
}

/**
 * An SMS receiver.
 */
export interface SmsReceiverResponse {
    /**
     * The country code of the SMS receiver.
     */
    countryCode: string;
    /**
     * The name of the SMS receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
    /**
     * The phone number of the SMS receiver.
     */
    phoneNumber: string;
    /**
     * The status of the receiver.
     */
    status: string;
}

/**
 * Specifies the log search query.
 */
export interface SourceResponse {
    /**
     * List of  Resource referred into query
     */
    authorizedResources?: string[];
    /**
     * The resource uri over which log search query is to be run.
     */
    dataSourceId: string;
    /**
     * Log search query. Required for action type - AlertingAction
     */
    query?: string;
    /**
     * Set value to 'ResultCount' .
     */
    queryType?: string;
}

/**
 * Part of Subscription diagnostic setting. Specifies the settings for a particular log.
 */
export interface SubscriptionLogSettingsResponse {
    /**
     * Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
     */
    category?: string;
    /**
     * a value indicating whether this log is enabled.
     */
    enabled: boolean;
}

/**
 * Definition of which syslog data will be collected and how it will be collected.
 * Only collected from Linux machines.
 */
export interface SyslogDataSourceResponse {
    /**
     * The list of facility names.
     */
    facilityNames?: string[];
    /**
     * The log levels to collect.
     */
    logLevels?: string[];
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: string[];
}

/**
 * A rule condition based on a metric crossing a threshold.
 */
export interface ThresholdRuleConditionResponse {
    /**
     * the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
     */
    dataSource?: outputs.insights.RuleManagementEventDataSourceResponse | outputs.insights.RuleMetricDataSourceResponse;
    /**
     * specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
     * Expected value is 'Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition'.
     */
    odataType: "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition";
    /**
     * the operator used to compare the data and the threshold.
     */
    operator: string;
    /**
     * the threshold value that activates the alert.
     */
    threshold: number;
    /**
     * the time aggregation operator. How the data that are collected should be combined over time. The default value is the PrimaryAggregationType of the Metric.
     */
    timeAggregation?: string;
    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     */
    windowSize?: string;
}

/**
 * A specific date-time for the profile.
 */
export interface TimeWindowResponse {
    /**
     * the end time for the profile in ISO 8601 format.
     */
    end: string;
    /**
     * the start time for the profile in ISO 8601 format.
     */
    start: string;
    /**
     * the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
     */
    timeZone?: string;
}

/**
 * The condition that results in the Log Search rule.
 */
export interface TriggerConditionResponse {
    /**
     * Trigger condition for metric query rule
     */
    metricTrigger?: outputs.insights.LogMetricTriggerResponse;
    /**
     * Result or count threshold based on which rule should be triggered.
     */
    threshold: number;
    /**
     * Evaluation operation for rule - 'GreaterThan' or 'LessThan.
     */
    thresholdOperator: string;
}

/**
 * A voice receiver.
 */
export interface VoiceReceiverResponse {
    /**
     * The country code of the voice receiver.
     */
    countryCode: string;
    /**
     * The name of the voice receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
    /**
     * The phone number of the voice receiver.
     */
    phoneNumber: string;
}

/**
 * Geo-physical location to run a web test from. You must specify one or more locations for the test to run from.
 */
export interface WebTestGeolocationResponse {
    /**
     * Location ID for the webtest to run from.
     */
    location?: string;
}

/**
 * An XML configuration specification for a WebTest.
 */
export interface WebTestPropertiesResponseConfiguration {
    /**
     * The XML specification of a WebTest to run against an application.
     */
    webTest?: string;
}

/**
 * Webhook notification of an autoscale event.
 */
export interface WebhookNotificationResponse {
    /**
     * a property bag of settings. This value can be empty.
     */
    properties?: {[key: string]: string};
    /**
     * the service address to receive the notification.
     */
    serviceUri?: string;
}

/**
 * A webhook receiver.
 */
export interface WebhookReceiverResponse {
    /**
     * Indicates the identifier uri for aad auth.
     */
    identifierUri?: string;
    /**
     * The name of the webhook receiver. Names must be unique across all receivers within an action group.
     */
    name: string;
    /**
     * Indicates the webhook app object Id for aad auth.
     */
    objectId?: string;
    /**
     * The URI where webhooks should be sent.
     */
    serviceUri: string;
    /**
     * Indicates the tenant id for aad auth.
     */
    tenantId?: string;
    /**
     * Indicates whether or not use AAD authentication.
     */
    useAadAuth?: boolean;
    /**
     * Indicates whether to use common alert schema.
     */
    useCommonAlertSchema?: boolean;
}
/**
 * webhookReceiverResponseProvideDefaults sets the appropriate defaults for WebhookReceiverResponse
 */
export function webhookReceiverResponseProvideDefaults(val: WebhookReceiverResponse): WebhookReceiverResponse {
    return {
        ...val,
        useAadAuth: (val.useAadAuth) ?? false,
        useCommonAlertSchema: (val.useCommonAlertSchema) ?? false,
    };
}

/**
 * Specifies the metric alert rule criteria for a web test resource.
 */
export interface WebtestLocationAvailabilityCriteriaResponse {
    /**
     * The Application Insights resource Id.
     */
    componentId: string;
    /**
     * The number of failed locations.
     */
    failedLocationCount: number;
    /**
     * specifies the type of the alert criteria.
     * Expected value is 'Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria'.
     */
    odataType: "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria";
    /**
     * The Application Insights web test Id.
     */
    webTestId: string;
}

/**
 * Definition of which Windows Event Log events will be collected and how they will be collected.
 * Only collected from Windows machines.
 */
export interface WindowsEventLogDataSourceResponse {
    /**
     * A friendly name for the data source. 
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     */
    name?: string;
    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     */
    streams?: string[];
    /**
     * A list of Windows Event Log queries in XPATH format.
     */
    xPathQueries?: string[];
}

/**
 * Customer Managed Identity
 */
export interface WorkbookManagedIdentityResponse {
    /**
     * The identity type.
     */
    type?: string;
    /**
     * Customer Managed Identity
     */
    userAssignedIdentities?: outputs.insights.WorkbookUserAssignedIdentitiesResponse;
}

/**
 * Gallery information for a workbook template.
 */
export interface WorkbookTemplateGalleryResponse {
    /**
     * Category for the gallery.
     */
    category?: string;
    /**
     * Name of the workbook template in the gallery.
     */
    name?: string;
    /**
     * Order of the template within the gallery.
     */
    order?: number;
    /**
     * Azure resource type supported by the gallery.
     */
    resourceType?: string;
    /**
     * Type of workbook supported by the workbook template.
     */
    type?: string;
}

/**
 * Localized template data and gallery information.
 */
export interface WorkbookTemplateLocalizedGalleryResponse {
    /**
     * Workbook galleries supported by the template.
     */
    galleries?: outputs.insights.WorkbookTemplateGalleryResponse[];
    /**
     * Valid JSON object containing workbook template payload.
     */
    templateData?: any;
}

/**
 * Customer Managed Identity
 */
export interface WorkbookUserAssignedIdentitiesResponse {
    /**
     * The client ID of resource.
     */
    clientId: string;
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
}

