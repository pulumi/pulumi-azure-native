// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Define the virtualMachineInstance.
 */
export class VirtualMachineInstance extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualMachineInstance {
        return new VirtualMachineInstance(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:scvmm/v20240601:VirtualMachineInstance';

    /**
     * Returns true if the given object is an instance of VirtualMachineInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineInstance.__pulumiType;
    }

    /**
     * Availability Sets in vm.
     */
    public readonly availabilitySets!: pulumi.Output<outputs.scvmm.v20240601.AvailabilitySetListItemResponse[] | undefined>;
    /**
     * Gets or sets the extended location.
     */
    public readonly extendedLocation!: pulumi.Output<outputs.scvmm.v20240601.ExtendedLocationResponse>;
    /**
     * Hardware properties.
     */
    public readonly hardwareProfile!: pulumi.Output<outputs.scvmm.v20240601.HardwareProfileResponse | undefined>;
    /**
     * Gets the infrastructure profile.
     */
    public readonly infrastructureProfile!: pulumi.Output<outputs.scvmm.v20240601.InfrastructureProfileResponse | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Network properties.
     */
    public readonly networkProfile!: pulumi.Output<outputs.scvmm.v20240601.NetworkProfileResponse | undefined>;
    /**
     * OS properties.
     */
    public readonly osProfile!: pulumi.Output<outputs.scvmm.v20240601.OsProfileForVmInstanceResponse | undefined>;
    /**
     * Gets the power state of the virtual machine.
     */
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    /**
     * Provisioning state of the resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Storage properties.
     */
    public readonly storageProfile!: pulumi.Output<outputs.scvmm.v20240601.StorageProfileResponse | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.scvmm.v20240601.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a VirtualMachineInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineInstanceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.extendedLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extendedLocation'");
            }
            if ((!args || args.resourceUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceUri'");
            }
            resourceInputs["availabilitySets"] = args ? args.availabilitySets : undefined;
            resourceInputs["extendedLocation"] = args ? args.extendedLocation : undefined;
            resourceInputs["hardwareProfile"] = args ? args.hardwareProfile : undefined;
            resourceInputs["infrastructureProfile"] = args ? args.infrastructureProfile : undefined;
            resourceInputs["networkProfile"] = args ? args.networkProfile : undefined;
            resourceInputs["osProfile"] = args ? args.osProfile : undefined;
            resourceInputs["resourceUri"] = args ? args.resourceUri : undefined;
            resourceInputs["storageProfile"] = args ? args.storageProfile : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["availabilitySets"] = undefined /*out*/;
            resourceInputs["extendedLocation"] = undefined /*out*/;
            resourceInputs["hardwareProfile"] = undefined /*out*/;
            resourceInputs["infrastructureProfile"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkProfile"] = undefined /*out*/;
            resourceInputs["osProfile"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["storageProfile"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:scvmm:VirtualMachineInstance" }, { type: "azure-native:scvmm/v20230401preview:VirtualMachineInstance" }, { type: "azure-native:scvmm/v20231007:VirtualMachineInstance" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(VirtualMachineInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VirtualMachineInstance resource.
 */
export interface VirtualMachineInstanceArgs {
    /**
     * Availability Sets in vm.
     */
    availabilitySets?: pulumi.Input<pulumi.Input<inputs.scvmm.v20240601.AvailabilitySetListItemArgs>[]>;
    /**
     * Gets or sets the extended location.
     */
    extendedLocation: pulumi.Input<inputs.scvmm.v20240601.ExtendedLocationArgs>;
    /**
     * Hardware properties.
     */
    hardwareProfile?: pulumi.Input<inputs.scvmm.v20240601.HardwareProfileArgs>;
    /**
     * Gets the infrastructure profile.
     */
    infrastructureProfile?: pulumi.Input<inputs.scvmm.v20240601.InfrastructureProfileArgs>;
    /**
     * Network properties.
     */
    networkProfile?: pulumi.Input<inputs.scvmm.v20240601.NetworkProfileArgs>;
    /**
     * OS properties.
     */
    osProfile?: pulumi.Input<inputs.scvmm.v20240601.OsProfileForVmInstanceArgs>;
    /**
     * The fully qualified Azure Resource manager identifier of the resource.
     */
    resourceUri: pulumi.Input<string>;
    /**
     * Storage properties.
     */
    storageProfile?: pulumi.Input<inputs.scvmm.v20240601.StorageProfileArgs>;
}
