// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The VirtualMachines resource definition.
 *
 * Uses Azure REST API version 2023-04-01-preview. In version 2.x of the Azure Native provider, it used API version 2022-05-21-preview.
 *
 * Other available API versions: 2022-05-21-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native scvmm [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:scvmm:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    /**
     * Availability Sets in vm.
     */
    declare public readonly availabilitySets: pulumi.Output<outputs.scvmm.VirtualMachinePropertiesResponseAvailabilitySets[] | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Type of checkpoint supported for the vm.
     */
    declare public readonly checkpointType: pulumi.Output<string | undefined>;
    /**
     * Checkpoints in the vm.
     */
    declare public readonly checkpoints: pulumi.Output<outputs.scvmm.CheckpointResponse[] | undefined>;
    /**
     * ARM Id of the cloud resource to use for deploying the vm.
     */
    declare public readonly cloudId: pulumi.Output<string | undefined>;
    /**
     * The extended location.
     */
    declare public readonly extendedLocation: pulumi.Output<outputs.scvmm.ExtendedLocationResponse>;
    /**
     * Gets or sets the generation for the vm.
     */
    declare public readonly generation: pulumi.Output<number | undefined>;
    /**
     * Guest agent status properties.
     */
    declare public readonly guestAgentProfile: pulumi.Output<outputs.scvmm.GuestAgentProfileResponse | undefined>;
    /**
     * Hardware properties.
     */
    declare public readonly hardwareProfile: pulumi.Output<outputs.scvmm.HardwareProfileResponse | undefined>;
    /**
     * The identity of the resource.
     */
    declare public readonly identity: pulumi.Output<outputs.scvmm.IdentityResponse | undefined>;
    /**
     * Gets or sets the inventory Item ID for the resource.
     */
    declare public readonly inventoryItemId: pulumi.Output<string | undefined>;
    /**
     * Last restored checkpoint in the vm.
     */
    declare public /*out*/ readonly lastRestoredVMCheckpoint: pulumi.Output<outputs.scvmm.CheckpointResponse>;
    /**
     * Gets or sets the location.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Resource Name
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Network properties.
     */
    declare public readonly networkProfile: pulumi.Output<outputs.scvmm.NetworkProfileResponse | undefined>;
    /**
     * OS properties.
     */
    declare public readonly osProfile: pulumi.Output<outputs.scvmm.OsProfileResponse | undefined>;
    /**
     * Gets the power state of the virtual machine.
     */
    declare public /*out*/ readonly powerState: pulumi.Output<string>;
    /**
     * Gets or sets the provisioning state.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * Storage properties.
     */
    declare public readonly storageProfile: pulumi.Output<outputs.scvmm.StorageProfileResponse | undefined>;
    /**
     * The system data.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.scvmm.SystemDataResponse>;
    /**
     * Resource tags
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ARM Id of the template resource to use for deploying the vm.
     */
    declare public readonly templateId: pulumi.Output<string | undefined>;
    /**
     * Resource Type
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * Unique ID of the virtual machine.
     */
    declare public readonly uuid: pulumi.Output<string | undefined>;
    /**
     * VMName is the name of VM on the SCVMM server.
     */
    declare public readonly vmName: pulumi.Output<string | undefined>;
    /**
     * ARM Id of the vmmServer resource in which this resource resides.
     */
    declare public readonly vmmServerId: pulumi.Output<string | undefined>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.extendedLocation === undefined && !opts.urn) {
                throw new Error("Missing required property 'extendedLocation'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["availabilitySets"] = args?.availabilitySets;
            resourceInputs["checkpointType"] = args?.checkpointType;
            resourceInputs["checkpoints"] = args?.checkpoints;
            resourceInputs["cloudId"] = args?.cloudId;
            resourceInputs["extendedLocation"] = args?.extendedLocation;
            resourceInputs["generation"] = args?.generation;
            resourceInputs["guestAgentProfile"] = args?.guestAgentProfile;
            resourceInputs["hardwareProfile"] = args?.hardwareProfile;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["inventoryItemId"] = args?.inventoryItemId;
            resourceInputs["location"] = args?.location;
            resourceInputs["networkProfile"] = args?.networkProfile;
            resourceInputs["osProfile"] = args?.osProfile;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["storageProfile"] = args?.storageProfile;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateId"] = args?.templateId;
            resourceInputs["uuid"] = args?.uuid;
            resourceInputs["virtualMachineName"] = args?.virtualMachineName;
            resourceInputs["vmName"] = args?.vmName;
            resourceInputs["vmmServerId"] = args?.vmmServerId;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["lastRestoredVMCheckpoint"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["availabilitySets"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["checkpointType"] = undefined /*out*/;
            resourceInputs["checkpoints"] = undefined /*out*/;
            resourceInputs["cloudId"] = undefined /*out*/;
            resourceInputs["extendedLocation"] = undefined /*out*/;
            resourceInputs["generation"] = undefined /*out*/;
            resourceInputs["guestAgentProfile"] = undefined /*out*/;
            resourceInputs["hardwareProfile"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["inventoryItemId"] = undefined /*out*/;
            resourceInputs["lastRestoredVMCheckpoint"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkProfile"] = undefined /*out*/;
            resourceInputs["osProfile"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["storageProfile"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["templateId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
            resourceInputs["vmName"] = undefined /*out*/;
            resourceInputs["vmmServerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:scvmm/v20200605preview:VirtualMachine" }, { type: "azure-native:scvmm/v20220521preview:VirtualMachine" }, { type: "azure-native:scvmm/v20230401preview:VirtualMachine" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    /**
     * Availability Sets in vm.
     */
    availabilitySets?: pulumi.Input<pulumi.Input<inputs.scvmm.VirtualMachinePropertiesAvailabilitySetsArgs>[]>;
    /**
     * Type of checkpoint supported for the vm.
     */
    checkpointType?: pulumi.Input<string>;
    /**
     * Checkpoints in the vm.
     */
    checkpoints?: pulumi.Input<pulumi.Input<inputs.scvmm.CheckpointArgs>[]>;
    /**
     * ARM Id of the cloud resource to use for deploying the vm.
     */
    cloudId?: pulumi.Input<string>;
    /**
     * The extended location.
     */
    extendedLocation: pulumi.Input<inputs.scvmm.ExtendedLocationArgs>;
    /**
     * Gets or sets the generation for the vm.
     */
    generation?: pulumi.Input<number>;
    /**
     * Guest agent status properties.
     */
    guestAgentProfile?: pulumi.Input<inputs.scvmm.GuestAgentProfileArgs>;
    /**
     * Hardware properties.
     */
    hardwareProfile?: pulumi.Input<inputs.scvmm.HardwareProfileArgs>;
    /**
     * The identity of the resource.
     */
    identity?: pulumi.Input<inputs.scvmm.IdentityArgs>;
    /**
     * Gets or sets the inventory Item ID for the resource.
     */
    inventoryItemId?: pulumi.Input<string>;
    /**
     * Gets or sets the location.
     */
    location?: pulumi.Input<string>;
    /**
     * Network properties.
     */
    networkProfile?: pulumi.Input<inputs.scvmm.NetworkProfileArgs>;
    /**
     * OS properties.
     */
    osProfile?: pulumi.Input<inputs.scvmm.OsProfileArgs>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Storage properties.
     */
    storageProfile?: pulumi.Input<inputs.scvmm.StorageProfileArgs>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ARM Id of the template resource to use for deploying the vm.
     */
    templateId?: pulumi.Input<string>;
    /**
     * Unique ID of the virtual machine.
     */
    uuid?: pulumi.Input<string>;
    /**
     * Name of the VirtualMachine.
     */
    virtualMachineName?: pulumi.Input<string>;
    /**
     * VMName is the name of VM on the SCVMM server.
     */
    vmName?: pulumi.Input<string>;
    /**
     * ARM Id of the vmmServer resource in which this resource resides.
     */
    vmmServerId?: pulumi.Input<string>;
}
