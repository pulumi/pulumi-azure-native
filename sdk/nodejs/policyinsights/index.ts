// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./getRemediationAtManagementGroup";
export * from "./getRemediationAtResource";
export * from "./getRemediationAtResourceGroup";
export * from "./getRemediationAtSubscription";
export * from "./listRemediationDeploymentsAtManagementGroup";
export * from "./listRemediationDeploymentsAtResource";
export * from "./listRemediationDeploymentsAtResourceGroup";
export * from "./listRemediationDeploymentsAtSubscription";
export * from "./remediationAtManagementGroup";
export * from "./remediationAtResource";
export * from "./remediationAtResourceGroup";
export * from "./remediationAtSubscription";

// Export enums:
export * from "../types/enums/policyinsights";

// Export sub-modules:
import * as latest from "./latest";
import * as v20180701preview from "./v20180701preview";
import * as v20190701 from "./v20190701";
import * as v20210101 from "./v20210101";

export {
    latest,
    v20180701preview,
    v20190701,
    v20210101,
};

// Import resources to register:
import { RemediationAtManagementGroup } from "./remediationAtManagementGroup";
import { RemediationAtResource } from "./remediationAtResource";
import { RemediationAtResourceGroup } from "./remediationAtResourceGroup";
import { RemediationAtSubscription } from "./remediationAtSubscription";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-nextgen:policyinsights:RemediationAtManagementGroup":
                return new RemediationAtManagementGroup(name, <any>undefined, { urn })
            case "azure-nextgen:policyinsights:RemediationAtResource":
                return new RemediationAtResource(name, <any>undefined, { urn })
            case "azure-nextgen:policyinsights:RemediationAtResourceGroup":
                return new RemediationAtResourceGroup(name, <any>undefined, { urn })
            case "azure-nextgen:policyinsights:RemediationAtSubscription":
                return new RemediationAtSubscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-nextgen", "policyinsights", _module)
