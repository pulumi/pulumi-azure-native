// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The remediation definition.
 *
 * Uses Azure REST API version 2024-10-01. In version 2.x of the Azure Native provider, it used API version 2021-10-01.
 *
 * Other available API versions: 2021-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native policyinsights [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class RemediationAtResourceGroup extends pulumi.CustomResource {
    /**
     * Get an existing RemediationAtResourceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RemediationAtResourceGroup {
        return new RemediationAtResourceGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:policyinsights:RemediationAtResourceGroup';

    /**
     * Returns true if the given object is an instance of RemediationAtResourceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemediationAtResourceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemediationAtResourceGroup.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The remediation correlation Id. Can be used to find events related to the remediation in the activity log.
     */
    declare public /*out*/ readonly correlationId: pulumi.Output<string>;
    /**
     * The time at which the remediation was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * The deployment status summary for all deployments created by the remediation.
     */
    declare public /*out*/ readonly deploymentStatus: pulumi.Output<outputs.policyinsights.RemediationDeploymentSummaryResponse>;
    /**
     * The remediation failure threshold settings
     */
    declare public readonly failureThreshold: pulumi.Output<outputs.policyinsights.RemediationPropertiesResponseFailureThreshold | undefined>;
    /**
     * The filters that will be applied to determine which resources to remediate.
     */
    declare public readonly filters: pulumi.Output<outputs.policyinsights.RemediationFiltersResponse | undefined>;
    /**
     * The time at which the remediation was last updated.
     */
    declare public /*out*/ readonly lastUpdatedOn: pulumi.Output<string>;
    /**
     * The name of the remediation.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
     */
    declare public readonly parallelDeployments: pulumi.Output<number | undefined>;
    /**
     * The resource ID of the policy assignment that should be remediated.
     */
    declare public readonly policyAssignmentId: pulumi.Output<string | undefined>;
    /**
     * The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
     */
    declare public readonly policyDefinitionReferenceId: pulumi.Output<string | undefined>;
    /**
     * The status of the remediation. This refers to the entire remediation task, not individual deployments. Allowed values are Evaluating, Canceled, Cancelling, Failed, Complete, or Succeeded.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
     */
    declare public readonly resourceCount: pulumi.Output<number | undefined>;
    /**
     * The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
     */
    declare public readonly resourceDiscoveryMode: pulumi.Output<string | undefined>;
    /**
     * The remediation status message. Provides additional details regarding the state of the remediation.
     */
    declare public /*out*/ readonly statusMessage: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.policyinsights.SystemDataResponse>;
    /**
     * The type of the remediation.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a RemediationAtResourceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemediationAtResourceGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["failureThreshold"] = args?.failureThreshold;
            resourceInputs["filters"] = args?.filters;
            resourceInputs["parallelDeployments"] = args?.parallelDeployments;
            resourceInputs["policyAssignmentId"] = args?.policyAssignmentId;
            resourceInputs["policyDefinitionReferenceId"] = args?.policyDefinitionReferenceId;
            resourceInputs["remediationName"] = args?.remediationName;
            resourceInputs["resourceCount"] = args?.resourceCount;
            resourceInputs["resourceDiscoveryMode"] = args?.resourceDiscoveryMode;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["correlationId"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["deploymentStatus"] = undefined /*out*/;
            resourceInputs["lastUpdatedOn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["correlationId"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["deploymentStatus"] = undefined /*out*/;
            resourceInputs["failureThreshold"] = undefined /*out*/;
            resourceInputs["filters"] = undefined /*out*/;
            resourceInputs["lastUpdatedOn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parallelDeployments"] = undefined /*out*/;
            resourceInputs["policyAssignmentId"] = undefined /*out*/;
            resourceInputs["policyDefinitionReferenceId"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceCount"] = undefined /*out*/;
            resourceInputs["resourceDiscoveryMode"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:policyinsights/v20180701preview:RemediationAtResourceGroup" }, { type: "azure-native:policyinsights/v20190701:RemediationAtResourceGroup" }, { type: "azure-native:policyinsights/v20211001:RemediationAtResourceGroup" }, { type: "azure-native:policyinsights/v20241001:RemediationAtResourceGroup" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(RemediationAtResourceGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RemediationAtResourceGroup resource.
 */
export interface RemediationAtResourceGroupArgs {
    /**
     * The remediation failure threshold settings
     */
    failureThreshold?: pulumi.Input<inputs.policyinsights.RemediationPropertiesFailureThresholdArgs>;
    /**
     * The filters that will be applied to determine which resources to remediate.
     */
    filters?: pulumi.Input<inputs.policyinsights.RemediationFiltersArgs>;
    /**
     * Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
     */
    parallelDeployments?: pulumi.Input<number>;
    /**
     * The resource ID of the policy assignment that should be remediated.
     */
    policyAssignmentId?: pulumi.Input<string>;
    /**
     * The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
     */
    policyDefinitionReferenceId?: pulumi.Input<string>;
    /**
     * The name of the remediation.
     */
    remediationName?: pulumi.Input<string>;
    /**
     * Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
     */
    resourceCount?: pulumi.Input<number>;
    /**
     * The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
     */
    resourceDiscoveryMode?: pulumi.Input<string | enums.policyinsights.ResourceDiscoveryMode>;
    /**
     * Resource group name.
     */
    resourceGroupName: pulumi.Input<string>;
}
