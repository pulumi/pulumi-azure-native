// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * The remediation definition.
 */
export class RemediationAtResource extends pulumi.CustomResource {
    /**
     * Get an existing RemediationAtResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RemediationAtResource {
        return new RemediationAtResource(name, undefined, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:policyinsights/v20190701:RemediationAtResource';

    /**
     * Returns true if the given object is an instance of RemediationAtResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemediationAtResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemediationAtResource.__pulumiType;
    }

    /**
     * The name of the remediation.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Properties for the remediation.
     */
    public readonly properties!: pulumi.Output<outputs.policyinsights.v20190701.RemediationPropertiesResponse>;
    /**
     * The type of the remediation.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a RemediationAtResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemediationAtResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, state: undefined, opts: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemediationAtResourceArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState as RemediationAtResourceArgs | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.resourceId === undefined) {
                throw new Error("Missing required property 'resourceId'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["properties"] = args ? args.properties : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RemediationAtResource.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a RemediationAtResource resource.
 */
export interface RemediationAtResourceArgs {
    /**
     * The name of the remediation.
     */
    readonly name: pulumi.Input<string>;
    /**
     * Properties for the remediation.
     */
    readonly properties?: pulumi.Input<inputs.policyinsights.v20190701.RemediationProperties>;
    /**
     * Resource ID.
     */
    readonly resourceId: pulumi.Input<string>;
}
