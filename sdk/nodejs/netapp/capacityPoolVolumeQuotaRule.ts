// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Quota Rule of a Volume
 *
 * Uses Azure REST API version 2024-09-01.
 *
 * Other available API versions: 2022-11-01, 2022-11-01-preview, 2023-05-01, 2023-05-01-preview, 2023-07-01, 2023-07-01-preview, 2023-11-01, 2023-11-01-preview, 2024-01-01, 2024-03-01, 2024-03-01-preview, 2024-05-01, 2024-05-01-preview, 2024-07-01, 2024-07-01-preview, 2024-09-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class CapacityPoolVolumeQuotaRule extends pulumi.CustomResource {
    /**
     * Get an existing CapacityPoolVolumeQuotaRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CapacityPoolVolumeQuotaRule {
        return new CapacityPoolVolumeQuotaRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:netapp:CapacityPoolVolumeQuotaRule';

    /**
     * Returns true if the given object is an instance of CapacityPoolVolumeQuotaRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CapacityPoolVolumeQuotaRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CapacityPoolVolumeQuotaRule.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Gets the status of the VolumeQuotaRule at the time the operation was called.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Size of quota
     */
    public readonly quotaSizeInKiBs!: pulumi.Output<number | undefined>;
    /**
     * UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running <wmic useraccount where name='user-name' get sid>
     */
    public readonly quotaTarget!: pulumi.Output<string | undefined>;
    /**
     * Type of quota
     */
    public readonly quotaType!: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.netapp.SystemDataResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a CapacityPoolVolumeQuotaRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CapacityPoolVolumeQuotaRuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.poolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.volumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeName'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["quotaSizeInKiBs"] = args ? args.quotaSizeInKiBs : undefined;
            resourceInputs["quotaTarget"] = args ? args.quotaTarget : undefined;
            resourceInputs["quotaType"] = args ? args.quotaType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["volumeName"] = args ? args.volumeName : undefined;
            resourceInputs["volumeQuotaRuleName"] = args ? args.volumeQuotaRuleName : undefined;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["quotaSizeInKiBs"] = undefined /*out*/;
            resourceInputs["quotaTarget"] = undefined /*out*/;
            resourceInputs["quotaType"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:netapp/v20220101:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20220301:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20220501:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20220901:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20221101:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20221101:VolumeQuotaRule" }, { type: "azure-native:netapp/v20221101preview:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20221101preview:VolumeQuotaRule" }, { type: "azure-native:netapp/v20230501:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20230501:VolumeQuotaRule" }, { type: "azure-native:netapp/v20230501preview:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20230501preview:VolumeQuotaRule" }, { type: "azure-native:netapp/v20230701:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20230701:VolumeQuotaRule" }, { type: "azure-native:netapp/v20230701preview:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20230701preview:VolumeQuotaRule" }, { type: "azure-native:netapp/v20231101:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20231101:VolumeQuotaRule" }, { type: "azure-native:netapp/v20231101preview:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20231101preview:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240101:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20240101:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240301:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20240301:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240301preview:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20240301preview:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240501:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20240501:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240501preview:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20240501preview:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240701:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20240701:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240701preview:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20240701preview:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240901:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp/v20240901:VolumeQuotaRule" }, { type: "azure-native:netapp/v20240901preview:CapacityPoolVolumeQuotaRule" }, { type: "azure-native:netapp:VolumeQuotaRule" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(CapacityPoolVolumeQuotaRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CapacityPoolVolumeQuotaRule resource.
 */
export interface CapacityPoolVolumeQuotaRuleArgs {
    /**
     * The name of the NetApp account
     */
    accountName: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the capacity pool
     */
    poolName: pulumi.Input<string>;
    /**
     * Size of quota
     */
    quotaSizeInKiBs?: pulumi.Input<number>;
    /**
     * UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running <wmic useraccount where name='user-name' get sid>
     */
    quotaTarget?: pulumi.Input<string>;
    /**
     * Type of quota
     */
    quotaType?: pulumi.Input<string | enums.netapp.Type>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the volume
     */
    volumeName: pulumi.Input<string>;
    /**
     * The name of volume quota rule
     */
    volumeQuotaRuleName?: pulumi.Input<string>;
}
