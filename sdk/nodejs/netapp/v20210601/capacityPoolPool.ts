// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Capacity pool resource
 */
export class CapacityPoolPool extends pulumi.CustomResource {
    /**
     * Get an existing CapacityPoolPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CapacityPoolPool {
        return new CapacityPoolPool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:netapp/v20210601:CapacityPoolPool';

    /**
     * Returns true if the given object is an instance of CapacityPoolPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CapacityPoolPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CapacityPoolPool.__pulumiType;
    }

    /**
     * If enabled (true) the pool can contain cool Access enabled volumes.
     */
    public readonly coolAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
     */
    public readonly encryptionType!: pulumi.Output<string | undefined>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Resource location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * UUID v4 used to identify the Pool
     */
    public /*out*/ readonly poolId!: pulumi.Output<string>;
    /**
     * Azure lifecycle management
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The qos type of the pool
     */
    public readonly qosType!: pulumi.Output<string | undefined>;
    /**
     * The service level of the file system
     */
    public readonly serviceLevel!: pulumi.Output<string>;
    /**
     * Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Total throughput of pool in Mibps
     */
    public /*out*/ readonly totalThroughputMibps!: pulumi.Output<number>;
    /**
     * Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Utilized throughput of pool in Mibps
     */
    public /*out*/ readonly utilizedThroughputMibps!: pulumi.Output<number>;

    /**
     * Create a CapacityPoolPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CapacityPoolPoolArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serviceLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLevel'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["coolAccess"] = (args ? args.coolAccess : undefined) ?? false;
            resourceInputs["encryptionType"] = (args ? args.encryptionType : undefined) ?? "Single";
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["qosType"] = (args ? args.qosType : undefined) ?? "Auto";
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["poolId"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["totalThroughputMibps"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["utilizedThroughputMibps"] = undefined /*out*/;
        } else {
            resourceInputs["coolAccess"] = undefined /*out*/;
            resourceInputs["encryptionType"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["poolId"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["qosType"] = undefined /*out*/;
            resourceInputs["serviceLevel"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["totalThroughputMibps"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["utilizedThroughputMibps"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:netapp:CapacityPoolPool" }, { type: "azure-native:netapp/v20170815:CapacityPoolPool" }, { type: "azure-native:netapp/v20190501:CapacityPoolPool" }, { type: "azure-native:netapp/v20190601:CapacityPoolPool" }, { type: "azure-native:netapp/v20190701:CapacityPoolPool" }, { type: "azure-native:netapp/v20190801:CapacityPoolPool" }, { type: "azure-native:netapp/v20191001:CapacityPoolPool" }, { type: "azure-native:netapp/v20191101:CapacityPoolPool" }, { type: "azure-native:netapp/v20200201:CapacityPoolPool" }, { type: "azure-native:netapp/v20200301:CapacityPoolPool" }, { type: "azure-native:netapp/v20200501:CapacityPoolPool" }, { type: "azure-native:netapp/v20200601:CapacityPoolPool" }, { type: "azure-native:netapp/v20200701:CapacityPoolPool" }, { type: "azure-native:netapp/v20200801:CapacityPoolPool" }, { type: "azure-native:netapp/v20200901:CapacityPoolPool" }, { type: "azure-native:netapp/v20201101:CapacityPoolPool" }, { type: "azure-native:netapp/v20201201:CapacityPoolPool" }, { type: "azure-native:netapp/v20210201:CapacityPoolPool" }, { type: "azure-native:netapp/v20210401:CapacityPoolPool" }, { type: "azure-native:netapp/v20210401preview:CapacityPoolPool" }, { type: "azure-native:netapp/v20210801:CapacityPoolPool" }, { type: "azure-native:netapp/v20211001:CapacityPoolPool" }, { type: "azure-native:netapp/v20220101:CapacityPoolPool" }, { type: "azure-native:netapp/v20220301:CapacityPoolPool" }, { type: "azure-native:netapp/v20220501:CapacityPoolPool" }, { type: "azure-native:netapp/v20220901:CapacityPoolPool" }, { type: "azure-native:netapp/v20221101:CapacityPoolPool" }, { type: "azure-native:netapp/v20221101preview:CapacityPoolPool" }, { type: "azure-native:netapp/v20230501:CapacityPoolPool" }, { type: "azure-native:netapp/v20230501preview:CapacityPoolPool" }, { type: "azure-native:netapp/v20230701:CapacityPoolPool" }, { type: "azure-native:netapp/v20230701preview:CapacityPoolPool" }, { type: "azure-native:netapp/v20231101:CapacityPoolPool" }, { type: "azure-native:netapp/v20231101preview:CapacityPoolPool" }, { type: "azure-native:netapp/v20240101:CapacityPoolPool" }, { type: "azure-native:netapp/v20240301:CapacityPoolPool" }, { type: "azure-native:netapp/v20240301preview:CapacityPoolPool" }, { type: "azure-native:netapp/v20240501:CapacityPoolPool" }, { type: "azure-native:netapp/v20240501preview:CapacityPoolPool" }, { type: "azure-native:netapp/v20240701:CapacityPoolPool" }, { type: "azure-native:netapp/v20240701preview:CapacityPoolPool" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(CapacityPoolPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CapacityPoolPool resource.
 */
export interface CapacityPoolPoolArgs {
    /**
     * The name of the NetApp account
     */
    accountName: pulumi.Input<string>;
    /**
     * If enabled (true) the pool can contain cool Access enabled volumes.
     */
    coolAccess?: pulumi.Input<boolean>;
    /**
     * Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
     */
    encryptionType?: pulumi.Input<string | enums.netapp.v20210601.EncryptionType>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the capacity pool
     */
    poolName?: pulumi.Input<string>;
    /**
     * The qos type of the pool
     */
    qosType?: pulumi.Input<string | enums.netapp.v20210601.QosType>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The service level of the file system
     */
    serviceLevel: pulumi.Input<string | enums.netapp.v20210601.ServiceLevel>;
    /**
     * Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
     */
    size: pulumi.Input<number>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
