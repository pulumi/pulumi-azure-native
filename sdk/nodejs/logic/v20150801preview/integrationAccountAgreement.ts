// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

export class IntegrationAccountAgreement extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAccountAgreement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IntegrationAccountAgreement {
        return new IntegrationAccountAgreement(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:logic/v20150801preview:IntegrationAccountAgreement';

    /**
     * Returns true if the given object is an instance of IntegrationAccountAgreement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAccountAgreement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAccountAgreement.__pulumiType;
    }

    /**
     * The agreement type.
     */
    public readonly agreementType!: pulumi.Output<string | undefined>;
    /**
     * The changed time.
     */
    public /*out*/ readonly changedTime!: pulumi.Output<string>;
    /**
     * The agreement content.
     */
    public readonly content!: pulumi.Output<outputs.logic.v20150801preview.AgreementContentResponse | undefined>;
    /**
     * The created time.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The guest identity.
     */
    public readonly guestIdentity!: pulumi.Output<outputs.logic.v20150801preview.BusinessIdentityResponse | undefined>;
    /**
     * The guest partner.
     */
    public readonly guestPartner!: pulumi.Output<string | undefined>;
    /**
     * The host identity.
     */
    public readonly hostIdentity!: pulumi.Output<outputs.logic.v20150801preview.BusinessIdentityResponse | undefined>;
    /**
     * The host partner.
     */
    public readonly hostPartner!: pulumi.Output<string | undefined>;
    /**
     * The resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The metadata.
     */
    public readonly metadata!: pulumi.Output<any | undefined>;
    /**
     * The resource name.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource type.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a IntegrationAccountAgreement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationAccountAgreementArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.agreementName === undefined) {
                throw new Error("Missing required property 'agreementName'");
            }
            if (!args || args.integrationAccountName === undefined) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["agreementName"] = args ? args.agreementName : undefined;
            inputs["agreementType"] = args ? args.agreementType : undefined;
            inputs["content"] = args ? args.content : undefined;
            inputs["guestIdentity"] = args ? args.guestIdentity : undefined;
            inputs["guestPartner"] = args ? args.guestPartner : undefined;
            inputs["hostIdentity"] = args ? args.hostIdentity : undefined;
            inputs["hostPartner"] = args ? args.hostPartner : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["integrationAccountName"] = args ? args.integrationAccountName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["changedTime"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
        } else {
            inputs["agreementType"] = undefined /*out*/;
            inputs["changedTime"] = undefined /*out*/;
            inputs["content"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["guestIdentity"] = undefined /*out*/;
            inputs["guestPartner"] = undefined /*out*/;
            inputs["hostIdentity"] = undefined /*out*/;
            inputs["hostPartner"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:logic/latest:IntegrationAccountAgreement" }, { type: "azure-nextgen:logic/v20160601:IntegrationAccountAgreement" }, { type: "azure-nextgen:logic/v20180701preview:IntegrationAccountAgreement" }, { type: "azure-nextgen:logic/v20190501:IntegrationAccountAgreement" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(IntegrationAccountAgreement.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a IntegrationAccountAgreement resource.
 */
export interface IntegrationAccountAgreementArgs {
    /**
     * The integration account agreement name.
     */
    readonly agreementName: pulumi.Input<string>;
    /**
     * The agreement type.
     */
    readonly agreementType?: pulumi.Input<string>;
    /**
     * The agreement content.
     */
    readonly content?: pulumi.Input<inputs.logic.v20150801preview.AgreementContent>;
    /**
     * The guest identity.
     */
    readonly guestIdentity?: pulumi.Input<inputs.logic.v20150801preview.BusinessIdentity>;
    /**
     * The guest partner.
     */
    readonly guestPartner?: pulumi.Input<string>;
    /**
     * The host identity.
     */
    readonly hostIdentity?: pulumi.Input<inputs.logic.v20150801preview.BusinessIdentity>;
    /**
     * The host partner.
     */
    readonly hostPartner?: pulumi.Input<string>;
    /**
     * The resource id.
     */
    readonly id?: pulumi.Input<string>;
    /**
     * The integration account name.
     */
    readonly integrationAccountName: pulumi.Input<string>;
    /**
     * The resource location.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The metadata.
     */
    readonly metadata?: any;
    /**
     * The resource name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The resource group name.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The resource tags.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource type.
     */
    readonly type?: pulumi.Input<string>;
}
