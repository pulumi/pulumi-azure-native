// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The integration account agreement.
 *
 * Uses Azure REST API version 2019-05-01. In version 2.x of the Azure Native provider, it used API version 2019-05-01.
 *
 * Other available API versions: 2015-08-01-preview, 2018-07-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native logic [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class IntegrationAccountAgreement extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAccountAgreement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IntegrationAccountAgreement {
        return new IntegrationAccountAgreement(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:logic:IntegrationAccountAgreement';

    /**
     * Returns true if the given object is an instance of IntegrationAccountAgreement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAccountAgreement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAccountAgreement.__pulumiType;
    }

    /**
     * The agreement type.
     */
    declare public readonly agreementType: pulumi.Output<string>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The changed time.
     */
    declare public /*out*/ readonly changedTime: pulumi.Output<string>;
    /**
     * The agreement content.
     */
    declare public readonly content: pulumi.Output<outputs.logic.AgreementContentResponse>;
    /**
     * The created time.
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * The business identity of the guest partner.
     */
    declare public readonly guestIdentity: pulumi.Output<outputs.logic.BusinessIdentityResponse>;
    /**
     * The integration account partner that is set as guest partner for this agreement.
     */
    declare public readonly guestPartner: pulumi.Output<string>;
    /**
     * The business identity of the host partner.
     */
    declare public readonly hostIdentity: pulumi.Output<outputs.logic.BusinessIdentityResponse>;
    /**
     * The integration account partner that is set as host partner for this agreement.
     */
    declare public readonly hostPartner: pulumi.Output<string>;
    /**
     * The resource location.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The metadata.
     */
    declare public readonly metadata: pulumi.Output<any | undefined>;
    /**
     * Gets the resource name.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Gets the resource type.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a IntegrationAccountAgreement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationAccountAgreementArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.agreementType === undefined && !opts.urn) {
                throw new Error("Missing required property 'agreementType'");
            }
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.guestIdentity === undefined && !opts.urn) {
                throw new Error("Missing required property 'guestIdentity'");
            }
            if (args?.guestPartner === undefined && !opts.urn) {
                throw new Error("Missing required property 'guestPartner'");
            }
            if (args?.hostIdentity === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostIdentity'");
            }
            if (args?.hostPartner === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostPartner'");
            }
            if (args?.integrationAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["agreementName"] = args?.agreementName;
            resourceInputs["agreementType"] = args?.agreementType;
            resourceInputs["content"] = args?.content;
            resourceInputs["guestIdentity"] = args?.guestIdentity;
            resourceInputs["guestPartner"] = args?.guestPartner;
            resourceInputs["hostIdentity"] = args?.hostIdentity;
            resourceInputs["hostPartner"] = args?.hostPartner;
            resourceInputs["integrationAccountName"] = args?.integrationAccountName;
            resourceInputs["location"] = args?.location;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["changedTime"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["agreementType"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["changedTime"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["guestIdentity"] = undefined /*out*/;
            resourceInputs["guestPartner"] = undefined /*out*/;
            resourceInputs["hostIdentity"] = undefined /*out*/;
            resourceInputs["hostPartner"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:logic/v20150801preview:IntegrationAccountAgreement" }, { type: "azure-native:logic/v20160601:Agreement" }, { type: "azure-native:logic/v20160601:IntegrationAccountAgreement" }, { type: "azure-native:logic/v20180701preview:IntegrationAccountAgreement" }, { type: "azure-native:logic/v20190501:IntegrationAccountAgreement" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(IntegrationAccountAgreement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a IntegrationAccountAgreement resource.
 */
export interface IntegrationAccountAgreementArgs {
    /**
     * The integration account agreement name.
     */
    agreementName?: pulumi.Input<string>;
    /**
     * The agreement type.
     */
    agreementType: pulumi.Input<enums.logic.AgreementType>;
    /**
     * The agreement content.
     */
    content: pulumi.Input<inputs.logic.AgreementContentArgs>;
    /**
     * The business identity of the guest partner.
     */
    guestIdentity: pulumi.Input<inputs.logic.BusinessIdentityArgs>;
    /**
     * The integration account partner that is set as guest partner for this agreement.
     */
    guestPartner: pulumi.Input<string>;
    /**
     * The business identity of the host partner.
     */
    hostIdentity: pulumi.Input<inputs.logic.BusinessIdentityArgs>;
    /**
     * The integration account partner that is set as host partner for this agreement.
     */
    hostPartner: pulumi.Input<string>;
    /**
     * The integration account name.
     */
    integrationAccountName: pulumi.Input<string>;
    /**
     * The resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The metadata.
     */
    metadata?: any;
    /**
     * The resource group name.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
