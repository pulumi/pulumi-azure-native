// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The integration account partner.
 *
 * Uses Azure REST API version 2019-05-01. In version 2.x of the Azure Native provider, it used API version 2019-05-01.
 *
 * Other available API versions: 2015-08-01-preview, 2018-07-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native logic [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class IntegrationAccountPartner extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAccountPartner resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IntegrationAccountPartner {
        return new IntegrationAccountPartner(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:logic:IntegrationAccountPartner';

    /**
     * Returns true if the given object is an instance of IntegrationAccountPartner.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAccountPartner {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAccountPartner.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The changed time.
     */
    declare public /*out*/ readonly changedTime: pulumi.Output<string>;
    /**
     * The partner content.
     */
    declare public readonly content: pulumi.Output<outputs.logic.PartnerContentResponse>;
    /**
     * The created time.
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * The resource location.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The metadata.
     */
    declare public readonly metadata: pulumi.Output<any | undefined>;
    /**
     * Gets the resource name.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The partner type.
     */
    declare public readonly partnerType: pulumi.Output<string>;
    /**
     * The resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Gets the resource type.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a IntegrationAccountPartner resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationAccountPartnerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.integrationAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if (args?.partnerType === undefined && !opts.urn) {
                throw new Error("Missing required property 'partnerType'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["content"] = args?.content;
            resourceInputs["integrationAccountName"] = args?.integrationAccountName;
            resourceInputs["location"] = args?.location;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["partnerName"] = args?.partnerName;
            resourceInputs["partnerType"] = args?.partnerType;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["changedTime"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["changedTime"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["partnerType"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:logic/v20150801preview:IntegrationAccountPartner" }, { type: "azure-native:logic/v20160601:IntegrationAccountPartner" }, { type: "azure-native:logic/v20160601:Partner" }, { type: "azure-native:logic/v20180701preview:IntegrationAccountPartner" }, { type: "azure-native:logic/v20190501:IntegrationAccountPartner" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(IntegrationAccountPartner.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a IntegrationAccountPartner resource.
 */
export interface IntegrationAccountPartnerArgs {
    /**
     * The partner content.
     */
    content: pulumi.Input<inputs.logic.PartnerContentArgs>;
    /**
     * The integration account name.
     */
    integrationAccountName: pulumi.Input<string>;
    /**
     * The resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The metadata.
     */
    metadata?: any;
    /**
     * The integration account partner name.
     */
    partnerName?: pulumi.Input<string>;
    /**
     * The partner type.
     */
    partnerType: pulumi.Input<string | enums.logic.PartnerType>;
    /**
     * The resource group name.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
