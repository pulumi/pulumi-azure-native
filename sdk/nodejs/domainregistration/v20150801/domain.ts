// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Represents a domain
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, undefined, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:domainregistration/v20150801:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * Kind of resource
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Resource Location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource Name
     */
    public readonly name!: pulumi.Output<string | undefined>;
    public /*out*/ readonly properties!: pulumi.Output<outputs.domainregistration.v20150801.DomainResponseProperties>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, state: undefined, opts: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState as DomainArgs | undefined;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["autoRenew"] = args ? args.autoRenew : undefined;
            inputs["consent"] = args ? args.consent : undefined;
            inputs["contactAdmin"] = args ? args.contactAdmin : undefined;
            inputs["contactBilling"] = args ? args.contactBilling : undefined;
            inputs["contactRegistrant"] = args ? args.contactRegistrant : undefined;
            inputs["contactTech"] = args ? args.contactTech : undefined;
            inputs["createdTime"] = args ? args.createdTime : undefined;
            inputs["domainNotRenewableReasons"] = args ? args.domainNotRenewableReasons : undefined;
            inputs["expirationTime"] = args ? args.expirationTime : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["lastRenewedTime"] = args ? args.lastRenewedTime : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["managedHostNames"] = args ? args.managedHostNames : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nameServers"] = args ? args.nameServers : undefined;
            inputs["privacy"] = args ? args.privacy : undefined;
            inputs["provisioningState"] = args ? args.provisioningState : undefined;
            inputs["readyForDnsRecordManagement"] = args ? args.readyForDnsRecordManagement : undefined;
            inputs["registrationStatus"] = args ? args.registrationStatus : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["properties"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Domain.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * If true then domain will renewed automatically
     */
    readonly autoRenew?: pulumi.Input<boolean>;
    /**
     * Legal agreement consent
     */
    readonly consent?: pulumi.Input<inputs.domainregistration.v20150801.DomainPurchaseConsent>;
    /**
     * Admin contact information
     */
    readonly contactAdmin?: pulumi.Input<inputs.domainregistration.v20150801.Contact>;
    /**
     * Billing contact information
     */
    readonly contactBilling?: pulumi.Input<inputs.domainregistration.v20150801.Contact>;
    /**
     * Registrant contact information
     */
    readonly contactRegistrant?: pulumi.Input<inputs.domainregistration.v20150801.Contact>;
    /**
     * Technical contact information
     */
    readonly contactTech?: pulumi.Input<inputs.domainregistration.v20150801.Contact>;
    /**
     * Domain creation timestamp
     */
    readonly createdTime?: pulumi.Input<string>;
    /**
     * Reasons why domain is not renewable
     */
    readonly domainNotRenewableReasons?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain expiration timestamp
     */
    readonly expirationTime?: pulumi.Input<string>;
    /**
     * Resource Id
     */
    readonly id?: pulumi.Input<string>;
    /**
     * Kind of resource
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * Timestamp when the domain was renewed last time
     */
    readonly lastRenewedTime?: pulumi.Input<string>;
    /**
     * Resource Location
     */
    readonly location: pulumi.Input<string>;
    /**
     * All hostnames derived from the domain and assigned to Azure resources
     */
    readonly managedHostNames?: pulumi.Input<pulumi.Input<inputs.domainregistration.v20150801.HostName>[]>;
    /**
     * Name of the domain
     */
    readonly name: pulumi.Input<string>;
    /**
     * Name servers
     */
    readonly nameServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true then domain privacy is enabled for this domain
     */
    readonly privacy?: pulumi.Input<boolean>;
    /**
     * Domain provisioning state
     */
    readonly provisioningState?: pulumi.Input<string>;
    /**
     * If true then Azure can assign this domain to Web Apps. This value will be true if domain registration status is active and it is hosted on name servers Azure has programmatic access to
     */
    readonly readyForDnsRecordManagement?: pulumi.Input<boolean>;
    /**
     * Domain registration status
     */
    readonly registrationStatus?: pulumi.Input<string>;
    /**
     * &gt;Name of the resource group
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource type
     */
    readonly type?: pulumi.Input<string>;
}
