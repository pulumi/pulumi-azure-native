// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Represents a Blueprint assignment.
 */
export class Assignment extends pulumi.CustomResource {
    /**
     * Get an existing Assignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Assignment {
        return new Assignment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:blueprint/v20171111preview:Assignment';

    /**
     * Returns true if the given object is an instance of Assignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Assignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Assignment.__pulumiType;
    }

    /**
     * ID of the Blueprint definition resource.
     */
    public readonly blueprintId!: pulumi.Output<string | undefined>;
    /**
     * Multi-line explain this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * One-liner string explain this resource.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Managed Service Identity for this Blueprint assignment
     */
    public readonly identity!: pulumi.Output<outputs.blueprint.v20171111preview.ManagedServiceIdentityResponse>;
    /**
     * The location of this Blueprint assignment.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Defines how Blueprint-managed resources will be locked.
     */
    public readonly locks!: pulumi.Output<outputs.blueprint.v20171111preview.AssignmentLockSettingsResponse | undefined>;
    /**
     * Name of this resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Blueprint parameter values.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: outputs.blueprint.v20171111preview.ParameterValueBaseResponse}>;
    /**
     * State of the assignment.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Names and locations of resource group placeholders.
     */
    public readonly resourceGroups!: pulumi.Output<{[key: string]: outputs.blueprint.v20171111preview.ResourceGroupValueResponse}>;
    /**
     * Status of Blueprint assignment. This field is readonly.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.blueprint.v20171111preview.AssignmentStatusResponse>;
    /**
     * Type of this resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Assignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssignmentArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.assignmentName === undefined) {
                throw new Error("Missing required property 'assignmentName'");
            }
            if (!args || args.identity === undefined) {
                throw new Error("Missing required property 'identity'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.parameters === undefined) {
                throw new Error("Missing required property 'parameters'");
            }
            if (!args || args.resourceGroups === undefined) {
                throw new Error("Missing required property 'resourceGroups'");
            }
            inputs["assignmentName"] = args ? args.assignmentName : undefined;
            inputs["blueprintId"] = args ? args.blueprintId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["locks"] = args ? args.locks : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["resourceGroups"] = args ? args.resourceGroups : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["blueprintId"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["identity"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["locks"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["parameters"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["resourceGroups"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Assignment.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Assignment resource.
 */
export interface AssignmentArgs {
    /**
     * name of the assignment.
     */
    readonly assignmentName: pulumi.Input<string>;
    /**
     * ID of the Blueprint definition resource.
     */
    readonly blueprintId?: pulumi.Input<string>;
    /**
     * Multi-line explain this resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * One-liner string explain this resource.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Managed Service Identity for this Blueprint assignment
     */
    readonly identity: pulumi.Input<inputs.blueprint.v20171111preview.ManagedServiceIdentity>;
    /**
     * The location of this Blueprint assignment.
     */
    readonly location: pulumi.Input<string>;
    /**
     * Defines how Blueprint-managed resources will be locked.
     */
    readonly locks?: pulumi.Input<inputs.blueprint.v20171111preview.AssignmentLockSettings>;
    /**
     * Blueprint parameter values.
     */
    readonly parameters: pulumi.Input<{[key: string]: pulumi.Input<inputs.blueprint.v20171111preview.ParameterValueBase>}>;
    /**
     * Names and locations of resource group placeholders.
     */
    readonly resourceGroups: pulumi.Input<{[key: string]: pulumi.Input<inputs.blueprint.v20171111preview.ResourceGroupValue>}>;
}
