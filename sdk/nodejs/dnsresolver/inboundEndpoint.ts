// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Describes an inbound endpoint for a DNS resolver.
 *
 * Uses Azure REST API version 2023-07-01-preview.
 *
 * Other available API versions: 2020-04-01-preview, 2022-07-01, 2025-05-01, 2025-10-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native dnsresolver [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class InboundEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing InboundEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): InboundEndpoint {
        return new InboundEndpoint(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:dnsresolver:InboundEndpoint';

    /**
     * Returns true if the given object is an instance of InboundEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InboundEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InboundEndpoint.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * ETag of the inbound endpoint.
     */
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * IP configurations for the inbound endpoint.
     */
    declare public readonly ipConfigurations: pulumi.Output<outputs.dnsresolver.IpConfigurationResponse[]>;
    /**
     * The geo-location where the resource lives
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The current provisioning state of the inbound endpoint. This is a read-only property and any attempt to set this value will be ignored.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * The resourceGuid property of the inbound endpoint resource.
     */
    declare public /*out*/ readonly resourceGuid: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.dnsresolver.SystemDataResponse>;
    /**
     * Resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a InboundEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InboundEndpointArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.dnsResolverName === undefined && !opts.urn) {
                throw new Error("Missing required property 'dnsResolverName'");
            }
            if (args?.ipConfigurations === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipConfigurations'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["dnsResolverName"] = args?.dnsResolverName;
            resourceInputs["inboundEndpointName"] = args?.inboundEndpointName;
            resourceInputs["ipConfigurations"] = args?.ipConfigurations;
            resourceInputs["location"] = args?.location;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceGuid"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["ipConfigurations"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceGuid"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:dnsresolver/v20200401preview:InboundEndpoint" }, { type: "azure-native:dnsresolver/v20220701:InboundEndpoint" }, { type: "azure-native:dnsresolver/v20230701preview:InboundEndpoint" }, { type: "azure-native:dnsresolver/v20250501:InboundEndpoint" }, { type: "azure-native:dnsresolver/v20251001preview:InboundEndpoint" }, { type: "azure-native:network/v20200401preview:InboundEndpoint" }, { type: "azure-native:network/v20220701:InboundEndpoint" }, { type: "azure-native:network/v20230701preview:InboundEndpoint" }, { type: "azure-native:network:InboundEndpoint" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(InboundEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a InboundEndpoint resource.
 */
export interface InboundEndpointArgs {
    /**
     * The name of the DNS resolver.
     */
    dnsResolverName: pulumi.Input<string>;
    /**
     * The name of the inbound endpoint for the DNS resolver.
     */
    inboundEndpointName?: pulumi.Input<string>;
    /**
     * IP configurations for the inbound endpoint.
     */
    ipConfigurations: pulumi.Input<pulumi.Input<inputs.dnsresolver.IpConfigurationArgs>[]>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
