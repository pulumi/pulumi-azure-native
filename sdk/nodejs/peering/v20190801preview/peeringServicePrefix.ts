// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * The peering service prefix class.
 *
 * @deprecated Version 2019-08-01-preview will be removed in v2 of the provider.
 */
export class PeeringServicePrefix extends pulumi.CustomResource {
    /**
     * Get an existing PeeringServicePrefix resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PeeringServicePrefix {
        pulumi.log.warn("PeeringServicePrefix is deprecated: Version 2019-08-01-preview will be removed in v2 of the provider.")
        return new PeeringServicePrefix(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:peering/v20190801preview:PeeringServicePrefix';

    /**
     * Returns true if the given object is an instance of PeeringServicePrefix.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PeeringServicePrefix {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PeeringServicePrefix.__pulumiType;
    }

    /**
     * The prefix learned type
     */
    public readonly learnedType!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Valid route prefix
     */
    public readonly prefix!: pulumi.Output<string | undefined>;
    /**
     * The prefix validation state
     */
    public readonly prefixValidationState!: pulumi.Output<string | undefined>;
    /**
     * The provisioning state of the resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a PeeringServicePrefix resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2019-08-01-preview will be removed in v2 of the provider. */
    constructor(name: string, args: PeeringServicePrefixArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("PeeringServicePrefix is deprecated: Version 2019-08-01-preview will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.peeringServiceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peeringServiceName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["learnedType"] = args ? args.learnedType : undefined;
            resourceInputs["peeringServiceName"] = args ? args.peeringServiceName : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["prefixName"] = args ? args.prefixName : undefined;
            resourceInputs["prefixValidationState"] = args ? args.prefixValidationState : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["learnedType"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["prefix"] = undefined /*out*/;
            resourceInputs["prefixValidationState"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:peering:PeeringServicePrefix" }, { type: "azure-native:peering/v20190901preview:PeeringServicePrefix" }, { type: "azure-native:peering/v20200101preview:PeeringServicePrefix" }, { type: "azure-native:peering/v20200401:PeeringServicePrefix" }, { type: "azure-native:peering/v20201001:PeeringServicePrefix" }, { type: "azure-native:peering/v20210101:PeeringServicePrefix" }, { type: "azure-native:peering/v20210601:PeeringServicePrefix" }, { type: "azure-native:peering/v20220101:PeeringServicePrefix" }, { type: "azure-native:peering/v20220601:PeeringServicePrefix" }, { type: "azure-native:peering/v20221001:PeeringServicePrefix" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PeeringServicePrefix.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PeeringServicePrefix resource.
 */
export interface PeeringServicePrefixArgs {
    /**
     * The prefix learned type
     */
    learnedType?: pulumi.Input<string | enums.peering.v20190801preview.LearnedType>;
    /**
     * The peering service name.
     */
    peeringServiceName: pulumi.Input<string>;
    /**
     * Valid route prefix
     */
    prefix?: pulumi.Input<string>;
    /**
     * The prefix name
     */
    prefixName?: pulumi.Input<string>;
    /**
     * The prefix validation state
     */
    prefixValidationState?: pulumi.Input<string | enums.peering.v20190801preview.PrefixValidationState>;
    /**
     * The resource group name.
     */
    resourceGroupName: pulumi.Input<string>;
}
