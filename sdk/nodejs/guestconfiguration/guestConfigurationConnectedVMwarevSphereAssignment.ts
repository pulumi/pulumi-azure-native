// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Guest configuration assignment is an association between a machine and guest configuration.
 *
 * Uses Azure REST API version 2024-04-05. In version 2.x of the Azure Native provider, it used API version 2022-01-25.
 *
 * Other available API versions: 2022-01-25. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native guestconfiguration [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class GuestConfigurationConnectedVMwarevSphereAssignment extends pulumi.CustomResource {
    /**
     * Get an existing GuestConfigurationConnectedVMwarevSphereAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GuestConfigurationConnectedVMwarevSphereAssignment {
        return new GuestConfigurationConnectedVMwarevSphereAssignment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:guestconfiguration:GuestConfigurationConnectedVMwarevSphereAssignment';

    /**
     * Returns true if the given object is an instance of GuestConfigurationConnectedVMwarevSphereAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GuestConfigurationConnectedVMwarevSphereAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GuestConfigurationConnectedVMwarevSphereAssignment.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Region where the VM is located.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The guest configuration assignment name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Properties of the Guest configuration assignment.
     */
    declare public readonly properties: pulumi.Output<outputs.guestconfiguration.GuestConfigurationAssignmentPropertiesResponse>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.guestconfiguration.SystemDataResponse>;
    /**
     * The type of the resource.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a GuestConfigurationConnectedVMwarevSphereAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GuestConfigurationConnectedVMwarevSphereAssignmentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.vmName === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmName'");
            }
            resourceInputs["guestConfigurationAssignmentName"] = args?.guestConfigurationAssignmentName;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["vmName"] = args?.vmName;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:guestconfiguration/v20200625:GuestConfigurationConnectedVMwarevSphereAssignment" }, { type: "azure-native:guestconfiguration/v20220125:GuestConfigurationConnectedVMwarevSphereAssignment" }, { type: "azure-native:guestconfiguration/v20240405:GuestConfigurationConnectedVMwarevSphereAssignment" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GuestConfigurationConnectedVMwarevSphereAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GuestConfigurationConnectedVMwarevSphereAssignment resource.
 */
export interface GuestConfigurationConnectedVMwarevSphereAssignmentArgs {
    /**
     * The guest configuration assignment name.
     */
    guestConfigurationAssignmentName?: pulumi.Input<string>;
    /**
     * Region where the VM is located.
     */
    location?: pulumi.Input<string>;
    /**
     * The guest configuration assignment name.
     */
    name: pulumi.Input<string>;
    /**
     * Properties of the Guest configuration assignment.
     */
    properties?: pulumi.Input<inputs.guestconfiguration.GuestConfigurationAssignmentPropertiesArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the virtual machine.
     */
    vmName: pulumi.Input<string>;
}
