// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Details about environment name, metadata and environment id of an environment
 */
export class OrganizationEnvironmentById extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationEnvironmentById resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): OrganizationEnvironmentById {
        return new OrganizationEnvironmentById(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:confluent/v20240701:OrganizationEnvironmentById';

    /**
     * Returns true if the given object is an instance of OrganizationEnvironmentById.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationEnvironmentById {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationEnvironmentById.__pulumiType;
    }

    /**
     * Type of environment
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Metadata of the record
     */
    public readonly metadata!: pulumi.Output<outputs.confluent.v20240701.SCMetadataEntityResponse | undefined>;
    /**
     * Display name of the environment
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Stream governance configuration
     */
    public readonly streamGovernanceConfig!: pulumi.Output<outputs.confluent.v20240701.StreamGovernanceConfigResponse | undefined>;
    /**
     * Type of the resource
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a OrganizationEnvironmentById resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationEnvironmentByIdArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.organizationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["id"] = args ? args.id : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationName"] = args ? args.organizationName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["streamGovernanceConfig"] = args ? args.streamGovernanceConfig : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        } else {
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["streamGovernanceConfig"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:confluent:OrganizationEnvironmentById" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(OrganizationEnvironmentById.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a OrganizationEnvironmentById resource.
 */
export interface OrganizationEnvironmentByIdArgs {
    /**
     * Confluent environment id
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Id of the environment
     */
    id?: pulumi.Input<string>;
    /**
     * Type of environment
     */
    kind?: pulumi.Input<string>;
    /**
     * Metadata of the record
     */
    metadata?: pulumi.Input<inputs.confluent.v20240701.SCMetadataEntityArgs>;
    /**
     * Display name of the environment
     */
    name?: pulumi.Input<string>;
    /**
     * Organization resource name
     */
    organizationName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Stream governance configuration
     */
    streamGovernanceConfig?: pulumi.Input<inputs.confluent.v20240701.StreamGovernanceConfigArgs>;
    /**
     * Type of the resource
     */
    type?: pulumi.Input<string>;
}
