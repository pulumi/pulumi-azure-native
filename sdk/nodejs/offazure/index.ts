// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetHyperVSiteArgs, GetHyperVSiteResult, GetHyperVSiteOutputArgs } from "./getHyperVSite";
export const getHyperVSite: typeof import("./getHyperVSite").getHyperVSite = null as any;
export const getHyperVSiteOutput: typeof import("./getHyperVSite").getHyperVSiteOutput = null as any;
utilities.lazyLoad(exports, ["getHyperVSite","getHyperVSiteOutput"], () => require("./getHyperVSite"));

export { GetHypervClusterControllerClusterArgs, GetHypervClusterControllerClusterResult, GetHypervClusterControllerClusterOutputArgs } from "./getHypervClusterControllerCluster";
export const getHypervClusterControllerCluster: typeof import("./getHypervClusterControllerCluster").getHypervClusterControllerCluster = null as any;
export const getHypervClusterControllerClusterOutput: typeof import("./getHypervClusterControllerCluster").getHypervClusterControllerClusterOutput = null as any;
utilities.lazyLoad(exports, ["getHypervClusterControllerCluster","getHypervClusterControllerClusterOutput"], () => require("./getHypervClusterControllerCluster"));

export { GetHypervHostControllerArgs, GetHypervHostControllerResult, GetHypervHostControllerOutputArgs } from "./getHypervHostController";
export const getHypervHostController: typeof import("./getHypervHostController").getHypervHostController = null as any;
export const getHypervHostControllerOutput: typeof import("./getHypervHostController").getHypervHostControllerOutput = null as any;
utilities.lazyLoad(exports, ["getHypervHostController","getHypervHostControllerOutput"], () => require("./getHypervHostController"));

export { GetHypervSitesControllerArgs, GetHypervSitesControllerResult, GetHypervSitesControllerOutputArgs } from "./getHypervSitesController";
export const getHypervSitesController: typeof import("./getHypervSitesController").getHypervSitesController = null as any;
export const getHypervSitesControllerOutput: typeof import("./getHypervSitesController").getHypervSitesControllerOutput = null as any;
utilities.lazyLoad(exports, ["getHypervSitesController","getHypervSitesControllerOutput"], () => require("./getHypervSitesController"));

export { GetImportSitesControllerArgs, GetImportSitesControllerResult, GetImportSitesControllerOutputArgs } from "./getImportSitesController";
export const getImportSitesController: typeof import("./getImportSitesController").getImportSitesController = null as any;
export const getImportSitesControllerOutput: typeof import("./getImportSitesController").getImportSitesControllerOutput = null as any;
utilities.lazyLoad(exports, ["getImportSitesController","getImportSitesControllerOutput"], () => require("./getImportSitesController"));

export { GetMasterSitesControllerArgs, GetMasterSitesControllerResult, GetMasterSitesControllerOutputArgs } from "./getMasterSitesController";
export const getMasterSitesController: typeof import("./getMasterSitesController").getMasterSitesController = null as any;
export const getMasterSitesControllerOutput: typeof import("./getMasterSitesController").getMasterSitesControllerOutput = null as any;
utilities.lazyLoad(exports, ["getMasterSitesController","getMasterSitesControllerOutput"], () => require("./getMasterSitesController"));

export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));

export { GetPrivateEndpointConnectionControllerArgs, GetPrivateEndpointConnectionControllerResult, GetPrivateEndpointConnectionControllerOutputArgs } from "./getPrivateEndpointConnectionController";
export const getPrivateEndpointConnectionController: typeof import("./getPrivateEndpointConnectionController").getPrivateEndpointConnectionController = null as any;
export const getPrivateEndpointConnectionControllerOutput: typeof import("./getPrivateEndpointConnectionController").getPrivateEndpointConnectionControllerOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointConnectionController","getPrivateEndpointConnectionControllerOutput"], () => require("./getPrivateEndpointConnectionController"));

export { GetServerSitesControllerArgs, GetServerSitesControllerResult, GetServerSitesControllerOutputArgs } from "./getServerSitesController";
export const getServerSitesController: typeof import("./getServerSitesController").getServerSitesController = null as any;
export const getServerSitesControllerOutput: typeof import("./getServerSitesController").getServerSitesControllerOutput = null as any;
utilities.lazyLoad(exports, ["getServerSitesController","getServerSitesControllerOutput"], () => require("./getServerSitesController"));

export { GetSiteArgs, GetSiteResult, GetSiteOutputArgs } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetSitesControllerArgs, GetSitesControllerResult, GetSitesControllerOutputArgs } from "./getSitesController";
export const getSitesController: typeof import("./getSitesController").getSitesController = null as any;
export const getSitesControllerOutput: typeof import("./getSitesController").getSitesControllerOutput = null as any;
utilities.lazyLoad(exports, ["getSitesController","getSitesControllerOutput"], () => require("./getSitesController"));

export { GetSqlDiscoverySiteDataSourceControllerArgs, GetSqlDiscoverySiteDataSourceControllerResult, GetSqlDiscoverySiteDataSourceControllerOutputArgs } from "./getSqlDiscoverySiteDataSourceController";
export const getSqlDiscoverySiteDataSourceController: typeof import("./getSqlDiscoverySiteDataSourceController").getSqlDiscoverySiteDataSourceController = null as any;
export const getSqlDiscoverySiteDataSourceControllerOutput: typeof import("./getSqlDiscoverySiteDataSourceController").getSqlDiscoverySiteDataSourceControllerOutput = null as any;
utilities.lazyLoad(exports, ["getSqlDiscoverySiteDataSourceController","getSqlDiscoverySiteDataSourceControllerOutput"], () => require("./getSqlDiscoverySiteDataSourceController"));

export { GetSqlSitesControllerArgs, GetSqlSitesControllerResult, GetSqlSitesControllerOutputArgs } from "./getSqlSitesController";
export const getSqlSitesController: typeof import("./getSqlSitesController").getSqlSitesController = null as any;
export const getSqlSitesControllerOutput: typeof import("./getSqlSitesController").getSqlSitesControllerOutput = null as any;
utilities.lazyLoad(exports, ["getSqlSitesController","getSqlSitesControllerOutput"], () => require("./getSqlSitesController"));

export { GetVcenterControllerArgs, GetVcenterControllerResult, GetVcenterControllerOutputArgs } from "./getVcenterController";
export const getVcenterController: typeof import("./getVcenterController").getVcenterController = null as any;
export const getVcenterControllerOutput: typeof import("./getVcenterController").getVcenterControllerOutput = null as any;
utilities.lazyLoad(exports, ["getVcenterController","getVcenterControllerOutput"], () => require("./getVcenterController"));

export { GetWebAppDiscoverySiteDataSourcesControllerArgs, GetWebAppDiscoverySiteDataSourcesControllerResult, GetWebAppDiscoverySiteDataSourcesControllerOutputArgs } from "./getWebAppDiscoverySiteDataSourcesController";
export const getWebAppDiscoverySiteDataSourcesController: typeof import("./getWebAppDiscoverySiteDataSourcesController").getWebAppDiscoverySiteDataSourcesController = null as any;
export const getWebAppDiscoverySiteDataSourcesControllerOutput: typeof import("./getWebAppDiscoverySiteDataSourcesController").getWebAppDiscoverySiteDataSourcesControllerOutput = null as any;
utilities.lazyLoad(exports, ["getWebAppDiscoverySiteDataSourcesController","getWebAppDiscoverySiteDataSourcesControllerOutput"], () => require("./getWebAppDiscoverySiteDataSourcesController"));

export { GetWebAppSitesControllerArgs, GetWebAppSitesControllerResult, GetWebAppSitesControllerOutputArgs } from "./getWebAppSitesController";
export const getWebAppSitesController: typeof import("./getWebAppSitesController").getWebAppSitesController = null as any;
export const getWebAppSitesControllerOutput: typeof import("./getWebAppSitesController").getWebAppSitesControllerOutput = null as any;
utilities.lazyLoad(exports, ["getWebAppSitesController","getWebAppSitesControllerOutput"], () => require("./getWebAppSitesController"));

export { HyperVSiteArgs } from "./hyperVSite";
export type HyperVSite = import("./hyperVSite").HyperVSite;
export const HyperVSite: typeof import("./hyperVSite").HyperVSite = null as any;
utilities.lazyLoad(exports, ["HyperVSite"], () => require("./hyperVSite"));

export { HypervClusterControllerClusterArgs } from "./hypervClusterControllerCluster";
export type HypervClusterControllerCluster = import("./hypervClusterControllerCluster").HypervClusterControllerCluster;
export const HypervClusterControllerCluster: typeof import("./hypervClusterControllerCluster").HypervClusterControllerCluster = null as any;
utilities.lazyLoad(exports, ["HypervClusterControllerCluster"], () => require("./hypervClusterControllerCluster"));

export { HypervHostControllerArgs } from "./hypervHostController";
export type HypervHostController = import("./hypervHostController").HypervHostController;
export const HypervHostController: typeof import("./hypervHostController").HypervHostController = null as any;
utilities.lazyLoad(exports, ["HypervHostController"], () => require("./hypervHostController"));

export { HypervSitesControllerArgs } from "./hypervSitesController";
export type HypervSitesController = import("./hypervSitesController").HypervSitesController;
export const HypervSitesController: typeof import("./hypervSitesController").HypervSitesController = null as any;
utilities.lazyLoad(exports, ["HypervSitesController"], () => require("./hypervSitesController"));

export { ImportSitesControllerArgs } from "./importSitesController";
export type ImportSitesController = import("./importSitesController").ImportSitesController;
export const ImportSitesController: typeof import("./importSitesController").ImportSitesController = null as any;
utilities.lazyLoad(exports, ["ImportSitesController"], () => require("./importSitesController"));

export { ListHypervSitesControllerHealthSummaryArgs, ListHypervSitesControllerHealthSummaryResult, ListHypervSitesControllerHealthSummaryOutputArgs } from "./listHypervSitesControllerHealthSummary";
export const listHypervSitesControllerHealthSummary: typeof import("./listHypervSitesControllerHealthSummary").listHypervSitesControllerHealthSummary = null as any;
export const listHypervSitesControllerHealthSummaryOutput: typeof import("./listHypervSitesControllerHealthSummary").listHypervSitesControllerHealthSummaryOutput = null as any;
utilities.lazyLoad(exports, ["listHypervSitesControllerHealthSummary","listHypervSitesControllerHealthSummaryOutput"], () => require("./listHypervSitesControllerHealthSummary"));

export { ListServerSitesControllerHealthSummaryArgs, ListServerSitesControllerHealthSummaryResult, ListServerSitesControllerHealthSummaryOutputArgs } from "./listServerSitesControllerHealthSummary";
export const listServerSitesControllerHealthSummary: typeof import("./listServerSitesControllerHealthSummary").listServerSitesControllerHealthSummary = null as any;
export const listServerSitesControllerHealthSummaryOutput: typeof import("./listServerSitesControllerHealthSummary").listServerSitesControllerHealthSummaryOutput = null as any;
utilities.lazyLoad(exports, ["listServerSitesControllerHealthSummary","listServerSitesControllerHealthSummaryOutput"], () => require("./listServerSitesControllerHealthSummary"));

export { ListSitesControllerHealthSummaryArgs, ListSitesControllerHealthSummaryResult, ListSitesControllerHealthSummaryOutputArgs } from "./listSitesControllerHealthSummary";
export const listSitesControllerHealthSummary: typeof import("./listSitesControllerHealthSummary").listSitesControllerHealthSummary = null as any;
export const listSitesControllerHealthSummaryOutput: typeof import("./listSitesControllerHealthSummary").listSitesControllerHealthSummaryOutput = null as any;
utilities.lazyLoad(exports, ["listSitesControllerHealthSummary","listSitesControllerHealthSummaryOutput"], () => require("./listSitesControllerHealthSummary"));

export { MasterSitesControllerArgs } from "./masterSitesController";
export type MasterSitesController = import("./masterSitesController").MasterSitesController;
export const MasterSitesController: typeof import("./masterSitesController").MasterSitesController = null as any;
utilities.lazyLoad(exports, ["MasterSitesController"], () => require("./masterSitesController"));

export { PrivateEndpointConnectionArgs } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));

export { PrivateEndpointConnectionControllerArgs } from "./privateEndpointConnectionController";
export type PrivateEndpointConnectionController = import("./privateEndpointConnectionController").PrivateEndpointConnectionController;
export const PrivateEndpointConnectionController: typeof import("./privateEndpointConnectionController").PrivateEndpointConnectionController = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointConnectionController"], () => require("./privateEndpointConnectionController"));

export { ServerSitesControllerArgs } from "./serverSitesController";
export type ServerSitesController = import("./serverSitesController").ServerSitesController;
export const ServerSitesController: typeof import("./serverSitesController").ServerSitesController = null as any;
utilities.lazyLoad(exports, ["ServerSitesController"], () => require("./serverSitesController"));

export { SiteArgs } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SitesControllerArgs } from "./sitesController";
export type SitesController = import("./sitesController").SitesController;
export const SitesController: typeof import("./sitesController").SitesController = null as any;
utilities.lazyLoad(exports, ["SitesController"], () => require("./sitesController"));

export { SqlDiscoverySiteDataSourceControllerArgs } from "./sqlDiscoverySiteDataSourceController";
export type SqlDiscoverySiteDataSourceController = import("./sqlDiscoverySiteDataSourceController").SqlDiscoverySiteDataSourceController;
export const SqlDiscoverySiteDataSourceController: typeof import("./sqlDiscoverySiteDataSourceController").SqlDiscoverySiteDataSourceController = null as any;
utilities.lazyLoad(exports, ["SqlDiscoverySiteDataSourceController"], () => require("./sqlDiscoverySiteDataSourceController"));

export { SqlSitesControllerArgs } from "./sqlSitesController";
export type SqlSitesController = import("./sqlSitesController").SqlSitesController;
export const SqlSitesController: typeof import("./sqlSitesController").SqlSitesController = null as any;
utilities.lazyLoad(exports, ["SqlSitesController"], () => require("./sqlSitesController"));

export { VcenterControllerArgs } from "./vcenterController";
export type VcenterController = import("./vcenterController").VcenterController;
export const VcenterController: typeof import("./vcenterController").VcenterController = null as any;
utilities.lazyLoad(exports, ["VcenterController"], () => require("./vcenterController"));

export { WebAppDiscoverySiteDataSourcesControllerArgs } from "./webAppDiscoverySiteDataSourcesController";
export type WebAppDiscoverySiteDataSourcesController = import("./webAppDiscoverySiteDataSourcesController").WebAppDiscoverySiteDataSourcesController;
export const WebAppDiscoverySiteDataSourcesController: typeof import("./webAppDiscoverySiteDataSourcesController").WebAppDiscoverySiteDataSourcesController = null as any;
utilities.lazyLoad(exports, ["WebAppDiscoverySiteDataSourcesController"], () => require("./webAppDiscoverySiteDataSourcesController"));

export { WebAppSitesControllerArgs } from "./webAppSitesController";
export type WebAppSitesController = import("./webAppSitesController").WebAppSitesController;
export const WebAppSitesController: typeof import("./webAppSitesController").WebAppSitesController = null as any;
utilities.lazyLoad(exports, ["WebAppSitesController"], () => require("./webAppSitesController"));


// Export enums:
export * from "../types/enums/offazure";

// Export sub-modules:
import * as v20200707 from "./v20200707";
import * as v20230606 from "./v20230606";
import * as v20231001preview from "./v20231001preview";

export {
    v20200707,
    v20230606,
    v20231001preview,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:offazure:HyperVSite":
                return new HyperVSite(name, <any>undefined, { urn })
            case "azure-native:offazure:HypervClusterControllerCluster":
                return new HypervClusterControllerCluster(name, <any>undefined, { urn })
            case "azure-native:offazure:HypervHostController":
                return new HypervHostController(name, <any>undefined, { urn })
            case "azure-native:offazure:HypervSitesController":
                return new HypervSitesController(name, <any>undefined, { urn })
            case "azure-native:offazure:ImportSitesController":
                return new ImportSitesController(name, <any>undefined, { urn })
            case "azure-native:offazure:MasterSitesController":
                return new MasterSitesController(name, <any>undefined, { urn })
            case "azure-native:offazure:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:offazure:PrivateEndpointConnectionController":
                return new PrivateEndpointConnectionController(name, <any>undefined, { urn })
            case "azure-native:offazure:ServerSitesController":
                return new ServerSitesController(name, <any>undefined, { urn })
            case "azure-native:offazure:Site":
                return new Site(name, <any>undefined, { urn })
            case "azure-native:offazure:SitesController":
                return new SitesController(name, <any>undefined, { urn })
            case "azure-native:offazure:SqlDiscoverySiteDataSourceController":
                return new SqlDiscoverySiteDataSourceController(name, <any>undefined, { urn })
            case "azure-native:offazure:SqlSitesController":
                return new SqlSitesController(name, <any>undefined, { urn })
            case "azure-native:offazure:VcenterController":
                return new VcenterController(name, <any>undefined, { urn })
            case "azure-native:offazure:WebAppDiscoverySiteDataSourcesController":
                return new WebAppDiscoverySiteDataSourcesController(name, <any>undefined, { urn })
            case "azure-native:offazure:WebAppSitesController":
                return new WebAppSitesController(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "offazure", _module)
