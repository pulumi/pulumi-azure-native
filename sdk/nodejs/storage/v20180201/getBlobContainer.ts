// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

export function getBlobContainer(args: GetBlobContainerArgs, opts?: pulumi.InvokeOptions): Promise<GetBlobContainerResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("azure-nextgen:storage/v20180201:getBlobContainer", {
        "accountName": args.accountName,
        "containerName": args.containerName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetBlobContainerArgs {
    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     */
    readonly accountName: string;
    /**
     * The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     */
    readonly containerName: string;
    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     */
    readonly resourceGroupName: string;
}

/**
 * Properties of the blob container, including Id, resource name, resource type, Etag.
 */
export interface GetBlobContainerResult {
    /**
     * Resource Etag.
     */
    readonly etag: string;
    /**
     * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
     */
    readonly hasImmutabilityPolicy: boolean;
    /**
     * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
     */
    readonly hasLegalHold: boolean;
    /**
     * The ImmutabilityPolicy property of the container.
     */
    readonly immutabilityPolicy: outputs.storage.v20180201.ImmutabilityPolicyPropertiesResponse;
    /**
     * Returns the date and time the container was last modified.
     */
    readonly lastModifiedTime: string;
    /**
     * Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
     */
    readonly leaseDuration: string;
    /**
     * Lease state of the container.
     */
    readonly leaseState: string;
    /**
     * The lease status of the container.
     */
    readonly leaseStatus: string;
    /**
     * The LegalHold property of the container.
     */
    readonly legalHold: outputs.storage.v20180201.LegalHoldPropertiesResponse;
    /**
     * A name-value pair to associate with the container as metadata.
     */
    readonly metadata?: {[key: string]: string};
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * Specifies whether data in the container may be accessed publicly and the level of access.
     */
    readonly publicAccess?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
