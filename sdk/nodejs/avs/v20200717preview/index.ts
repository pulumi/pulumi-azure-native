// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AddonArgs } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export { GetAddonArgs, GetAddonResult, GetAddonOutputArgs } from "./getAddon";
export const getAddon: typeof import("./getAddon").getAddon = null as any;
export const getAddonOutput: typeof import("./getAddon").getAddonOutput = null as any;
utilities.lazyLoad(exports, ["getAddon","getAddonOutput"], () => require("./getAddon"));

export { GetGlobalReachConnectionArgs, GetGlobalReachConnectionResult, GetGlobalReachConnectionOutputArgs } from "./getGlobalReachConnection";
export const getGlobalReachConnection: typeof import("./getGlobalReachConnection").getGlobalReachConnection = null as any;
export const getGlobalReachConnectionOutput: typeof import("./getGlobalReachConnection").getGlobalReachConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalReachConnection","getGlobalReachConnectionOutput"], () => require("./getGlobalReachConnection"));

export { GetWorkloadNetworkDhcpArgs, GetWorkloadNetworkDhcpResult, GetWorkloadNetworkDhcpOutputArgs } from "./getWorkloadNetworkDhcp";
export const getWorkloadNetworkDhcp: typeof import("./getWorkloadNetworkDhcp").getWorkloadNetworkDhcp = null as any;
export const getWorkloadNetworkDhcpOutput: typeof import("./getWorkloadNetworkDhcp").getWorkloadNetworkDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkDhcp","getWorkloadNetworkDhcpOutput"], () => require("./getWorkloadNetworkDhcp"));

export { GetWorkloadNetworkDnsServiceArgs, GetWorkloadNetworkDnsServiceResult, GetWorkloadNetworkDnsServiceOutputArgs } from "./getWorkloadNetworkDnsService";
export const getWorkloadNetworkDnsService: typeof import("./getWorkloadNetworkDnsService").getWorkloadNetworkDnsService = null as any;
export const getWorkloadNetworkDnsServiceOutput: typeof import("./getWorkloadNetworkDnsService").getWorkloadNetworkDnsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkDnsService","getWorkloadNetworkDnsServiceOutput"], () => require("./getWorkloadNetworkDnsService"));

export { GetWorkloadNetworkDnsZoneArgs, GetWorkloadNetworkDnsZoneResult, GetWorkloadNetworkDnsZoneOutputArgs } from "./getWorkloadNetworkDnsZone";
export const getWorkloadNetworkDnsZone: typeof import("./getWorkloadNetworkDnsZone").getWorkloadNetworkDnsZone = null as any;
export const getWorkloadNetworkDnsZoneOutput: typeof import("./getWorkloadNetworkDnsZone").getWorkloadNetworkDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkDnsZone","getWorkloadNetworkDnsZoneOutput"], () => require("./getWorkloadNetworkDnsZone"));

export { GetWorkloadNetworkPortMirroringArgs, GetWorkloadNetworkPortMirroringResult, GetWorkloadNetworkPortMirroringOutputArgs } from "./getWorkloadNetworkPortMirroring";
export const getWorkloadNetworkPortMirroring: typeof import("./getWorkloadNetworkPortMirroring").getWorkloadNetworkPortMirroring = null as any;
export const getWorkloadNetworkPortMirroringOutput: typeof import("./getWorkloadNetworkPortMirroring").getWorkloadNetworkPortMirroringOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkPortMirroring","getWorkloadNetworkPortMirroringOutput"], () => require("./getWorkloadNetworkPortMirroring"));

export { GetWorkloadNetworkSegmentArgs, GetWorkloadNetworkSegmentResult, GetWorkloadNetworkSegmentOutputArgs } from "./getWorkloadNetworkSegment";
export const getWorkloadNetworkSegment: typeof import("./getWorkloadNetworkSegment").getWorkloadNetworkSegment = null as any;
export const getWorkloadNetworkSegmentOutput: typeof import("./getWorkloadNetworkSegment").getWorkloadNetworkSegmentOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkSegment","getWorkloadNetworkSegmentOutput"], () => require("./getWorkloadNetworkSegment"));

export { GetWorkloadNetworkVMGroupArgs, GetWorkloadNetworkVMGroupResult, GetWorkloadNetworkVMGroupOutputArgs } from "./getWorkloadNetworkVMGroup";
export const getWorkloadNetworkVMGroup: typeof import("./getWorkloadNetworkVMGroup").getWorkloadNetworkVMGroup = null as any;
export const getWorkloadNetworkVMGroupOutput: typeof import("./getWorkloadNetworkVMGroup").getWorkloadNetworkVMGroupOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkVMGroup","getWorkloadNetworkVMGroupOutput"], () => require("./getWorkloadNetworkVMGroup"));

export { GlobalReachConnectionArgs } from "./globalReachConnection";
export type GlobalReachConnection = import("./globalReachConnection").GlobalReachConnection;
export const GlobalReachConnection: typeof import("./globalReachConnection").GlobalReachConnection = null as any;
utilities.lazyLoad(exports, ["GlobalReachConnection"], () => require("./globalReachConnection"));

export { WorkloadNetworkDhcpArgs } from "./workloadNetworkDhcp";
export type WorkloadNetworkDhcp = import("./workloadNetworkDhcp").WorkloadNetworkDhcp;
export const WorkloadNetworkDhcp: typeof import("./workloadNetworkDhcp").WorkloadNetworkDhcp = null as any;
utilities.lazyLoad(exports, ["WorkloadNetworkDhcp"], () => require("./workloadNetworkDhcp"));

export { WorkloadNetworkDnsServiceArgs } from "./workloadNetworkDnsService";
export type WorkloadNetworkDnsService = import("./workloadNetworkDnsService").WorkloadNetworkDnsService;
export const WorkloadNetworkDnsService: typeof import("./workloadNetworkDnsService").WorkloadNetworkDnsService = null as any;
utilities.lazyLoad(exports, ["WorkloadNetworkDnsService"], () => require("./workloadNetworkDnsService"));

export { WorkloadNetworkDnsZoneArgs } from "./workloadNetworkDnsZone";
export type WorkloadNetworkDnsZone = import("./workloadNetworkDnsZone").WorkloadNetworkDnsZone;
export const WorkloadNetworkDnsZone: typeof import("./workloadNetworkDnsZone").WorkloadNetworkDnsZone = null as any;
utilities.lazyLoad(exports, ["WorkloadNetworkDnsZone"], () => require("./workloadNetworkDnsZone"));

export { WorkloadNetworkPortMirroringArgs } from "./workloadNetworkPortMirroring";
export type WorkloadNetworkPortMirroring = import("./workloadNetworkPortMirroring").WorkloadNetworkPortMirroring;
export const WorkloadNetworkPortMirroring: typeof import("./workloadNetworkPortMirroring").WorkloadNetworkPortMirroring = null as any;
utilities.lazyLoad(exports, ["WorkloadNetworkPortMirroring"], () => require("./workloadNetworkPortMirroring"));

export { WorkloadNetworkSegmentArgs } from "./workloadNetworkSegment";
export type WorkloadNetworkSegment = import("./workloadNetworkSegment").WorkloadNetworkSegment;
export const WorkloadNetworkSegment: typeof import("./workloadNetworkSegment").WorkloadNetworkSegment = null as any;
utilities.lazyLoad(exports, ["WorkloadNetworkSegment"], () => require("./workloadNetworkSegment"));

export { WorkloadNetworkVMGroupArgs } from "./workloadNetworkVMGroup";
export type WorkloadNetworkVMGroup = import("./workloadNetworkVMGroup").WorkloadNetworkVMGroup;
export const WorkloadNetworkVMGroup: typeof import("./workloadNetworkVMGroup").WorkloadNetworkVMGroup = null as any;
utilities.lazyLoad(exports, ["WorkloadNetworkVMGroup"], () => require("./workloadNetworkVMGroup"));


// Export enums:
export * from "../../types/enums/avs/v20200717preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:avs/v20200717preview:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "azure-native:avs/v20200717preview:GlobalReachConnection":
                return new GlobalReachConnection(name, <any>undefined, { urn })
            case "azure-native:avs/v20200717preview:WorkloadNetworkDhcp":
                return new WorkloadNetworkDhcp(name, <any>undefined, { urn })
            case "azure-native:avs/v20200717preview:WorkloadNetworkDnsService":
                return new WorkloadNetworkDnsService(name, <any>undefined, { urn })
            case "azure-native:avs/v20200717preview:WorkloadNetworkDnsZone":
                return new WorkloadNetworkDnsZone(name, <any>undefined, { urn })
            case "azure-native:avs/v20200717preview:WorkloadNetworkPortMirroring":
                return new WorkloadNetworkPortMirroring(name, <any>undefined, { urn })
            case "azure-native:avs/v20200717preview:WorkloadNetworkSegment":
                return new WorkloadNetworkSegment(name, <any>undefined, { urn })
            case "azure-native:avs/v20200717preview:WorkloadNetworkVMGroup":
                return new WorkloadNetworkVMGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "avs/v20200717preview", _module)
