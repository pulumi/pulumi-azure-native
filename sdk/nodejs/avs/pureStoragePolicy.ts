// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * An instance describing a Pure Storage Policy Based Management policy
 *
 * Uses Azure REST API version 2024-09-01.
 */
export class PureStoragePolicy extends pulumi.CustomResource {
    /**
     * Get an existing PureStoragePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PureStoragePolicy {
        return new PureStoragePolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:avs:PureStoragePolicy';

    /**
     * Returns true if the given object is an instance of PureStoragePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PureStoragePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PureStoragePolicy.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The state of the Pure Storage Policy Based Management policy provisioning
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * Definition of a Pure Storage Policy Based Management policy
     */
    declare public readonly storagePolicyDefinition: pulumi.Output<string>;
    /**
     * Azure resource ID of the Pure Storage Pool associated with the storage policy
     */
    declare public readonly storagePoolId: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.avs.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a PureStoragePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PureStoragePolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.privateCloudName === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateCloudName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.storagePolicyDefinition === undefined && !opts.urn) {
                throw new Error("Missing required property 'storagePolicyDefinition'");
            }
            if (args?.storagePoolId === undefined && !opts.urn) {
                throw new Error("Missing required property 'storagePoolId'");
            }
            resourceInputs["privateCloudName"] = args?.privateCloudName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["storagePolicyDefinition"] = args?.storagePolicyDefinition;
            resourceInputs["storagePolicyName"] = args?.storagePolicyName;
            resourceInputs["storagePoolId"] = args?.storagePoolId;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["storagePolicyDefinition"] = undefined /*out*/;
            resourceInputs["storagePoolId"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:avs/v20240901:PureStoragePolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PureStoragePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PureStoragePolicy resource.
 */
export interface PureStoragePolicyArgs {
    /**
     * Name of the private cloud
     */
    privateCloudName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Definition of a Pure Storage Policy Based Management policy
     */
    storagePolicyDefinition: pulumi.Input<string>;
    /**
     * Name of the storage policy.
     */
    storagePolicyName?: pulumi.Input<string>;
    /**
     * Azure resource ID of the Pure Storage Pool associated with the storage policy
     */
    storagePoolId: pulumi.Input<string>;
}
