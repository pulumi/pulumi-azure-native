// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AddonArgs } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export { DatastoreArgs } from "./datastore";
export type Datastore = import("./datastore").Datastore;
export const Datastore: typeof import("./datastore").Datastore = null as any;
utilities.lazyLoad(exports, ["Datastore"], () => require("./datastore"));

export { GetAddonArgs, GetAddonResult, GetAddonOutputArgs } from "./getAddon";
export const getAddon: typeof import("./getAddon").getAddon = null as any;
export const getAddonOutput: typeof import("./getAddon").getAddonOutput = null as any;
utilities.lazyLoad(exports, ["getAddon","getAddonOutput"], () => require("./getAddon"));

export { GetAuthorizationArgs, GetAuthorizationResult, GetAuthorizationOutputArgs } from "./getAuthorization";
export const getAuthorization: typeof import("./getAuthorization").getAuthorization = null as any;
export const getAuthorizationOutput: typeof import("./getAuthorization").getAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorization","getAuthorizationOutput"], () => require("./getAuthorization"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetDatastoreArgs, GetDatastoreResult, GetDatastoreOutputArgs } from "./getDatastore";
export const getDatastore: typeof import("./getDatastore").getDatastore = null as any;
export const getDatastoreOutput: typeof import("./getDatastore").getDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getDatastore","getDatastoreOutput"], () => require("./getDatastore"));

export { GetGlobalReachConnectionArgs, GetGlobalReachConnectionResult, GetGlobalReachConnectionOutputArgs } from "./getGlobalReachConnection";
export const getGlobalReachConnection: typeof import("./getGlobalReachConnection").getGlobalReachConnection = null as any;
export const getGlobalReachConnectionOutput: typeof import("./getGlobalReachConnection").getGlobalReachConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalReachConnection","getGlobalReachConnectionOutput"], () => require("./getGlobalReachConnection"));

export { GetHcxEnterpriseSiteArgs, GetHcxEnterpriseSiteResult, GetHcxEnterpriseSiteOutputArgs } from "./getHcxEnterpriseSite";
export const getHcxEnterpriseSite: typeof import("./getHcxEnterpriseSite").getHcxEnterpriseSite = null as any;
export const getHcxEnterpriseSiteOutput: typeof import("./getHcxEnterpriseSite").getHcxEnterpriseSiteOutput = null as any;
utilities.lazyLoad(exports, ["getHcxEnterpriseSite","getHcxEnterpriseSiteOutput"], () => require("./getHcxEnterpriseSite"));

export { GetPrivateCloudArgs, GetPrivateCloudResult, GetPrivateCloudOutputArgs } from "./getPrivateCloud";
export const getPrivateCloud: typeof import("./getPrivateCloud").getPrivateCloud = null as any;
export const getPrivateCloudOutput: typeof import("./getPrivateCloud").getPrivateCloudOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateCloud","getPrivateCloudOutput"], () => require("./getPrivateCloud"));

export { GetWorkloadNetworkDhcpArgs, GetWorkloadNetworkDhcpResult, GetWorkloadNetworkDhcpOutputArgs } from "./getWorkloadNetworkDhcp";
export const getWorkloadNetworkDhcp: typeof import("./getWorkloadNetworkDhcp").getWorkloadNetworkDhcp = null as any;
export const getWorkloadNetworkDhcpOutput: typeof import("./getWorkloadNetworkDhcp").getWorkloadNetworkDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkDhcp","getWorkloadNetworkDhcpOutput"], () => require("./getWorkloadNetworkDhcp"));

export { GetWorkloadNetworkDnsServiceArgs, GetWorkloadNetworkDnsServiceResult, GetWorkloadNetworkDnsServiceOutputArgs } from "./getWorkloadNetworkDnsService";
export const getWorkloadNetworkDnsService: typeof import("./getWorkloadNetworkDnsService").getWorkloadNetworkDnsService = null as any;
export const getWorkloadNetworkDnsServiceOutput: typeof import("./getWorkloadNetworkDnsService").getWorkloadNetworkDnsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkDnsService","getWorkloadNetworkDnsServiceOutput"], () => require("./getWorkloadNetworkDnsService"));

export { GetWorkloadNetworkDnsZoneArgs, GetWorkloadNetworkDnsZoneResult, GetWorkloadNetworkDnsZoneOutputArgs } from "./getWorkloadNetworkDnsZone";
export const getWorkloadNetworkDnsZone: typeof import("./getWorkloadNetworkDnsZone").getWorkloadNetworkDnsZone = null as any;
export const getWorkloadNetworkDnsZoneOutput: typeof import("./getWorkloadNetworkDnsZone").getWorkloadNetworkDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkDnsZone","getWorkloadNetworkDnsZoneOutput"], () => require("./getWorkloadNetworkDnsZone"));

export { GetWorkloadNetworkPortMirroringArgs, GetWorkloadNetworkPortMirroringResult, GetWorkloadNetworkPortMirroringOutputArgs } from "./getWorkloadNetworkPortMirroring";
export const getWorkloadNetworkPortMirroring: typeof import("./getWorkloadNetworkPortMirroring").getWorkloadNetworkPortMirroring = null as any;
export const getWorkloadNetworkPortMirroringOutput: typeof import("./getWorkloadNetworkPortMirroring").getWorkloadNetworkPortMirroringOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkPortMirroring","getWorkloadNetworkPortMirroringOutput"], () => require("./getWorkloadNetworkPortMirroring"));

export { GetWorkloadNetworkSegmentArgs, GetWorkloadNetworkSegmentResult, GetWorkloadNetworkSegmentOutputArgs } from "./getWorkloadNetworkSegment";
export const getWorkloadNetworkSegment: typeof import("./getWorkloadNetworkSegment").getWorkloadNetworkSegment = null as any;
export const getWorkloadNetworkSegmentOutput: typeof import("./getWorkloadNetworkSegment").getWorkloadNetworkSegmentOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkSegment","getWorkloadNetworkSegmentOutput"], () => require("./getWorkloadNetworkSegment"));

export { GetWorkloadNetworkVMGroupArgs, GetWorkloadNetworkVMGroupResult, GetWorkloadNetworkVMGroupOutputArgs } from "./getWorkloadNetworkVMGroup";
export const getWorkloadNetworkVMGroup: typeof import("./getWorkloadNetworkVMGroup").getWorkloadNetworkVMGroup = null as any;
export const getWorkloadNetworkVMGroupOutput: typeof import("./getWorkloadNetworkVMGroup").getWorkloadNetworkVMGroupOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadNetworkVMGroup","getWorkloadNetworkVMGroupOutput"], () => require("./getWorkloadNetworkVMGroup"));

export { ListPrivateCloudAdminCredentialsArgs, ListPrivateCloudAdminCredentialsResult, ListPrivateCloudAdminCredentialsOutputArgs } from "./listPrivateCloudAdminCredentials";
export const listPrivateCloudAdminCredentials: typeof import("./listPrivateCloudAdminCredentials").listPrivateCloudAdminCredentials = null as any;
export const listPrivateCloudAdminCredentialsOutput: typeof import("./listPrivateCloudAdminCredentials").listPrivateCloudAdminCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["listPrivateCloudAdminCredentials","listPrivateCloudAdminCredentialsOutput"], () => require("./listPrivateCloudAdminCredentials"));

export { WorkloadNetworkDhcpArgs } from "./workloadNetworkDhcp";
export type WorkloadNetworkDhcp = import("./workloadNetworkDhcp").WorkloadNetworkDhcp;
export const WorkloadNetworkDhcp: typeof import("./workloadNetworkDhcp").WorkloadNetworkDhcp = null as any;
utilities.lazyLoad(exports, ["WorkloadNetworkDhcp"], () => require("./workloadNetworkDhcp"));


// Export enums:
export * from "../../types/enums/avs/v20210101preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:avs/v20210101preview:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "azure-native:avs/v20210101preview:Datastore":
                return new Datastore(name, <any>undefined, { urn })
            case "azure-native:avs/v20210101preview:WorkloadNetworkDhcp":
                return new WorkloadNetworkDhcp(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "avs/v20210101preview", _module)
