// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./addon";
export * from "./authorization";
export * from "./cluster";
export * from "./getAddon";
export * from "./getAuthorization";
export * from "./getCluster";
export * from "./getGlobalReachConnection";
export * from "./getHcxEnterpriseSite";
export * from "./getPrivateCloud";
export * from "./getWorkloadNetworkDhcp";
export * from "./getWorkloadNetworkDnsService";
export * from "./getWorkloadNetworkDnsZone";
export * from "./getWorkloadNetworkPortMirroring";
export * from "./getWorkloadNetworkSegment";
export * from "./getWorkloadNetworkVMGroup";
export * from "./globalReachConnection";
export * from "./hcxEnterpriseSite";
export * from "./listPrivateCloudAdminCredentials";
export * from "./privateCloud";
export * from "./workloadNetworkDhcp";
export * from "./workloadNetworkDnsService";
export * from "./workloadNetworkDnsZone";
export * from "./workloadNetworkPortMirroring";
export * from "./workloadNetworkSegment";
export * from "./workloadNetworkVMGroup";

// Export enums:
export * from "../types/enums/avs";

// Export sub-modules:
import * as latest from "./latest";
import * as v20200320 from "./v20200320";
import * as v20200717preview from "./v20200717preview";
import * as v20210101preview from "./v20210101preview";

export {
    latest,
    v20200320,
    v20200717preview,
    v20210101preview,
};

// Import resources to register:
import { Addon } from "./addon";
import { Authorization } from "./authorization";
import { Cluster } from "./cluster";
import { GlobalReachConnection } from "./globalReachConnection";
import { HcxEnterpriseSite } from "./hcxEnterpriseSite";
import { PrivateCloud } from "./privateCloud";
import { WorkloadNetworkDhcp } from "./workloadNetworkDhcp";
import { WorkloadNetworkDnsService } from "./workloadNetworkDnsService";
import { WorkloadNetworkDnsZone } from "./workloadNetworkDnsZone";
import { WorkloadNetworkPortMirroring } from "./workloadNetworkPortMirroring";
import { WorkloadNetworkSegment } from "./workloadNetworkSegment";
import { WorkloadNetworkVMGroup } from "./workloadNetworkVMGroup";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-nextgen:avs:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "azure-nextgen:avs:Authorization":
                return new Authorization(name, <any>undefined, { urn })
            case "azure-nextgen:avs:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "azure-nextgen:avs:GlobalReachConnection":
                return new GlobalReachConnection(name, <any>undefined, { urn })
            case "azure-nextgen:avs:HcxEnterpriseSite":
                return new HcxEnterpriseSite(name, <any>undefined, { urn })
            case "azure-nextgen:avs:PrivateCloud":
                return new PrivateCloud(name, <any>undefined, { urn })
            case "azure-nextgen:avs:WorkloadNetworkDhcp":
                return new WorkloadNetworkDhcp(name, <any>undefined, { urn })
            case "azure-nextgen:avs:WorkloadNetworkDnsService":
                return new WorkloadNetworkDnsService(name, <any>undefined, { urn })
            case "azure-nextgen:avs:WorkloadNetworkDnsZone":
                return new WorkloadNetworkDnsZone(name, <any>undefined, { urn })
            case "azure-nextgen:avs:WorkloadNetworkPortMirroring":
                return new WorkloadNetworkPortMirroring(name, <any>undefined, { urn })
            case "azure-nextgen:avs:WorkloadNetworkSegment":
                return new WorkloadNetworkSegment(name, <any>undefined, { urn })
            case "azure-nextgen:avs:WorkloadNetworkVMGroup":
                return new WorkloadNetworkVMGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-nextgen", "avs", _module)
