// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Domain service.
 *
 * @deprecated Version 2017-06-01 will be removed in v2 of the provider.
 */
export class DomainService extends pulumi.CustomResource {
    /**
     * Get an existing DomainService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DomainService {
        pulumi.log.warn("DomainService is deprecated: Version 2017-06-01 will be removed in v2 of the provider.")
        return new DomainService(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:aad/v20170601:DomainService';

    /**
     * Returns true if the given object is an instance of DomainService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainService.__pulumiType;
    }

    /**
     * Deployment Id
     */
    public /*out*/ readonly deploymentId!: pulumi.Output<string>;
    /**
     * Domain Configuration Type
     */
    public readonly domainConfigurationType!: pulumi.Output<string | undefined>;
    /**
     * List of Domain Controller IP Address
     */
    public /*out*/ readonly domainControllerIpAddress!: pulumi.Output<string[]>;
    /**
     * The name of the Azure domain that the user would like to deploy Domain Services to.
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * DomainSecurity Settings
     */
    public readonly domainSecuritySettings!: pulumi.Output<outputs.aad.v20170601.DomainSecuritySettingsResponse | undefined>;
    /**
     * Resource etag
     */
    public /*out*/ readonly etag!: pulumi.Output<string | undefined>;
    /**
     * Enabled or Disabled flag to turn on Group-based filtered sync
     */
    public readonly filteredSync!: pulumi.Output<string | undefined>;
    /**
     * List of Domain Health Alerts
     */
    public /*out*/ readonly healthAlerts!: pulumi.Output<outputs.aad.v20170601.HealthAlertResponse[]>;
    /**
     * Last domain evaluation run DateTime
     */
    public /*out*/ readonly healthLastEvaluated!: pulumi.Output<string>;
    /**
     * List of Domain Health Monitors
     */
    public /*out*/ readonly healthMonitors!: pulumi.Output<outputs.aad.v20170601.HealthMonitorResponse[]>;
    /**
     * Secure LDAP Settings
     */
    public readonly ldapsSettings!: pulumi.Output<outputs.aad.v20170601.LdapsSettingsResponse | undefined>;
    /**
     * Resource location
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Migration Properties
     */
    public /*out*/ readonly migrationProperties!: pulumi.Output<outputs.aad.v20170601.MigrationPropertiesResponse>;
    /**
     * Resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Notification Settings
     */
    public readonly notificationSettings!: pulumi.Output<outputs.aad.v20170601.NotificationSettingsResponse | undefined>;
    /**
     * the current deployment or provisioning state, which only appears in the response.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Resource Forest Settings
     */
    public readonly resourceForestSettings!: pulumi.Output<outputs.aad.v20170601.ResourceForestSettingsResponse | undefined>;
    /**
     * Status of Domain Service instance
     */
    public /*out*/ readonly serviceStatus!: pulumi.Output<string>;
    /**
     * Sku Type
     */
    public readonly sku!: pulumi.Output<string | undefined>;
    /**
     * The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Azure Active Directory Tenant Id
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Data Model Version
     */
    public /*out*/ readonly version!: pulumi.Output<number>;
    /**
     * Virtual network site id
     */
    public /*out*/ readonly vnetSiteId!: pulumi.Output<string>;

    /**
     * Create a DomainService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2017-06-01 will be removed in v2 of the provider. */
    constructor(name: string, args: DomainServiceArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("DomainService is deprecated: Version 2017-06-01 will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["domainConfigurationType"] = args ? args.domainConfigurationType : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainSecuritySettings"] = args ? (args.domainSecuritySettings ? pulumi.output(args.domainSecuritySettings).apply(inputs.aad.v20170601.domainSecuritySettingsArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["domainServiceName"] = args ? args.domainServiceName : undefined;
            resourceInputs["filteredSync"] = args ? args.filteredSync : undefined;
            resourceInputs["ldapsSettings"] = args ? (args.ldapsSettings ? pulumi.output(args.ldapsSettings).apply(inputs.aad.v20170601.ldapsSettingsArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["notificationSettings"] = args ? args.notificationSettings : undefined;
            resourceInputs["resourceForestSettings"] = args ? args.resourceForestSettings : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["domainControllerIpAddress"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["healthAlerts"] = undefined /*out*/;
            resourceInputs["healthLastEvaluated"] = undefined /*out*/;
            resourceInputs["healthMonitors"] = undefined /*out*/;
            resourceInputs["migrationProperties"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["serviceStatus"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["vnetSiteId"] = undefined /*out*/;
        } else {
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["domainConfigurationType"] = undefined /*out*/;
            resourceInputs["domainControllerIpAddress"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["domainSecuritySettings"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["filteredSync"] = undefined /*out*/;
            resourceInputs["healthAlerts"] = undefined /*out*/;
            resourceInputs["healthLastEvaluated"] = undefined /*out*/;
            resourceInputs["healthMonitors"] = undefined /*out*/;
            resourceInputs["ldapsSettings"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["migrationProperties"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["notificationSettings"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceForestSettings"] = undefined /*out*/;
            resourceInputs["serviceStatus"] = undefined /*out*/;
            resourceInputs["sku"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["vnetSiteId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:aad:DomainService" }, { type: "azure-native:aad/v20170101:DomainService" }, { type: "azure-native:aad/v20200101:DomainService" }, { type: "azure-native:aad/v20210301:DomainService" }, { type: "azure-native:aad/v20210501:DomainService" }, { type: "azure-native:aad/v20220901:DomainService" }, { type: "azure-native:aad/v20221201:DomainService" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DomainService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DomainService resource.
 */
export interface DomainServiceArgs {
    /**
     * Domain Configuration Type
     */
    domainConfigurationType?: pulumi.Input<string>;
    /**
     * The name of the Azure domain that the user would like to deploy Domain Services to.
     */
    domainName?: pulumi.Input<string>;
    /**
     * DomainSecurity Settings
     */
    domainSecuritySettings?: pulumi.Input<inputs.aad.v20170601.DomainSecuritySettingsArgs>;
    /**
     * The name of the domain service.
     */
    domainServiceName?: pulumi.Input<string>;
    /**
     * Enabled or Disabled flag to turn on Group-based filtered sync
     */
    filteredSync?: pulumi.Input<string | enums.aad.v20170601.FilteredSync>;
    /**
     * Secure LDAP Settings
     */
    ldapsSettings?: pulumi.Input<inputs.aad.v20170601.LdapsSettingsArgs>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * Notification Settings
     */
    notificationSettings?: pulumi.Input<inputs.aad.v20170601.NotificationSettingsArgs>;
    /**
     * Resource Forest Settings
     */
    resourceForestSettings?: pulumi.Input<inputs.aad.v20170601.ResourceForestSettingsArgs>;
    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Sku Type
     */
    sku?: pulumi.Input<string>;
    /**
     * The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
