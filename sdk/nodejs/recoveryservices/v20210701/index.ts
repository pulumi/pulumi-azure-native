// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));

export { GetProtectedItemArgs, GetProtectedItemResult, GetProtectedItemOutputArgs } from "./getProtectedItem";
export const getProtectedItem: typeof import("./getProtectedItem").getProtectedItem = null as any;
export const getProtectedItemOutput: typeof import("./getProtectedItem").getProtectedItemOutput = null as any;
utilities.lazyLoad(exports, ["getProtectedItem","getProtectedItemOutput"], () => require("./getProtectedItem"));

export { GetProtectionContainerArgs, GetProtectionContainerResult, GetProtectionContainerOutputArgs } from "./getProtectionContainer";
export const getProtectionContainer: typeof import("./getProtectionContainer").getProtectionContainer = null as any;
export const getProtectionContainerOutput: typeof import("./getProtectionContainer").getProtectionContainerOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionContainer","getProtectionContainerOutput"], () => require("./getProtectionContainer"));

export { GetProtectionIntentArgs, GetProtectionIntentResult, GetProtectionIntentOutputArgs } from "./getProtectionIntent";
export const getProtectionIntent: typeof import("./getProtectionIntent").getProtectionIntent = null as any;
export const getProtectionIntentOutput: typeof import("./getProtectionIntent").getProtectionIntentOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionIntent","getProtectionIntentOutput"], () => require("./getProtectionIntent"));

export { GetProtectionPolicyArgs, GetProtectionPolicyResult, GetProtectionPolicyOutputArgs } from "./getProtectionPolicy";
export const getProtectionPolicy: typeof import("./getProtectionPolicy").getProtectionPolicy = null as any;
export const getProtectionPolicyOutput: typeof import("./getProtectionPolicy").getProtectionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionPolicy","getProtectionPolicyOutput"], () => require("./getProtectionPolicy"));

export { GetReplicationFabricArgs, GetReplicationFabricResult, GetReplicationFabricOutputArgs } from "./getReplicationFabric";
export const getReplicationFabric: typeof import("./getReplicationFabric").getReplicationFabric = null as any;
export const getReplicationFabricOutput: typeof import("./getReplicationFabric").getReplicationFabricOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationFabric","getReplicationFabricOutput"], () => require("./getReplicationFabric"));

export { GetReplicationMigrationItemArgs, GetReplicationMigrationItemResult, GetReplicationMigrationItemOutputArgs } from "./getReplicationMigrationItem";
export const getReplicationMigrationItem: typeof import("./getReplicationMigrationItem").getReplicationMigrationItem = null as any;
export const getReplicationMigrationItemOutput: typeof import("./getReplicationMigrationItem").getReplicationMigrationItemOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationMigrationItem","getReplicationMigrationItemOutput"], () => require("./getReplicationMigrationItem"));

export { GetReplicationNetworkMappingArgs, GetReplicationNetworkMappingResult, GetReplicationNetworkMappingOutputArgs } from "./getReplicationNetworkMapping";
export const getReplicationNetworkMapping: typeof import("./getReplicationNetworkMapping").getReplicationNetworkMapping = null as any;
export const getReplicationNetworkMappingOutput: typeof import("./getReplicationNetworkMapping").getReplicationNetworkMappingOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationNetworkMapping","getReplicationNetworkMappingOutput"], () => require("./getReplicationNetworkMapping"));

export { GetReplicationPolicyArgs, GetReplicationPolicyResult, GetReplicationPolicyOutputArgs } from "./getReplicationPolicy";
export const getReplicationPolicy: typeof import("./getReplicationPolicy").getReplicationPolicy = null as any;
export const getReplicationPolicyOutput: typeof import("./getReplicationPolicy").getReplicationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationPolicy","getReplicationPolicyOutput"], () => require("./getReplicationPolicy"));

export { GetReplicationProtectedItemArgs, GetReplicationProtectedItemResult, GetReplicationProtectedItemOutputArgs } from "./getReplicationProtectedItem";
export const getReplicationProtectedItem: typeof import("./getReplicationProtectedItem").getReplicationProtectedItem = null as any;
export const getReplicationProtectedItemOutput: typeof import("./getReplicationProtectedItem").getReplicationProtectedItemOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationProtectedItem","getReplicationProtectedItemOutput"], () => require("./getReplicationProtectedItem"));

export { GetReplicationProtectionContainerMappingArgs, GetReplicationProtectionContainerMappingResult, GetReplicationProtectionContainerMappingOutputArgs } from "./getReplicationProtectionContainerMapping";
export const getReplicationProtectionContainerMapping: typeof import("./getReplicationProtectionContainerMapping").getReplicationProtectionContainerMapping = null as any;
export const getReplicationProtectionContainerMappingOutput: typeof import("./getReplicationProtectionContainerMapping").getReplicationProtectionContainerMappingOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationProtectionContainerMapping","getReplicationProtectionContainerMappingOutput"], () => require("./getReplicationProtectionContainerMapping"));

export { GetReplicationRecoveryPlanArgs, GetReplicationRecoveryPlanResult, GetReplicationRecoveryPlanOutputArgs } from "./getReplicationRecoveryPlan";
export const getReplicationRecoveryPlan: typeof import("./getReplicationRecoveryPlan").getReplicationRecoveryPlan = null as any;
export const getReplicationRecoveryPlanOutput: typeof import("./getReplicationRecoveryPlan").getReplicationRecoveryPlanOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationRecoveryPlan","getReplicationRecoveryPlanOutput"], () => require("./getReplicationRecoveryPlan"));

export { GetReplicationRecoveryServicesProviderArgs, GetReplicationRecoveryServicesProviderResult, GetReplicationRecoveryServicesProviderOutputArgs } from "./getReplicationRecoveryServicesProvider";
export const getReplicationRecoveryServicesProvider: typeof import("./getReplicationRecoveryServicesProvider").getReplicationRecoveryServicesProvider = null as any;
export const getReplicationRecoveryServicesProviderOutput: typeof import("./getReplicationRecoveryServicesProvider").getReplicationRecoveryServicesProviderOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationRecoveryServicesProvider","getReplicationRecoveryServicesProviderOutput"], () => require("./getReplicationRecoveryServicesProvider"));

export { GetReplicationStorageClassificationMappingArgs, GetReplicationStorageClassificationMappingResult, GetReplicationStorageClassificationMappingOutputArgs } from "./getReplicationStorageClassificationMapping";
export const getReplicationStorageClassificationMapping: typeof import("./getReplicationStorageClassificationMapping").getReplicationStorageClassificationMapping = null as any;
export const getReplicationStorageClassificationMappingOutput: typeof import("./getReplicationStorageClassificationMapping").getReplicationStorageClassificationMappingOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationStorageClassificationMapping","getReplicationStorageClassificationMappingOutput"], () => require("./getReplicationStorageClassificationMapping"));

export { GetReplicationvCenterArgs, GetReplicationvCenterResult, GetReplicationvCenterOutputArgs } from "./getReplicationvCenter";
export const getReplicationvCenter: typeof import("./getReplicationvCenter").getReplicationvCenter = null as any;
export const getReplicationvCenterOutput: typeof import("./getReplicationvCenter").getReplicationvCenterOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationvCenter","getReplicationvCenterOutput"], () => require("./getReplicationvCenter"));

export { GetResourceGuardProxyArgs, GetResourceGuardProxyResult, GetResourceGuardProxyOutputArgs } from "./getResourceGuardProxy";
export const getResourceGuardProxy: typeof import("./getResourceGuardProxy").getResourceGuardProxy = null as any;
export const getResourceGuardProxyOutput: typeof import("./getResourceGuardProxy").getResourceGuardProxyOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGuardProxy","getResourceGuardProxyOutput"], () => require("./getResourceGuardProxy"));

export { GetVaultArgs, GetVaultResult, GetVaultOutputArgs } from "./getVault";
export const getVault: typeof import("./getVault").getVault = null as any;
export const getVaultOutput: typeof import("./getVault").getVaultOutput = null as any;
utilities.lazyLoad(exports, ["getVault","getVaultOutput"], () => require("./getVault"));

export { PrivateEndpointConnectionArgs } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));

export { ProtectedItemArgs } from "./protectedItem";
export type ProtectedItem = import("./protectedItem").ProtectedItem;
export const ProtectedItem: typeof import("./protectedItem").ProtectedItem = null as any;
utilities.lazyLoad(exports, ["ProtectedItem"], () => require("./protectedItem"));

export { ProtectionContainerArgs } from "./protectionContainer";
export type ProtectionContainer = import("./protectionContainer").ProtectionContainer;
export const ProtectionContainer: typeof import("./protectionContainer").ProtectionContainer = null as any;
utilities.lazyLoad(exports, ["ProtectionContainer"], () => require("./protectionContainer"));

export { ProtectionIntentArgs } from "./protectionIntent";
export type ProtectionIntent = import("./protectionIntent").ProtectionIntent;
export const ProtectionIntent: typeof import("./protectionIntent").ProtectionIntent = null as any;
utilities.lazyLoad(exports, ["ProtectionIntent"], () => require("./protectionIntent"));

export { ProtectionPolicyArgs } from "./protectionPolicy";
export type ProtectionPolicy = import("./protectionPolicy").ProtectionPolicy;
export const ProtectionPolicy: typeof import("./protectionPolicy").ProtectionPolicy = null as any;
utilities.lazyLoad(exports, ["ProtectionPolicy"], () => require("./protectionPolicy"));

export { ReplicationFabricArgs } from "./replicationFabric";
export type ReplicationFabric = import("./replicationFabric").ReplicationFabric;
export const ReplicationFabric: typeof import("./replicationFabric").ReplicationFabric = null as any;
utilities.lazyLoad(exports, ["ReplicationFabric"], () => require("./replicationFabric"));

export { ReplicationMigrationItemArgs } from "./replicationMigrationItem";
export type ReplicationMigrationItem = import("./replicationMigrationItem").ReplicationMigrationItem;
export const ReplicationMigrationItem: typeof import("./replicationMigrationItem").ReplicationMigrationItem = null as any;
utilities.lazyLoad(exports, ["ReplicationMigrationItem"], () => require("./replicationMigrationItem"));

export { ReplicationNetworkMappingArgs } from "./replicationNetworkMapping";
export type ReplicationNetworkMapping = import("./replicationNetworkMapping").ReplicationNetworkMapping;
export const ReplicationNetworkMapping: typeof import("./replicationNetworkMapping").ReplicationNetworkMapping = null as any;
utilities.lazyLoad(exports, ["ReplicationNetworkMapping"], () => require("./replicationNetworkMapping"));

export { ReplicationPolicyArgs } from "./replicationPolicy";
export type ReplicationPolicy = import("./replicationPolicy").ReplicationPolicy;
export const ReplicationPolicy: typeof import("./replicationPolicy").ReplicationPolicy = null as any;
utilities.lazyLoad(exports, ["ReplicationPolicy"], () => require("./replicationPolicy"));

export { ReplicationProtectedItemArgs } from "./replicationProtectedItem";
export type ReplicationProtectedItem = import("./replicationProtectedItem").ReplicationProtectedItem;
export const ReplicationProtectedItem: typeof import("./replicationProtectedItem").ReplicationProtectedItem = null as any;
utilities.lazyLoad(exports, ["ReplicationProtectedItem"], () => require("./replicationProtectedItem"));

export { ReplicationProtectionContainerMappingArgs } from "./replicationProtectionContainerMapping";
export type ReplicationProtectionContainerMapping = import("./replicationProtectionContainerMapping").ReplicationProtectionContainerMapping;
export const ReplicationProtectionContainerMapping: typeof import("./replicationProtectionContainerMapping").ReplicationProtectionContainerMapping = null as any;
utilities.lazyLoad(exports, ["ReplicationProtectionContainerMapping"], () => require("./replicationProtectionContainerMapping"));

export { ReplicationRecoveryPlanArgs } from "./replicationRecoveryPlan";
export type ReplicationRecoveryPlan = import("./replicationRecoveryPlan").ReplicationRecoveryPlan;
export const ReplicationRecoveryPlan: typeof import("./replicationRecoveryPlan").ReplicationRecoveryPlan = null as any;
utilities.lazyLoad(exports, ["ReplicationRecoveryPlan"], () => require("./replicationRecoveryPlan"));

export { ReplicationRecoveryServicesProviderArgs } from "./replicationRecoveryServicesProvider";
export type ReplicationRecoveryServicesProvider = import("./replicationRecoveryServicesProvider").ReplicationRecoveryServicesProvider;
export const ReplicationRecoveryServicesProvider: typeof import("./replicationRecoveryServicesProvider").ReplicationRecoveryServicesProvider = null as any;
utilities.lazyLoad(exports, ["ReplicationRecoveryServicesProvider"], () => require("./replicationRecoveryServicesProvider"));

export { ReplicationStorageClassificationMappingArgs } from "./replicationStorageClassificationMapping";
export type ReplicationStorageClassificationMapping = import("./replicationStorageClassificationMapping").ReplicationStorageClassificationMapping;
export const ReplicationStorageClassificationMapping: typeof import("./replicationStorageClassificationMapping").ReplicationStorageClassificationMapping = null as any;
utilities.lazyLoad(exports, ["ReplicationStorageClassificationMapping"], () => require("./replicationStorageClassificationMapping"));

export { ReplicationvCenterArgs } from "./replicationvCenter";
export type ReplicationvCenter = import("./replicationvCenter").ReplicationvCenter;
export const ReplicationvCenter: typeof import("./replicationvCenter").ReplicationvCenter = null as any;
utilities.lazyLoad(exports, ["ReplicationvCenter"], () => require("./replicationvCenter"));

export { ResourceGuardProxyArgs } from "./resourceGuardProxy";
export type ResourceGuardProxy = import("./resourceGuardProxy").ResourceGuardProxy;
export const ResourceGuardProxy: typeof import("./resourceGuardProxy").ResourceGuardProxy = null as any;
utilities.lazyLoad(exports, ["ResourceGuardProxy"], () => require("./resourceGuardProxy"));

export { VaultArgs } from "./vault";
export type Vault = import("./vault").Vault;
export const Vault: typeof import("./vault").Vault = null as any;
utilities.lazyLoad(exports, ["Vault"], () => require("./vault"));


// Export enums:
export * from "../../types/enums/recoveryservices/v20210701";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:recoveryservices/v20210701:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ProtectedItem":
                return new ProtectedItem(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ProtectionContainer":
                return new ProtectionContainer(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ProtectionIntent":
                return new ProtectionIntent(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ProtectionPolicy":
                return new ProtectionPolicy(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationFabric":
                return new ReplicationFabric(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationMigrationItem":
                return new ReplicationMigrationItem(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationNetworkMapping":
                return new ReplicationNetworkMapping(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationPolicy":
                return new ReplicationPolicy(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationProtectedItem":
                return new ReplicationProtectedItem(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationProtectionContainerMapping":
                return new ReplicationProtectionContainerMapping(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationRecoveryPlan":
                return new ReplicationRecoveryPlan(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationRecoveryServicesProvider":
                return new ReplicationRecoveryServicesProvider(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationStorageClassificationMapping":
                return new ReplicationStorageClassificationMapping(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ReplicationvCenter":
                return new ReplicationvCenter(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:ResourceGuardProxy":
                return new ResourceGuardProxy(name, <any>undefined, { urn })
            case "azure-native:recoveryservices/v20210701:Vault":
                return new Vault(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "recoveryservices/v20210701", _module)
