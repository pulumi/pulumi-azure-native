// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Object model for the Azure PowerShell script.
 */
export class AzurePowerShellScript extends pulumi.CustomResource {
    /**
     * Get an existing AzurePowerShellScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AzurePowerShellScript {
        return new AzurePowerShellScript(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:resources/v20201001:AzurePowerShellScript';

    /**
     * Returns true if the given object is an instance of AzurePowerShellScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzurePowerShellScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzurePowerShellScript.__pulumiType;
    }

    /**
     * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
     */
    public readonly arguments!: pulumi.Output<string | undefined>;
    /**
     * Azure PowerShell module version to be used.
     */
    public readonly azPowerShellVersion!: pulumi.Output<string>;
    /**
     * The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
     */
    public readonly cleanupPreference!: pulumi.Output<string | undefined>;
    /**
     * Container settings.
     */
    public readonly containerSettings!: pulumi.Output<outputs.resources.v20201001.ContainerConfigurationResponse | undefined>;
    /**
     * The environment variables to pass over to the script.
     */
    public readonly environmentVariables!: pulumi.Output<outputs.resources.v20201001.EnvironmentVariableResponse[] | undefined>;
    /**
     * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
     */
    public readonly forceUpdateTag!: pulumi.Output<string | undefined>;
    /**
     * Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
     */
    public readonly identity!: pulumi.Output<outputs.resources.v20201001.ManagedServiceIdentityResponse | undefined>;
    /**
     * Type of the script.
     * Expected value is 'AzurePowerShell'.
     */
    public readonly kind!: pulumi.Output<"AzurePowerShell">;
    /**
     * The location of the ACI and the storage account for the deployment script.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of this resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * List of script outputs.
     */
    public /*out*/ readonly outputs!: pulumi.Output<{[key: string]: any}>;
    /**
     * Uri for the script. This is the entry point for the external script.
     */
    public readonly primaryScriptUri!: pulumi.Output<string | undefined>;
    /**
     * State of the script execution. This only appears in the response.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
     */
    public readonly retentionInterval!: pulumi.Output<string>;
    /**
     * Script body.
     */
    public readonly scriptContent!: pulumi.Output<string | undefined>;
    /**
     * Contains the results of script execution.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.resources.v20201001.ScriptStatusResponse>;
    /**
     * Storage Account settings.
     */
    public readonly storageAccountSettings!: pulumi.Output<outputs.resources.v20201001.StorageAccountConfigurationResponse | undefined>;
    /**
     * Supporting files for the external script.
     */
    public readonly supportingScriptUris!: pulumi.Output<string[] | undefined>;
    /**
     * The system metadata related to this resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.resources.v20201001.SystemDataResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
     */
    public readonly timeout!: pulumi.Output<string | undefined>;
    /**
     * Type of this resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a AzurePowerShellScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzurePowerShellScriptArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.azPowerShellVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azPowerShellVersion'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.retentionInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionInterval'");
            }
            inputs["arguments"] = args ? args.arguments : undefined;
            inputs["azPowerShellVersion"] = args ? args.azPowerShellVersion : undefined;
            inputs["cleanupPreference"] = (args ? args.cleanupPreference : undefined) ?? "Always";
            inputs["containerSettings"] = args ? args.containerSettings : undefined;
            inputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            inputs["forceUpdateTag"] = args ? args.forceUpdateTag : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["kind"] = "AzurePowerShell";
            inputs["location"] = args ? args.location : undefined;
            inputs["primaryScriptUri"] = args ? args.primaryScriptUri : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["retentionInterval"] = args ? args.retentionInterval : undefined;
            inputs["scriptContent"] = args ? args.scriptContent : undefined;
            inputs["scriptName"] = args ? args.scriptName : undefined;
            inputs["storageAccountSettings"] = args ? args.storageAccountSettings : undefined;
            inputs["supportingScriptUris"] = args ? args.supportingScriptUris : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = (args ? args.timeout : undefined) ?? "P1D";
            inputs["name"] = undefined /*out*/;
            inputs["outputs"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["arguments"] = undefined /*out*/;
            inputs["azPowerShellVersion"] = undefined /*out*/;
            inputs["cleanupPreference"] = undefined /*out*/;
            inputs["containerSettings"] = undefined /*out*/;
            inputs["environmentVariables"] = undefined /*out*/;
            inputs["forceUpdateTag"] = undefined /*out*/;
            inputs["identity"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["outputs"] = undefined /*out*/;
            inputs["primaryScriptUri"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["retentionInterval"] = undefined /*out*/;
            inputs["scriptContent"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["storageAccountSettings"] = undefined /*out*/;
            inputs["supportingScriptUris"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["timeout"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:resources/v20201001:AzurePowerShellScript" }, { type: "azure-native:resources:AzurePowerShellScript" }, { type: "azure-nextgen:resources:AzurePowerShellScript" }, { type: "azure-native:resources/v20191001preview:AzurePowerShellScript" }, { type: "azure-nextgen:resources/v20191001preview:AzurePowerShellScript" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AzurePowerShellScript.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a AzurePowerShellScript resource.
 */
export interface AzurePowerShellScriptArgs {
    /**
     * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
     */
    arguments?: pulumi.Input<string>;
    /**
     * Azure PowerShell module version to be used.
     */
    azPowerShellVersion: pulumi.Input<string>;
    /**
     * The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
     */
    cleanupPreference?: pulumi.Input<string | enums.resources.v20201001.CleanupOptions>;
    /**
     * Container settings.
     */
    containerSettings?: pulumi.Input<inputs.resources.v20201001.ContainerConfigurationArgs>;
    /**
     * The environment variables to pass over to the script.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.resources.v20201001.EnvironmentVariableArgs>[]>;
    /**
     * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
     */
    forceUpdateTag?: pulumi.Input<string>;
    /**
     * Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
     */
    identity?: pulumi.Input<inputs.resources.v20201001.ManagedServiceIdentityArgs>;
    /**
     * Type of the script.
     * Expected value is 'AzurePowerShell'.
     */
    kind: pulumi.Input<"AzurePowerShell">;
    /**
     * The location of the ACI and the storage account for the deployment script.
     */
    location?: pulumi.Input<string>;
    /**
     * Uri for the script. This is the entry point for the external script.
     */
    primaryScriptUri?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
     */
    retentionInterval: pulumi.Input<string>;
    /**
     * Script body.
     */
    scriptContent?: pulumi.Input<string>;
    /**
     * Name of the deployment script.
     */
    scriptName?: pulumi.Input<string>;
    /**
     * Storage Account settings.
     */
    storageAccountSettings?: pulumi.Input<inputs.resources.v20201001.StorageAccountConfigurationArgs>;
    /**
     * Supporting files for the external script.
     */
    supportingScriptUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
     */
    timeout?: pulumi.Input<string>;
}
