// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Deployment stack object.
 *
 * Uses Azure REST API version 2024-03-01. In version 2.x of the Azure Native provider, it used API version 2022-08-01-preview.
 *
 * Other available API versions: 2022-08-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native resources [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class DeploymentStackAtSubscription extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentStackAtSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DeploymentStackAtSubscription {
        return new DeploymentStackAtSubscription(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:resources:DeploymentStackAtSubscription';

    /**
     * Returns true if the given object is an instance of DeploymentStackAtSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeploymentStackAtSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentStackAtSubscription.__pulumiType;
    }

    /**
     * Defines the behavior of resources that are no longer managed after the Deployment stack is updated or deleted.
     */
    declare public readonly actionOnUnmanage: pulumi.Output<outputs.resources.ActionOnUnmanageResponse>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The correlation id of the last Deployment stack upsert or delete operation. It is in GUID format and is used for tracing.
     */
    declare public /*out*/ readonly correlationId: pulumi.Output<string>;
    /**
     * The debug setting of the deployment.
     */
    declare public readonly debugSetting: pulumi.Output<outputs.resources.DeploymentStacksDebugSettingResponse | undefined>;
    /**
     * An array of resources that were deleted during the most recent Deployment stack update. Deleted means that the resource was removed from the template and relevant deletion operations were specified.
     */
    declare public /*out*/ readonly deletedResources: pulumi.Output<outputs.resources.ResourceReferenceResponse[]>;
    /**
     * Defines how resources deployed by the stack are locked.
     */
    declare public readonly denySettings: pulumi.Output<outputs.resources.DenySettingsResponse>;
    /**
     * The resourceId of the deployment resource created by the deployment stack.
     */
    declare public /*out*/ readonly deploymentId: pulumi.Output<string>;
    /**
     * The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
     */
    declare public readonly deploymentScope: pulumi.Output<string | undefined>;
    /**
     * Deployment stack description. Max length of 4096 characters.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * An array of resources that were detached during the most recent Deployment stack update. Detached means that the resource was removed from the template, but no relevant deletion operations were specified. So, the resource still exists while no longer being associated with the stack.
     */
    declare public /*out*/ readonly detachedResources: pulumi.Output<outputs.resources.ResourceReferenceResponse[]>;
    /**
     * The duration of the last successful Deployment stack update.
     */
    declare public /*out*/ readonly duration: pulumi.Output<string>;
    /**
     * The error detail.
     */
    declare public /*out*/ readonly error: pulumi.Output<outputs.resources.ErrorDetailResponse | undefined>;
    /**
     * An array of resources that failed to reach goal state during the most recent update. Each resourceId is accompanied by an error message.
     */
    declare public /*out*/ readonly failedResources: pulumi.Output<outputs.resources.ResourceReferenceExtendedResponse[]>;
    /**
     * The geo-location where the resource lives. Required for subscription and management group scoped stacks. The location is inherited from the resource group for resource group scoped stacks.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The outputs of the deployment resource created by the deployment stack.
     */
    declare public /*out*/ readonly outputs: pulumi.Output<any>;
    /**
     * Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both.
     */
    declare public readonly parameters: pulumi.Output<{[key: string]: outputs.resources.DeploymentParameterResponse} | undefined>;
    /**
     * The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
     */
    declare public readonly parametersLink: pulumi.Output<outputs.resources.DeploymentStacksParametersLinkResponse | undefined>;
    /**
     * State of the deployment stack.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * An array of resources currently managed by the deployment stack.
     */
    declare public /*out*/ readonly resources: pulumi.Output<outputs.resources.ManagedResourceReferenceResponse[]>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.resources.SystemDataResponse>;
    /**
     * Resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a DeploymentStackAtSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentStackAtSubscriptionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.actionOnUnmanage === undefined && !opts.urn) {
                throw new Error("Missing required property 'actionOnUnmanage'");
            }
            if (args?.denySettings === undefined && !opts.urn) {
                throw new Error("Missing required property 'denySettings'");
            }
            resourceInputs["actionOnUnmanage"] = args?.actionOnUnmanage;
            resourceInputs["bypassStackOutOfSyncError"] = args?.bypassStackOutOfSyncError;
            resourceInputs["debugSetting"] = args?.debugSetting;
            resourceInputs["denySettings"] = args?.denySettings;
            resourceInputs["deploymentScope"] = args?.deploymentScope;
            resourceInputs["deploymentStackName"] = args?.deploymentStackName;
            resourceInputs["description"] = args?.description;
            resourceInputs["location"] = args?.location;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["parametersLink"] = args?.parametersLink;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["template"] = args?.template;
            resourceInputs["templateLink"] = args?.templateLink;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["correlationId"] = undefined /*out*/;
            resourceInputs["deletedResources"] = undefined /*out*/;
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["detachedResources"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["failedResources"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resources"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["actionOnUnmanage"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["correlationId"] = undefined /*out*/;
            resourceInputs["debugSetting"] = undefined /*out*/;
            resourceInputs["deletedResources"] = undefined /*out*/;
            resourceInputs["denySettings"] = undefined /*out*/;
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["deploymentScope"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["detachedResources"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["failedResources"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["parametersLink"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resources"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:resources/v20220801preview:DeploymentStackAtSubscription" }, { type: "azure-native:resources/v20240301:DeploymentStackAtSubscription" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DeploymentStackAtSubscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DeploymentStackAtSubscription resource.
 */
export interface DeploymentStackAtSubscriptionArgs {
    /**
     * Defines the behavior of resources that are no longer managed after the Deployment stack is updated or deleted.
     */
    actionOnUnmanage: pulumi.Input<inputs.resources.ActionOnUnmanageArgs>;
    /**
     * Flag to bypass service errors that indicate the stack resource list is not correctly synchronized.
     */
    bypassStackOutOfSyncError?: pulumi.Input<boolean>;
    /**
     * The debug setting of the deployment.
     */
    debugSetting?: pulumi.Input<inputs.resources.DeploymentStacksDebugSettingArgs>;
    /**
     * Defines how resources deployed by the stack are locked.
     */
    denySettings: pulumi.Input<inputs.resources.DenySettingsArgs>;
    /**
     * The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
     */
    deploymentScope?: pulumi.Input<string>;
    /**
     * Name of the deployment stack.
     */
    deploymentStackName?: pulumi.Input<string>;
    /**
     * Deployment stack description. Max length of 4096 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives. Required for subscription and management group scoped stacks. The location is inherited from the resource group for resource group scoped stacks.
     */
    location?: pulumi.Input<string>;
    /**
     * Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<inputs.resources.DeploymentParameterArgs>}>;
    /**
     * The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
     */
    parametersLink?: pulumi.Input<inputs.resources.DeploymentStacksParametersLinkArgs>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
     */
    template?: any;
    /**
     * The URI of the template. Use either the templateLink property or the template property, but not both.
     */
    templateLink?: pulumi.Input<inputs.resources.DeploymentStacksTemplateLinkArgs>;
}
