// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Represents a SessionHostConfiguration definition.
 */
export class SessionHostConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SessionHostConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SessionHostConfiguration {
        return new SessionHostConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:desktopvirtualization/v20210513preview:SessionHostConfiguration';

    /**
     * Returns true if the given object is an instance of SessionHostConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SessionHostConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SessionHostConfiguration.__pulumiType;
    }

    /**
     * The disk type used by virtual machine in hostpool session host.
     */
    public readonly diskType!: pulumi.Output<string | undefined>;
    /**
     * Domain configurations of session hosts.
     */
    public readonly domainInfo!: pulumi.Output<outputs.desktopvirtualization.v20210513preview.DomainInfoPropertiesResponse | undefined>;
    /**
     * Image configurations of HostPool.
     */
    public readonly imageInfo!: pulumi.Output<outputs.desktopvirtualization.v20210513preview.ImageInfoPropertiesResponse | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.desktopvirtualization.v20210513preview.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The id of the size of a virtual machine connected to a hostpool.
     */
    public readonly vMSizeId!: pulumi.Output<string | undefined>;
    /**
     * The time when session host configuration was last modified and something was changed.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * The uri to the storage blob containing scripts to be run on the virtual machine after provisioning.
     */
    public readonly vmCustomConfigurationUri!: pulumi.Output<string | undefined>;

    /**
     * Create a SessionHostConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SessionHostConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.hostPoolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostPoolName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["diskType"] = args ? args.diskType : undefined;
            inputs["domainInfo"] = args ? args.domainInfo : undefined;
            inputs["hostPoolName"] = args ? args.hostPoolName : undefined;
            inputs["imageInfo"] = args ? args.imageInfo : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["vMSizeId"] = args ? args.vMSizeId : undefined;
            inputs["vmCustomConfigurationUri"] = args ? args.vmCustomConfigurationUri : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        } else {
            inputs["diskType"] = undefined /*out*/;
            inputs["domainInfo"] = undefined /*out*/;
            inputs["imageInfo"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["vMSizeId"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
            inputs["vmCustomConfigurationUri"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:desktopvirtualization/v20210513preview:SessionHostConfiguration" }, { type: "azure-native:desktopvirtualization:SessionHostConfiguration" }, { type: "azure-nextgen:desktopvirtualization:SessionHostConfiguration" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SessionHostConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a SessionHostConfiguration resource.
 */
export interface SessionHostConfigurationArgs {
    /**
     * The disk type used by virtual machine in hostpool session host.
     */
    diskType?: pulumi.Input<string | enums.desktopvirtualization.v20210513preview.VirtualMachineDiskType>;
    /**
     * Domain configurations of session hosts.
     */
    domainInfo?: pulumi.Input<inputs.desktopvirtualization.v20210513preview.DomainInfoPropertiesArgs>;
    /**
     * The name of the host pool within the specified resource group
     */
    hostPoolName: pulumi.Input<string>;
    /**
     * Image configurations of HostPool.
     */
    imageInfo?: pulumi.Input<inputs.desktopvirtualization.v20210513preview.ImageInfoPropertiesArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The id of the size of a virtual machine connected to a hostpool.
     */
    vMSizeId?: pulumi.Input<string>;
    /**
     * The uri to the storage blob containing scripts to be run on the virtual machine after provisioning.
     */
    vmCustomConfigurationUri?: pulumi.Input<string>;
}
