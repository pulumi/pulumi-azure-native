// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Represents a ApplicationGroup definition.
 *
 * @deprecated Version 2019-09-24-preview will be removed in v2 of the provider.
 */
export class ApplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ApplicationGroup {
        pulumi.log.warn("ApplicationGroup is deprecated: Version 2019-09-24-preview will be removed in v2 of the provider.")
        return new ApplicationGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:desktopvirtualization/v20190924preview:ApplicationGroup';

    /**
     * Returns true if the given object is an instance of ApplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationGroup.__pulumiType;
    }

    /**
     * Resource Type of ApplicationGroup.
     */
    public readonly applicationGroupType!: pulumi.Output<string>;
    /**
     * Description of ApplicationGroup.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Friendly name of ApplicationGroup.
     */
    public readonly friendlyName!: pulumi.Output<string | undefined>;
    /**
     * HostPool arm path of ApplicationGroup.
     */
    public readonly hostPoolArmPath!: pulumi.Output<string>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Workspace arm path of ApplicationGroup.
     */
    public /*out*/ readonly workspaceArmPath!: pulumi.Output<string>;

    /**
     * Create a ApplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2019-09-24-preview will be removed in v2 of the provider. */
    constructor(name: string, args: ApplicationGroupArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ApplicationGroup is deprecated: Version 2019-09-24-preview will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.applicationGroupType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationGroupType'");
            }
            if ((!args || args.hostPoolArmPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostPoolArmPath'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["applicationGroupName"] = args ? args.applicationGroupName : undefined;
            resourceInputs["applicationGroupType"] = args ? args.applicationGroupType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["hostPoolArmPath"] = args ? args.hostPoolArmPath : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workspaceArmPath"] = undefined /*out*/;
        } else {
            resourceInputs["applicationGroupType"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["friendlyName"] = undefined /*out*/;
            resourceInputs["hostPoolArmPath"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workspaceArmPath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:desktopvirtualization:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20190123preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20191210preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20200921preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20201019preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20201102preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20201110preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20210114preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20210201preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20210309preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20210401preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20210712:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20210903preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20220210preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20220401preview:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20220909:ApplicationGroup" }, { type: "azure-native:desktopvirtualization/v20221014preview:ApplicationGroup" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ApplicationGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ApplicationGroup resource.
 */
export interface ApplicationGroupArgs {
    /**
     * The name of the application group
     */
    applicationGroupName?: pulumi.Input<string>;
    /**
     * Resource Type of ApplicationGroup.
     */
    applicationGroupType: pulumi.Input<string | enums.desktopvirtualization.v20190924preview.ApplicationGroupType>;
    /**
     * Description of ApplicationGroup.
     */
    description?: pulumi.Input<string>;
    /**
     * Friendly name of ApplicationGroup.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * HostPool arm path of ApplicationGroup.
     */
    hostPoolArmPath: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
