// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Represents a scaling plan definition.
 *
 * @deprecated Version 2020-11-10-preview will be removed in v2 of the provider.
 */
export class ScalingPlan extends pulumi.CustomResource {
    /**
     * Get an existing ScalingPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ScalingPlan {
        pulumi.log.warn("ScalingPlan is deprecated: Version 2020-11-10-preview will be removed in v2 of the provider.")
        return new ScalingPlan(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:desktopvirtualization/v20201110preview:ScalingPlan';

    /**
     * Returns true if the given object is an instance of ScalingPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScalingPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScalingPlan.__pulumiType;
    }

    /**
     * Description of scaling plan.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Exclusion tag for scaling plan.
     */
    public readonly exclusionTag!: pulumi.Output<string | undefined>;
    /**
     * User friendly name of scaling plan.
     */
    public readonly friendlyName!: pulumi.Output<string | undefined>;
    /**
     * List of ScalingHostPoolReference definitions.
     */
    public readonly hostPoolReferences!: pulumi.Output<outputs.desktopvirtualization.v20201110preview.ScalingHostPoolReferenceResponse[] | undefined>;
    /**
     * HostPool type for scaling plan.
     */
    public readonly hostPoolType!: pulumi.Output<string | undefined>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * List of ScalingSchedule definitions.
     */
    public readonly schedules!: pulumi.Output<outputs.desktopvirtualization.v20201110preview.ScalingScheduleResponse[] | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Timezone of the scaling plan.
     */
    public readonly timeZone!: pulumi.Output<string | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ScalingPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2020-11-10-preview will be removed in v2 of the provider. */
    constructor(name: string, args: ScalingPlanArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ScalingPlan is deprecated: Version 2020-11-10-preview will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exclusionTag"] = args ? args.exclusionTag : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["hostPoolReferences"] = args ? args.hostPoolReferences : undefined;
            resourceInputs["hostPoolType"] = args ? args.hostPoolType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scalingPlanName"] = args ? args.scalingPlanName : undefined;
            resourceInputs["schedules"] = args ? args.schedules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["exclusionTag"] = undefined /*out*/;
            resourceInputs["friendlyName"] = undefined /*out*/;
            resourceInputs["hostPoolReferences"] = undefined /*out*/;
            resourceInputs["hostPoolType"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["schedules"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:desktopvirtualization:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20210114preview:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20210201preview:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20210309preview:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20210401preview:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20210712:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20210903preview:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20220210preview:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20220401preview:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20220909:ScalingPlan" }, { type: "azure-native:desktopvirtualization/v20221014preview:ScalingPlan" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ScalingPlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ScalingPlan resource.
 */
export interface ScalingPlanArgs {
    /**
     * Description of scaling plan.
     */
    description?: pulumi.Input<string>;
    /**
     * Exclusion tag for scaling plan.
     */
    exclusionTag?: pulumi.Input<string>;
    /**
     * User friendly name of scaling plan.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * List of ScalingHostPoolReference definitions.
     */
    hostPoolReferences?: pulumi.Input<pulumi.Input<inputs.desktopvirtualization.v20201110preview.ScalingHostPoolReferenceArgs>[]>;
    /**
     * HostPool type for scaling plan.
     */
    hostPoolType?: pulumi.Input<string | enums.desktopvirtualization.v20201110preview.HostPoolType>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the scaling plan.
     */
    scalingPlanName?: pulumi.Input<string>;
    /**
     * List of ScalingSchedule definitions.
     */
    schedules?: pulumi.Input<pulumi.Input<inputs.desktopvirtualization.v20201110preview.ScalingScheduleArgs>[]>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Timezone of the scaling plan.
     */
    timeZone?: pulumi.Input<string>;
}
