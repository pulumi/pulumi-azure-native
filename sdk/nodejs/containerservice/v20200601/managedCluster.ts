// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Managed cluster.
 */
export class ManagedCluster extends pulumi.CustomResource {
    /**
     * Get an existing ManagedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ManagedCluster {
        return new ManagedCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:containerservice/v20200601:ManagedCluster';

    /**
     * Returns true if the given object is an instance of ManagedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedCluster.__pulumiType;
    }

    /**
     * Profile of Azure Active Directory configuration.
     */
    public readonly aadProfile!: pulumi.Output<outputs.containerservice.v20200601.ManagedClusterAADProfileResponse | undefined>;
    /**
     * Profile of managed cluster add-on.
     */
    public readonly addonProfiles!: pulumi.Output<{[key: string]: outputs.containerservice.v20200601.ManagedClusterAddonProfileResponse} | undefined>;
    /**
     * Properties of the agent pool.
     */
    public readonly agentPoolProfiles!: pulumi.Output<outputs.containerservice.v20200601.ManagedClusterAgentPoolProfileResponse[] | undefined>;
    /**
     * Access profile for managed cluster API server.
     */
    public readonly apiServerAccessProfile!: pulumi.Output<outputs.containerservice.v20200601.ManagedClusterAPIServerAccessProfileResponse | undefined>;
    /**
     * Parameters to be applied to the cluster-autoscaler when enabled
     */
    public readonly autoScalerProfile!: pulumi.Output<outputs.containerservice.v20200601.ManagedClusterPropertiesResponseAutoScalerProfile | undefined>;
    /**
     * ResourceId of the disk encryption set to use for enabling encryption at rest.
     */
    public readonly diskEncryptionSetID!: pulumi.Output<string | undefined>;
    /**
     * DNS prefix specified when creating the managed cluster.
     */
    public readonly dnsPrefix!: pulumi.Output<string | undefined>;
    /**
     * (DEPRECATING) Whether to enable Kubernetes pod security policy (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy.
     */
    public readonly enablePodSecurityPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to enable Kubernetes Role-Based Access Control.
     */
    public readonly enableRBAC!: pulumi.Output<boolean | undefined>;
    /**
     * FQDN for the master pool.
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * The identity of the managed cluster, if configured.
     */
    public readonly identity!: pulumi.Output<outputs.containerservice.v20200601.ManagedClusterIdentityResponse | undefined>;
    /**
     * Identities associated with the cluster.
     */
    public readonly identityProfile!: pulumi.Output<{[key: string]: outputs.containerservice.v20200601.ManagedClusterPropertiesResponseIdentityProfile} | undefined>;
    /**
     * Version of Kubernetes specified when creating the managed cluster.
     */
    public readonly kubernetesVersion!: pulumi.Output<string | undefined>;
    /**
     * Profile for Linux VMs in the container service cluster.
     */
    public readonly linuxProfile!: pulumi.Output<outputs.containerservice.v20200601.ContainerServiceLinuxProfileResponse | undefined>;
    /**
     * Resource location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The max number of agent pools for the managed cluster.
     */
    public /*out*/ readonly maxAgentPools!: pulumi.Output<number>;
    /**
     * Resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Profile of network configuration.
     */
    public readonly networkProfile!: pulumi.Output<outputs.containerservice.v20200601.ContainerServiceNetworkProfileResponse | undefined>;
    /**
     * Name of the resource group containing agent pool nodes.
     */
    public readonly nodeResourceGroup!: pulumi.Output<string | undefined>;
    /**
     * FQDN of private cluster.
     */
    public /*out*/ readonly privateFQDN!: pulumi.Output<string>;
    /**
     * The current deployment or provisioning state, which only appears in the response.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Information about a service principal identity for the cluster to use for manipulating Azure APIs.
     */
    public readonly servicePrincipalProfile!: pulumi.Output<outputs.containerservice.v20200601.ManagedClusterServicePrincipalProfileResponse | undefined>;
    /**
     * The managed cluster SKU.
     */
    public readonly sku!: pulumi.Output<outputs.containerservice.v20200601.ManagedClusterSKUResponse | undefined>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Profile for Windows VMs in the container service cluster.
     */
    public readonly windowsProfile!: pulumi.Output<outputs.containerservice.v20200601.ManagedClusterWindowsProfileResponse | undefined>;

    /**
     * Create a ManagedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["aadProfile"] = args ? args.aadProfile : undefined;
            resourceInputs["addonProfiles"] = args ? args.addonProfiles : undefined;
            resourceInputs["agentPoolProfiles"] = args ? args.agentPoolProfiles : undefined;
            resourceInputs["apiServerAccessProfile"] = args ? args.apiServerAccessProfile : undefined;
            resourceInputs["autoScalerProfile"] = args ? args.autoScalerProfile : undefined;
            resourceInputs["diskEncryptionSetID"] = args ? args.diskEncryptionSetID : undefined;
            resourceInputs["dnsPrefix"] = args ? args.dnsPrefix : undefined;
            resourceInputs["enablePodSecurityPolicy"] = args ? args.enablePodSecurityPolicy : undefined;
            resourceInputs["enableRBAC"] = args ? args.enableRBAC : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["identityProfile"] = args ? args.identityProfile : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["linuxProfile"] = args ? args.linuxProfile : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["networkProfile"] = args ? (args.networkProfile ? pulumi.output(args.networkProfile).apply(inputs.containerservice.v20200601.containerServiceNetworkProfileArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["nodeResourceGroup"] = args ? args.nodeResourceGroup : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["servicePrincipalProfile"] = args ? args.servicePrincipalProfile : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["windowsProfile"] = args ? args.windowsProfile : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["maxAgentPools"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["privateFQDN"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["aadProfile"] = undefined /*out*/;
            resourceInputs["addonProfiles"] = undefined /*out*/;
            resourceInputs["agentPoolProfiles"] = undefined /*out*/;
            resourceInputs["apiServerAccessProfile"] = undefined /*out*/;
            resourceInputs["autoScalerProfile"] = undefined /*out*/;
            resourceInputs["diskEncryptionSetID"] = undefined /*out*/;
            resourceInputs["dnsPrefix"] = undefined /*out*/;
            resourceInputs["enablePodSecurityPolicy"] = undefined /*out*/;
            resourceInputs["enableRBAC"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["identityProfile"] = undefined /*out*/;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["linuxProfile"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["maxAgentPools"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkProfile"] = undefined /*out*/;
            resourceInputs["nodeResourceGroup"] = undefined /*out*/;
            resourceInputs["privateFQDN"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["servicePrincipalProfile"] = undefined /*out*/;
            resourceInputs["sku"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["windowsProfile"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:containerservice:ManagedCluster" }, { type: "azure-native:containerservice/v20170831:ManagedCluster" }, { type: "azure-native:containerservice/v20180331:ManagedCluster" }, { type: "azure-native:containerservice/v20180801preview:ManagedCluster" }, { type: "azure-native:containerservice/v20190201:ManagedCluster" }, { type: "azure-native:containerservice/v20190401:ManagedCluster" }, { type: "azure-native:containerservice/v20190601:ManagedCluster" }, { type: "azure-native:containerservice/v20190801:ManagedCluster" }, { type: "azure-native:containerservice/v20191001:ManagedCluster" }, { type: "azure-native:containerservice/v20191101:ManagedCluster" }, { type: "azure-native:containerservice/v20200101:ManagedCluster" }, { type: "azure-native:containerservice/v20200201:ManagedCluster" }, { type: "azure-native:containerservice/v20200301:ManagedCluster" }, { type: "azure-native:containerservice/v20200401:ManagedCluster" }, { type: "azure-native:containerservice/v20200701:ManagedCluster" }, { type: "azure-native:containerservice/v20200901:ManagedCluster" }, { type: "azure-native:containerservice/v20201101:ManagedCluster" }, { type: "azure-native:containerservice/v20201201:ManagedCluster" }, { type: "azure-native:containerservice/v20210201:ManagedCluster" }, { type: "azure-native:containerservice/v20210301:ManagedCluster" }, { type: "azure-native:containerservice/v20210501:ManagedCluster" }, { type: "azure-native:containerservice/v20210701:ManagedCluster" }, { type: "azure-native:containerservice/v20210801:ManagedCluster" }, { type: "azure-native:containerservice/v20210901:ManagedCluster" }, { type: "azure-native:containerservice/v20211001:ManagedCluster" }, { type: "azure-native:containerservice/v20211101preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220101:ManagedCluster" }, { type: "azure-native:containerservice/v20220102preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220201:ManagedCluster" }, { type: "azure-native:containerservice/v20220202preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220301:ManagedCluster" }, { type: "azure-native:containerservice/v20220302preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220401:ManagedCluster" }, { type: "azure-native:containerservice/v20220402preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220502preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220601:ManagedCluster" }, { type: "azure-native:containerservice/v20220602preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220701:ManagedCluster" }, { type: "azure-native:containerservice/v20220702preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220802preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220803preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220901:ManagedCluster" }, { type: "azure-native:containerservice/v20220902preview:ManagedCluster" }, { type: "azure-native:containerservice/v20221002preview:ManagedCluster" }, { type: "azure-native:containerservice/v20221101:ManagedCluster" }, { type: "azure-native:containerservice/v20221102preview:ManagedCluster" }, { type: "azure-native:containerservice/v20230101:ManagedCluster" }, { type: "azure-native:containerservice/v20230102preview:ManagedCluster" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ManagedCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ManagedCluster resource.
 */
export interface ManagedClusterArgs {
    /**
     * Profile of Azure Active Directory configuration.
     */
    aadProfile?: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterAADProfileArgs>;
    /**
     * Profile of managed cluster add-on.
     */
    addonProfiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterAddonProfileArgs>}>;
    /**
     * Properties of the agent pool.
     */
    agentPoolProfiles?: pulumi.Input<pulumi.Input<inputs.containerservice.v20200601.ManagedClusterAgentPoolProfileArgs>[]>;
    /**
     * Access profile for managed cluster API server.
     */
    apiServerAccessProfile?: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterAPIServerAccessProfileArgs>;
    /**
     * Parameters to be applied to the cluster-autoscaler when enabled
     */
    autoScalerProfile?: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterPropertiesAutoScalerProfileArgs>;
    /**
     * ResourceId of the disk encryption set to use for enabling encryption at rest.
     */
    diskEncryptionSetID?: pulumi.Input<string>;
    /**
     * DNS prefix specified when creating the managed cluster.
     */
    dnsPrefix?: pulumi.Input<string>;
    /**
     * (DEPRECATING) Whether to enable Kubernetes pod security policy (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy.
     */
    enablePodSecurityPolicy?: pulumi.Input<boolean>;
    /**
     * Whether to enable Kubernetes Role-Based Access Control.
     */
    enableRBAC?: pulumi.Input<boolean>;
    /**
     * The identity of the managed cluster, if configured.
     */
    identity?: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterIdentityArgs>;
    /**
     * Identities associated with the cluster.
     */
    identityProfile?: pulumi.Input<{[key: string]: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterPropertiesIdentityProfileArgs>}>;
    /**
     * Version of Kubernetes specified when creating the managed cluster.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Profile for Linux VMs in the container service cluster.
     */
    linuxProfile?: pulumi.Input<inputs.containerservice.v20200601.ContainerServiceLinuxProfileArgs>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * Profile of network configuration.
     */
    networkProfile?: pulumi.Input<inputs.containerservice.v20200601.ContainerServiceNetworkProfileArgs>;
    /**
     * Name of the resource group containing agent pool nodes.
     */
    nodeResourceGroup?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the managed cluster resource.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * Information about a service principal identity for the cluster to use for manipulating Azure APIs.
     */
    servicePrincipalProfile?: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterServicePrincipalProfileArgs>;
    /**
     * The managed cluster SKU.
     */
    sku?: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterSKUArgs>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Profile for Windows VMs in the container service cluster.
     */
    windowsProfile?: pulumi.Input<inputs.containerservice.v20200601.ManagedClusterWindowsProfileArgs>;
}
