// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Event Subscription
 */
export class PartnerTopicEventSubscription extends pulumi.CustomResource {
    /**
     * Get an existing PartnerTopicEventSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PartnerTopicEventSubscription {
        return new PartnerTopicEventSubscription(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:eventgrid/v20200401preview:PartnerTopicEventSubscription';

    /**
     * Returns true if the given object is an instance of PartnerTopicEventSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PartnerTopicEventSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PartnerTopicEventSubscription.__pulumiType;
    }

    /**
     * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    public readonly deadLetterDestination!: pulumi.Output<outputs.eventgrid.v20200401preview.StorageBlobDeadLetterDestinationResponse | undefined>;
    /**
     * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    public readonly deadLetterWithResourceIdentity!: pulumi.Output<outputs.eventgrid.v20200401preview.DeadLetterWithResourceIdentityResponse | undefined>;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    public readonly deliveryWithResourceIdentity!: pulumi.Output<outputs.eventgrid.v20200401preview.DeliveryWithResourceIdentityResponse | undefined>;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    public readonly destination!: pulumi.Output<outputs.eventgrid.v20200401preview.AzureFunctionEventSubscriptionDestinationResponse | outputs.eventgrid.v20200401preview.EventHubEventSubscriptionDestinationResponse | outputs.eventgrid.v20200401preview.HybridConnectionEventSubscriptionDestinationResponse | outputs.eventgrid.v20200401preview.ServiceBusQueueEventSubscriptionDestinationResponse | outputs.eventgrid.v20200401preview.ServiceBusTopicEventSubscriptionDestinationResponse | outputs.eventgrid.v20200401preview.StorageQueueEventSubscriptionDestinationResponse | outputs.eventgrid.v20200401preview.WebHookEventSubscriptionDestinationResponse | undefined>;
    /**
     * The event delivery schema for the event subscription.
     */
    public readonly eventDeliverySchema!: pulumi.Output<string | undefined>;
    /**
     * Expiration time of the event subscription.
     */
    public readonly expirationTimeUtc!: pulumi.Output<string | undefined>;
    /**
     * Information about the filter for the event subscription.
     */
    public readonly filter!: pulumi.Output<outputs.eventgrid.v20200401preview.EventSubscriptionFilterResponse | undefined>;
    /**
     * List of user defined labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Provisioning state of the event subscription.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
     */
    public readonly retryPolicy!: pulumi.Output<outputs.eventgrid.v20200401preview.RetryPolicyResponse | undefined>;
    /**
     * Name of the topic of the event subscription.
     */
    public /*out*/ readonly topic!: pulumi.Output<string>;
    /**
     * Type of the resource
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a PartnerTopicEventSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartnerTopicEventSubscriptionArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.eventSubscriptionName === undefined) {
                throw new Error("Missing required property 'eventSubscriptionName'");
            }
            if (!args || args.partnerTopicName === undefined) {
                throw new Error("Missing required property 'partnerTopicName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["deadLetterDestination"] = args ? args.deadLetterDestination : undefined;
            inputs["deadLetterWithResourceIdentity"] = args ? args.deadLetterWithResourceIdentity : undefined;
            inputs["deliveryWithResourceIdentity"] = args ? args.deliveryWithResourceIdentity : undefined;
            inputs["destination"] = args ? args.destination : undefined;
            inputs["eventDeliverySchema"] = args ? args.eventDeliverySchema : undefined;
            inputs["eventSubscriptionName"] = args ? args.eventSubscriptionName : undefined;
            inputs["expirationTimeUtc"] = args ? args.expirationTimeUtc : undefined;
            inputs["filter"] = args ? args.filter : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["partnerTopicName"] = args ? args.partnerTopicName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["retryPolicy"] = args ? args.retryPolicy : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["topic"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["deadLetterDestination"] = undefined /*out*/;
            inputs["deadLetterWithResourceIdentity"] = undefined /*out*/;
            inputs["deliveryWithResourceIdentity"] = undefined /*out*/;
            inputs["destination"] = undefined /*out*/;
            inputs["eventDeliverySchema"] = undefined /*out*/;
            inputs["expirationTimeUtc"] = undefined /*out*/;
            inputs["filter"] = undefined /*out*/;
            inputs["labels"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["retryPolicy"] = undefined /*out*/;
            inputs["topic"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(PartnerTopicEventSubscription.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a PartnerTopicEventSubscription resource.
 */
export interface PartnerTopicEventSubscriptionArgs {
    /**
     * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    readonly deadLetterDestination?: pulumi.Input<inputs.eventgrid.v20200401preview.StorageBlobDeadLetterDestination>;
    /**
     * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    readonly deadLetterWithResourceIdentity?: pulumi.Input<inputs.eventgrid.v20200401preview.DeadLetterWithResourceIdentity>;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    readonly deliveryWithResourceIdentity?: pulumi.Input<inputs.eventgrid.v20200401preview.DeliveryWithResourceIdentity>;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    readonly destination?: pulumi.Input<inputs.eventgrid.v20200401preview.AzureFunctionEventSubscriptionDestination | inputs.eventgrid.v20200401preview.EventHubEventSubscriptionDestination | inputs.eventgrid.v20200401preview.HybridConnectionEventSubscriptionDestination | inputs.eventgrid.v20200401preview.ServiceBusQueueEventSubscriptionDestination | inputs.eventgrid.v20200401preview.ServiceBusTopicEventSubscriptionDestination | inputs.eventgrid.v20200401preview.StorageQueueEventSubscriptionDestination | inputs.eventgrid.v20200401preview.WebHookEventSubscriptionDestination>;
    /**
     * The event delivery schema for the event subscription.
     */
    readonly eventDeliverySchema?: pulumi.Input<string>;
    /**
     * Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.
     */
    readonly eventSubscriptionName: pulumi.Input<string>;
    /**
     * Expiration time of the event subscription.
     */
    readonly expirationTimeUtc?: pulumi.Input<string>;
    /**
     * Information about the filter for the event subscription.
     */
    readonly filter?: pulumi.Input<inputs.eventgrid.v20200401preview.EventSubscriptionFilter>;
    /**
     * List of user defined labels.
     */
    readonly labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the partner topic.
     */
    readonly partnerTopicName: pulumi.Input<string>;
    /**
     * The name of the resource group within the user's subscription.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
     */
    readonly retryPolicy?: pulumi.Input<inputs.eventgrid.v20200401preview.RetryPolicy>;
}
