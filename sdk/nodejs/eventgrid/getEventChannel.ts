// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

export function getEventChannel(args: GetEventChannelArgs, opts?: pulumi.InvokeOptions): Promise<GetEventChannelResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("azure-nextgen:eventgrid:getEventChannel", {
        "eventChannelName": args.eventChannelName,
        "partnerNamespaceName": args.partnerNamespaceName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface GetEventChannelArgs {
    /**
     * Name of the event channel.
     */
    readonly eventChannelName: string;
    /**
     * Name of the partner namespace.
     */
    readonly partnerNamespaceName: string;
    /**
     * The name of the resource group within the user's subscription.
     */
    readonly resourceGroupName: string;
}

/**
 * Event Channel.
 */
export interface GetEventChannelResult {
    /**
     * Represents the destination of an event channel.
     */
    readonly destination?: outputs.eventgrid.EventChannelDestinationResponse;
    /**
     * Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
     * the event channel and corresponding partner topic are deleted.
     */
    readonly expirationTimeIfNotActivatedUtc?: string;
    /**
     * Information about the filter for the event channel.
     */
    readonly filter?: outputs.eventgrid.EventChannelFilterResponse;
    /**
     * Fully qualified identifier of the resource.
     */
    readonly id: string;
    /**
     * Name of the resource
     */
    readonly name: string;
    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     */
    readonly partnerTopicFriendlyDescription?: string;
    /**
     * The readiness state of the corresponding partner topic.
     */
    readonly partnerTopicReadinessState: string;
    /**
     * Provisioning state of the event channel.
     */
    readonly provisioningState: string;
    /**
     * Source of the event channel. This represents a unique resource in the partner's resource model.
     */
    readonly source?: outputs.eventgrid.EventChannelSourceResponse;
    /**
     * Type of the resource
     */
    readonly type: string;
}
