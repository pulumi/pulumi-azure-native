// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Event Grid Partner Topic.
 *
 * Uses Azure REST API version 2025-02-15. In version 2.x of the Azure Native provider, it used API version 2022-06-15.
 *
 * Other available API versions: 2022-06-15, 2023-06-01-preview, 2023-12-15-preview, 2024-06-01-preview, 2024-12-15-preview, 2025-04-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native eventgrid [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class PartnerTopic extends pulumi.CustomResource {
    /**
     * Get an existing PartnerTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PartnerTopic {
        return new PartnerTopic(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:eventgrid:PartnerTopic';

    /**
     * Returns true if the given object is an instance of PartnerTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PartnerTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PartnerTopic.__pulumiType;
    }

    /**
     * Activation state of the partner topic.
     */
    public readonly activationState!: pulumi.Output<string | undefined>;
    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * Event Type information from the corresponding event channel.
     */
    public readonly eventTypeInfo!: pulumi.Output<outputs.eventgrid.EventTypeInfoResponse | undefined>;
    /**
     * Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     */
    public readonly expirationTimeIfNotActivatedUtc!: pulumi.Output<string | undefined>;
    /**
     * Identity information for the Partner Topic resource.
     */
    public readonly identity!: pulumi.Output<outputs.eventgrid.IdentityInfoResponse | undefined>;
    /**
     * Location of the resource.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Context or helpful message that can be used during the approval process by the subscriber.
     */
    public readonly messageForActivation!: pulumi.Output<string | undefined>;
    /**
     * Name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The immutableId of the corresponding partner registration.
     */
    public readonly partnerRegistrationImmutableId!: pulumi.Output<string | undefined>;
    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     */
    public readonly partnerTopicFriendlyDescription!: pulumi.Output<string | undefined>;
    /**
     * Provisioning state of the partner topic.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Source associated with this partner topic. This represents a unique partner resource.
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * The system metadata relating to the Event Grid resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.eventgrid.SystemDataResponse>;
    /**
     * Tags of the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a PartnerTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartnerTopicArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["activationState"] = args?.activationState;
            resourceInputs["eventTypeInfo"] = args?.eventTypeInfo;
            resourceInputs["expirationTimeIfNotActivatedUtc"] = args?.expirationTimeIfNotActivatedUtc;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["messageForActivation"] = args?.messageForActivation;
            resourceInputs["partnerRegistrationImmutableId"] = args?.partnerRegistrationImmutableId;
            resourceInputs["partnerTopicFriendlyDescription"] = args?.partnerTopicFriendlyDescription;
            resourceInputs["partnerTopicName"] = args?.partnerTopicName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["source"] = args?.source;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["activationState"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["eventTypeInfo"] = undefined /*out*/;
            resourceInputs["expirationTimeIfNotActivatedUtc"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["messageForActivation"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["partnerRegistrationImmutableId"] = undefined /*out*/;
            resourceInputs["partnerTopicFriendlyDescription"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:eventgrid/v20211015preview:PartnerTopic" }, { type: "azure-native:eventgrid/v20220615:PartnerTopic" }, { type: "azure-native:eventgrid/v20230601preview:PartnerTopic" }, { type: "azure-native:eventgrid/v20231215preview:PartnerTopic" }, { type: "azure-native:eventgrid/v20240601preview:PartnerTopic" }, { type: "azure-native:eventgrid/v20241215preview:PartnerTopic" }, { type: "azure-native:eventgrid/v20250215:PartnerTopic" }, { type: "azure-native:eventgrid/v20250401preview:PartnerTopic" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PartnerTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PartnerTopic resource.
 */
export interface PartnerTopicArgs {
    /**
     * Activation state of the partner topic.
     */
    activationState?: pulumi.Input<string | enums.eventgrid.PartnerTopicActivationState>;
    /**
     * Event Type information from the corresponding event channel.
     */
    eventTypeInfo?: pulumi.Input<inputs.eventgrid.EventTypeInfoArgs>;
    /**
     * Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     */
    expirationTimeIfNotActivatedUtc?: pulumi.Input<string>;
    /**
     * Identity information for the Partner Topic resource.
     */
    identity?: pulumi.Input<inputs.eventgrid.IdentityInfoArgs>;
    /**
     * Location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * Context or helpful message that can be used during the approval process by the subscriber.
     */
    messageForActivation?: pulumi.Input<string>;
    /**
     * The immutableId of the corresponding partner registration.
     */
    partnerRegistrationImmutableId?: pulumi.Input<string>;
    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     */
    partnerTopicFriendlyDescription?: pulumi.Input<string>;
    /**
     * Name of the partner topic.
     */
    partnerTopicName?: pulumi.Input<string>;
    /**
     * The name of the resource group within the user's subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Source associated with this partner topic. This represents a unique partner resource.
     */
    source?: pulumi.Input<string>;
    /**
     * Tags of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
