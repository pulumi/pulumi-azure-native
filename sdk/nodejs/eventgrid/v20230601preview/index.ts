// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CaCertificateArgs } from "./caCertificate";
export type CaCertificate = import("./caCertificate").CaCertificate;
export const CaCertificate: typeof import("./caCertificate").CaCertificate = null as any;
utilities.lazyLoad(exports, ["CaCertificate"], () => require("./caCertificate"));

export { ClientArgs } from "./client";
export type Client = import("./client").Client;
export const Client: typeof import("./client").Client = null as any;
utilities.lazyLoad(exports, ["Client"], () => require("./client"));

export { ClientGroupArgs } from "./clientGroup";
export type ClientGroup = import("./clientGroup").ClientGroup;
export const ClientGroup: typeof import("./clientGroup").ClientGroup = null as any;
utilities.lazyLoad(exports, ["ClientGroup"], () => require("./clientGroup"));

export { GetCaCertificateArgs, GetCaCertificateResult, GetCaCertificateOutputArgs } from "./getCaCertificate";
export const getCaCertificate: typeof import("./getCaCertificate").getCaCertificate = null as any;
export const getCaCertificateOutput: typeof import("./getCaCertificate").getCaCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCaCertificate","getCaCertificateOutput"], () => require("./getCaCertificate"));

export { GetClientArgs, GetClientResult, GetClientOutputArgs } from "./getClient";
export const getClient: typeof import("./getClient").getClient = null as any;
export const getClientOutput: typeof import("./getClient").getClientOutput = null as any;
utilities.lazyLoad(exports, ["getClient","getClientOutput"], () => require("./getClient"));

export { GetClientGroupArgs, GetClientGroupResult, GetClientGroupOutputArgs } from "./getClientGroup";
export const getClientGroup: typeof import("./getClientGroup").getClientGroup = null as any;
export const getClientGroupOutput: typeof import("./getClientGroup").getClientGroupOutput = null as any;
utilities.lazyLoad(exports, ["getClientGroup","getClientGroupOutput"], () => require("./getClientGroup"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetNamespaceTopicArgs, GetNamespaceTopicResult, GetNamespaceTopicOutputArgs } from "./getNamespaceTopic";
export const getNamespaceTopic: typeof import("./getNamespaceTopic").getNamespaceTopic = null as any;
export const getNamespaceTopicOutput: typeof import("./getNamespaceTopic").getNamespaceTopicOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaceTopic","getNamespaceTopicOutput"], () => require("./getNamespaceTopic"));

export { GetNamespaceTopicEventSubscriptionArgs, GetNamespaceTopicEventSubscriptionResult, GetNamespaceTopicEventSubscriptionOutputArgs } from "./getNamespaceTopicEventSubscription";
export const getNamespaceTopicEventSubscription: typeof import("./getNamespaceTopicEventSubscription").getNamespaceTopicEventSubscription = null as any;
export const getNamespaceTopicEventSubscriptionOutput: typeof import("./getNamespaceTopicEventSubscription").getNamespaceTopicEventSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaceTopicEventSubscription","getNamespaceTopicEventSubscriptionOutput"], () => require("./getNamespaceTopicEventSubscription"));

export { GetPartnerDestinationArgs, GetPartnerDestinationResult, GetPartnerDestinationOutputArgs } from "./getPartnerDestination";
export const getPartnerDestination: typeof import("./getPartnerDestination").getPartnerDestination = null as any;
export const getPartnerDestinationOutput: typeof import("./getPartnerDestination").getPartnerDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerDestination","getPartnerDestinationOutput"], () => require("./getPartnerDestination"));

export { GetPermissionBindingArgs, GetPermissionBindingResult, GetPermissionBindingOutputArgs } from "./getPermissionBinding";
export const getPermissionBinding: typeof import("./getPermissionBinding").getPermissionBinding = null as any;
export const getPermissionBindingOutput: typeof import("./getPermissionBinding").getPermissionBindingOutput = null as any;
utilities.lazyLoad(exports, ["getPermissionBinding","getPermissionBindingOutput"], () => require("./getPermissionBinding"));

export { GetTopicSpaceArgs, GetTopicSpaceResult, GetTopicSpaceOutputArgs } from "./getTopicSpace";
export const getTopicSpace: typeof import("./getTopicSpace").getTopicSpace = null as any;
export const getTopicSpaceOutput: typeof import("./getTopicSpace").getTopicSpaceOutput = null as any;
utilities.lazyLoad(exports, ["getTopicSpace","getTopicSpaceOutput"], () => require("./getTopicSpace"));

export { ListNamespaceSharedAccessKeysArgs, ListNamespaceSharedAccessKeysResult, ListNamespaceSharedAccessKeysOutputArgs } from "./listNamespaceSharedAccessKeys";
export const listNamespaceSharedAccessKeys: typeof import("./listNamespaceSharedAccessKeys").listNamespaceSharedAccessKeys = null as any;
export const listNamespaceSharedAccessKeysOutput: typeof import("./listNamespaceSharedAccessKeys").listNamespaceSharedAccessKeysOutput = null as any;
utilities.lazyLoad(exports, ["listNamespaceSharedAccessKeys","listNamespaceSharedAccessKeysOutput"], () => require("./listNamespaceSharedAccessKeys"));

export { ListNamespaceTopicSharedAccessKeysArgs, ListNamespaceTopicSharedAccessKeysResult, ListNamespaceTopicSharedAccessKeysOutputArgs } from "./listNamespaceTopicSharedAccessKeys";
export const listNamespaceTopicSharedAccessKeys: typeof import("./listNamespaceTopicSharedAccessKeys").listNamespaceTopicSharedAccessKeys = null as any;
export const listNamespaceTopicSharedAccessKeysOutput: typeof import("./listNamespaceTopicSharedAccessKeys").listNamespaceTopicSharedAccessKeysOutput = null as any;
utilities.lazyLoad(exports, ["listNamespaceTopicSharedAccessKeys","listNamespaceTopicSharedAccessKeysOutput"], () => require("./listNamespaceTopicSharedAccessKeys"));

export { NamespaceArgs } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespaceTopicArgs } from "./namespaceTopic";
export type NamespaceTopic = import("./namespaceTopic").NamespaceTopic;
export const NamespaceTopic: typeof import("./namespaceTopic").NamespaceTopic = null as any;
utilities.lazyLoad(exports, ["NamespaceTopic"], () => require("./namespaceTopic"));

export { NamespaceTopicEventSubscriptionArgs } from "./namespaceTopicEventSubscription";
export type NamespaceTopicEventSubscription = import("./namespaceTopicEventSubscription").NamespaceTopicEventSubscription;
export const NamespaceTopicEventSubscription: typeof import("./namespaceTopicEventSubscription").NamespaceTopicEventSubscription = null as any;
utilities.lazyLoad(exports, ["NamespaceTopicEventSubscription"], () => require("./namespaceTopicEventSubscription"));

export { PartnerDestinationArgs } from "./partnerDestination";
export type PartnerDestination = import("./partnerDestination").PartnerDestination;
export const PartnerDestination: typeof import("./partnerDestination").PartnerDestination = null as any;
utilities.lazyLoad(exports, ["PartnerDestination"], () => require("./partnerDestination"));

export { PermissionBindingArgs } from "./permissionBinding";
export type PermissionBinding = import("./permissionBinding").PermissionBinding;
export const PermissionBinding: typeof import("./permissionBinding").PermissionBinding = null as any;
utilities.lazyLoad(exports, ["PermissionBinding"], () => require("./permissionBinding"));

export { TopicSpaceArgs } from "./topicSpace";
export type TopicSpace = import("./topicSpace").TopicSpace;
export const TopicSpace: typeof import("./topicSpace").TopicSpace = null as any;
utilities.lazyLoad(exports, ["TopicSpace"], () => require("./topicSpace"));


// Export enums:
export * from "../../types/enums/eventgrid/v20230601preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:eventgrid/v20230601preview:CaCertificate":
                return new CaCertificate(name, <any>undefined, { urn })
            case "azure-native:eventgrid/v20230601preview:Client":
                return new Client(name, <any>undefined, { urn })
            case "azure-native:eventgrid/v20230601preview:ClientGroup":
                return new ClientGroup(name, <any>undefined, { urn })
            case "azure-native:eventgrid/v20230601preview:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "azure-native:eventgrid/v20230601preview:NamespaceTopic":
                return new NamespaceTopic(name, <any>undefined, { urn })
            case "azure-native:eventgrid/v20230601preview:NamespaceTopicEventSubscription":
                return new NamespaceTopicEventSubscription(name, <any>undefined, { urn })
            case "azure-native:eventgrid/v20230601preview:PartnerDestination":
                return new PartnerDestination(name, <any>undefined, { urn })
            case "azure-native:eventgrid/v20230601preview:PermissionBinding":
                return new PermissionBinding(name, <any>undefined, { urn })
            case "azure-native:eventgrid/v20230601preview:TopicSpace":
                return new TopicSpace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "eventgrid/v20230601preview", _module)
