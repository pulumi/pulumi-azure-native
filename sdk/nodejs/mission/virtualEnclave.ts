// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Virtual Enclave Model Resource
 *
 * Uses Azure REST API version 2025-05-01-preview.
 *
 * Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class VirtualEnclave extends pulumi.CustomResource {
    /**
     * Get an existing VirtualEnclave resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VirtualEnclave {
        return new VirtualEnclave(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:mission:VirtualEnclave';

    /**
     * Returns true if the given object is an instance of VirtualEnclave.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualEnclave {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualEnclave.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * Deploy Bastion service (True or False).
     */
    public readonly bastionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Community Resource Id.
     */
    public readonly communityResourceId!: pulumi.Output<string>;
    /**
     * Enclave Address Spaces
     */
    public /*out*/ readonly enclaveAddressSpaces!: pulumi.Output<outputs.mission.EnclaveAddressSpacesModelResponse>;
    /**
     * Enclave default settings.
     */
    public readonly enclaveDefaultSettings!: pulumi.Output<outputs.mission.EnclaveDefaultSettingsModelResponse | undefined>;
    /**
     * Enclave role assignments
     */
    public readonly enclaveRoleAssignments!: pulumi.Output<outputs.mission.RoleAssignmentItemResponse[] | undefined>;
    /**
     * Virtual Network.
     */
    public readonly enclaveVirtualNetwork!: pulumi.Output<outputs.mission.EnclaveVirtualNetworkModelResponse>;
    /**
     * Enclave specific policies
     */
    public readonly governedServiceList!: pulumi.Output<outputs.mission.GovernedServiceItemResponse[] | undefined>;
    /**
     * The managed service identities assigned to this resource.
     */
    public readonly identity!: pulumi.Output<outputs.mission.ManagedServiceIdentityResponse | undefined>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Maintenance Mode configuration.
     */
    public readonly maintenanceModeConfiguration!: pulumi.Output<outputs.mission.MaintenanceModeConfigurationModelResponse | undefined>;
    /**
     * Managed On Behalf Of Configuration.
     */
    public /*out*/ readonly managedOnBehalfOfConfiguration!: pulumi.Output<outputs.mission.ManagedOnBehalfOfConfigurationResponse>;
    /**
     * Managed resource group name.
     */
    public /*out*/ readonly managedResourceGroupName!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Provisioning State.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * List of resource ids created by Virtual Enclave.
     */
    public /*out*/ readonly resourceCollection!: pulumi.Output<string[]>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.mission.SystemDataResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Workload role assignments
     */
    public readonly workloadRoleAssignments!: pulumi.Output<outputs.mission.RoleAssignmentItemResponse[] | undefined>;

    /**
     * Create a VirtualEnclave resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualEnclaveArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.communityResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'communityResourceId'");
            }
            if ((!args || args.enclaveVirtualNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enclaveVirtualNetwork'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["bastionEnabled"] = (args ? args.bastionEnabled : undefined) ?? false;
            resourceInputs["communityResourceId"] = args ? args.communityResourceId : undefined;
            resourceInputs["enclaveDefaultSettings"] = args ? (args.enclaveDefaultSettings ? pulumi.output(args.enclaveDefaultSettings).apply(inputs.mission.enclaveDefaultSettingsModelArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["enclaveRoleAssignments"] = args ? args.enclaveRoleAssignments : undefined;
            resourceInputs["enclaveVirtualNetwork"] = args ? (args.enclaveVirtualNetwork ? pulumi.output(args.enclaveVirtualNetwork).apply(inputs.mission.enclaveVirtualNetworkModelArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["governedServiceList"] = args ? args.governedServiceList : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceModeConfiguration"] = args ? (args.maintenanceModeConfiguration ? pulumi.output(args.maintenanceModeConfiguration).apply(inputs.mission.maintenanceModeConfigurationModelArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualEnclaveName"] = args ? args.virtualEnclaveName : undefined;
            resourceInputs["workloadRoleAssignments"] = args ? args.workloadRoleAssignments : undefined;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["enclaveAddressSpaces"] = undefined /*out*/;
            resourceInputs["managedOnBehalfOfConfiguration"] = undefined /*out*/;
            resourceInputs["managedResourceGroupName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceCollection"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["bastionEnabled"] = undefined /*out*/;
            resourceInputs["communityResourceId"] = undefined /*out*/;
            resourceInputs["enclaveAddressSpaces"] = undefined /*out*/;
            resourceInputs["enclaveDefaultSettings"] = undefined /*out*/;
            resourceInputs["enclaveRoleAssignments"] = undefined /*out*/;
            resourceInputs["enclaveVirtualNetwork"] = undefined /*out*/;
            resourceInputs["governedServiceList"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["maintenanceModeConfiguration"] = undefined /*out*/;
            resourceInputs["managedOnBehalfOfConfiguration"] = undefined /*out*/;
            resourceInputs["managedResourceGroupName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceCollection"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workloadRoleAssignments"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:mission/v20240601preview:VirtualEnclave" }, { type: "azure-native:mission/v20241201preview:VirtualEnclave" }, { type: "azure-native:mission/v20250501preview:VirtualEnclave" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(VirtualEnclave.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VirtualEnclave resource.
 */
export interface VirtualEnclaveArgs {
    /**
     * Deploy Bastion service (True or False).
     */
    bastionEnabled?: pulumi.Input<boolean>;
    /**
     * Community Resource Id.
     */
    communityResourceId: pulumi.Input<string>;
    /**
     * Enclave default settings.
     */
    enclaveDefaultSettings?: pulumi.Input<inputs.mission.EnclaveDefaultSettingsModelArgs>;
    /**
     * Enclave role assignments
     */
    enclaveRoleAssignments?: pulumi.Input<pulumi.Input<inputs.mission.RoleAssignmentItemArgs>[]>;
    /**
     * Virtual Network.
     */
    enclaveVirtualNetwork: pulumi.Input<inputs.mission.EnclaveVirtualNetworkModelArgs>;
    /**
     * Enclave specific policies
     */
    governedServiceList?: pulumi.Input<pulumi.Input<inputs.mission.GovernedServiceItemArgs>[]>;
    /**
     * The managed service identities assigned to this resource.
     */
    identity?: pulumi.Input<inputs.mission.ManagedServiceIdentityArgs>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Maintenance Mode configuration.
     */
    maintenanceModeConfiguration?: pulumi.Input<inputs.mission.MaintenanceModeConfigurationModelArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the enclaveResource Resource
     */
    virtualEnclaveName?: pulumi.Input<string>;
    /**
     * Workload role assignments
     */
    workloadRoleAssignments?: pulumi.Input<pulumi.Input<inputs.mission.RoleAssignmentItemArgs>[]>;
}
