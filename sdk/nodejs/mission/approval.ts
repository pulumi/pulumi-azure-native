// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Approval Model Resource
 *
 * Uses Azure REST API version 2025-05-01-preview.
 *
 * Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class Approval extends pulumi.CustomResource {
    /**
     * Get an existing Approval resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Approval {
        return new Approval(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:mission:Approval';

    /**
     * Returns true if the given object is an instance of Approval.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Approval {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Approval.__pulumiType;
    }

    /**
     * List of approvers for the approval request
     */
    public readonly approvers!: pulumi.Output<outputs.mission.ApproverResponse[] | undefined>;
    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * Approval request creation time
     */
    public readonly createdAt!: pulumi.Output<string | undefined>;
    /**
     * Parameter for optimizing query results
     */
    public readonly grandparentResourceId!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Parameter for optimizing query results
     */
    public readonly parentResourceId!: pulumi.Output<string | undefined>;
    /**
     * Provisioning State.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Request metadata for the approval request.
     */
    public readonly requestMetadata!: pulumi.Output<outputs.mission.RequestMetadataResponse>;
    /**
     * Approval request state change time, time at which approval request state changed from pending to approved or rejected.
     */
    public readonly stateChangedAt!: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.mission.SystemDataResponse>;
    /**
     * Ticket ID for the approval request
     */
    public readonly ticketId!: pulumi.Output<string | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Approval resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApprovalArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.requestMetadata === undefined && !opts.urn) {
                throw new Error("Missing required property 'requestMetadata'");
            }
            if (args?.resourceUri === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceUri'");
            }
            resourceInputs["approvalName"] = args?.approvalName;
            resourceInputs["approvers"] = args?.approvers;
            resourceInputs["createdAt"] = args?.createdAt;
            resourceInputs["grandparentResourceId"] = args?.grandparentResourceId;
            resourceInputs["parentResourceId"] = args?.parentResourceId;
            resourceInputs["requestMetadata"] = args ? (args.requestMetadata ? pulumi.output(args.requestMetadata).apply(inputs.mission.requestMetadataArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["resourceUri"] = args?.resourceUri;
            resourceInputs["stateChangedAt"] = args?.stateChangedAt;
            resourceInputs["ticketId"] = args?.ticketId;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["approvers"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["grandparentResourceId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentResourceId"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["requestMetadata"] = undefined /*out*/;
            resourceInputs["stateChangedAt"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["ticketId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:mission/v20240601preview:Approval" }, { type: "azure-native:mission/v20241201preview:Approval" }, { type: "azure-native:mission/v20250501preview:Approval" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Approval.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Approval resource.
 */
export interface ApprovalArgs {
    /**
     * The name of the approvals resource.
     */
    approvalName?: pulumi.Input<string>;
    /**
     * List of approvers for the approval request
     */
    approvers?: pulumi.Input<pulumi.Input<inputs.mission.ApproverArgs>[]>;
    /**
     * Approval request creation time
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Parameter for optimizing query results
     */
    grandparentResourceId?: pulumi.Input<string>;
    /**
     * Parameter for optimizing query results
     */
    parentResourceId?: pulumi.Input<string>;
    /**
     * Request metadata for the approval request.
     */
    requestMetadata: pulumi.Input<inputs.mission.RequestMetadataArgs>;
    /**
     * The fully qualified Azure Resource manager identifier of the resource.
     */
    resourceUri: pulumi.Input<string>;
    /**
     * Approval request state change time, time at which approval request state changed from pending to approved or rejected.
     */
    stateChangedAt?: pulumi.Input<string>;
    /**
     * Ticket ID for the approval request
     */
    ticketId?: pulumi.Input<string>;
}
