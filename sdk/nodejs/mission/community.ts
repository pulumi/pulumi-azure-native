// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Community Model Resource
 *
 * Uses Azure REST API version 2025-05-01-preview.
 *
 * Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class Community extends pulumi.CustomResource {
    /**
     * Get an existing Community resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Community {
        return new Community(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:mission:Community';

    /**
     * Returns true if the given object is an instance of Community.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Community {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Community.__pulumiType;
    }

    /**
     * Address Space.
     */
    declare public readonly addressSpace: pulumi.Output<string | undefined>;
    /**
     * Approval requirements for various actions on the community's resources.
     */
    declare public readonly approvalSettings: pulumi.Output<outputs.mission.ApprovalSettingsResponse | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Community role assignments
     */
    declare public readonly communityRoleAssignments: pulumi.Output<outputs.mission.RoleAssignmentItemResponse[] | undefined>;
    /**
     * DNS Servers.
     */
    declare public readonly dnsServers: pulumi.Output<string[] | undefined>;
    /**
     * SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
     */
    declare public readonly firewallSku: pulumi.Output<string | undefined>;
    /**
     * List of services governed by a community.
     */
    declare public readonly governedServiceList: pulumi.Output<outputs.mission.GovernedServiceItemResponse[] | undefined>;
    /**
     * The managed service identities assigned to this resource.
     */
    declare public readonly identity: pulumi.Output<outputs.mission.ManagedServiceIdentityResponse | undefined>;
    /**
     * The geo-location where the resource lives
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Maintenance Mode configuration.
     */
    declare public readonly maintenanceModeConfiguration: pulumi.Output<outputs.mission.MaintenanceModeConfigurationModelResponse | undefined>;
    /**
     * Managed On Behalf Of Configuration.
     */
    declare public /*out*/ readonly managedOnBehalfOfConfiguration: pulumi.Output<outputs.mission.ManagedOnBehalfOfConfigurationResponse>;
    /**
     * Managed resource group name.
     */
    declare public /*out*/ readonly managedResourceGroupName: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
     */
    declare public readonly policyOverride: pulumi.Output<string | undefined>;
    /**
     * Provisioning State.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * List of resource ids created by communities.
     */
    declare public /*out*/ readonly resourceCollection: pulumi.Output<string[]>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.mission.SystemDataResponse>;
    /**
     * Resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a Community resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CommunityArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["addressSpace"] = args?.addressSpace;
            resourceInputs["approvalSettings"] = args?.approvalSettings;
            resourceInputs["communityName"] = args?.communityName;
            resourceInputs["communityRoleAssignments"] = args?.communityRoleAssignments;
            resourceInputs["dnsServers"] = args?.dnsServers;
            resourceInputs["firewallSku"] = (args?.firewallSku) ?? "Standard";
            resourceInputs["governedServiceList"] = args?.governedServiceList;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["location"] = args?.location;
            resourceInputs["maintenanceModeConfiguration"] = args ? (args.maintenanceModeConfiguration ? pulumi.output(args.maintenanceModeConfiguration).apply(inputs.mission.maintenanceModeConfigurationModelArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["policyOverride"] = args?.policyOverride;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["managedOnBehalfOfConfiguration"] = undefined /*out*/;
            resourceInputs["managedResourceGroupName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceCollection"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["addressSpace"] = undefined /*out*/;
            resourceInputs["approvalSettings"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["communityRoleAssignments"] = undefined /*out*/;
            resourceInputs["dnsServers"] = undefined /*out*/;
            resourceInputs["firewallSku"] = undefined /*out*/;
            resourceInputs["governedServiceList"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["maintenanceModeConfiguration"] = undefined /*out*/;
            resourceInputs["managedOnBehalfOfConfiguration"] = undefined /*out*/;
            resourceInputs["managedResourceGroupName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["policyOverride"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["resourceCollection"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:mission/v20240601preview:Community" }, { type: "azure-native:mission/v20241201preview:Community" }, { type: "azure-native:mission/v20250501preview:Community" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Community.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Community resource.
 */
export interface CommunityArgs {
    /**
     * Address Space.
     */
    addressSpace?: pulumi.Input<string>;
    /**
     * Approval requirements for various actions on the community's resources.
     */
    approvalSettings?: pulumi.Input<inputs.mission.ApprovalSettingsArgs>;
    /**
     * The name of the communityResource Resource
     */
    communityName?: pulumi.Input<string>;
    /**
     * Community role assignments
     */
    communityRoleAssignments?: pulumi.Input<pulumi.Input<inputs.mission.RoleAssignmentItemArgs>[]>;
    /**
     * DNS Servers.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
     */
    firewallSku?: pulumi.Input<string | enums.mission.FirewallSKU>;
    /**
     * List of services governed by a community.
     */
    governedServiceList?: pulumi.Input<pulumi.Input<inputs.mission.GovernedServiceItemArgs>[]>;
    /**
     * The managed service identities assigned to this resource.
     */
    identity?: pulumi.Input<inputs.mission.ManagedServiceIdentityArgs>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * Maintenance Mode configuration.
     */
    maintenanceModeConfiguration?: pulumi.Input<inputs.mission.MaintenanceModeConfigurationModelArgs>;
    /**
     * Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
     */
    policyOverride?: pulumi.Input<string | enums.mission.PolicyOverride>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
