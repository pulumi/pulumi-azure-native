// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * State of the myscope setting.
 */
export class Setting extends pulumi.CustomResource {
    /**
     * Get an existing Setting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Setting {
        return new Setting(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:costmanagement/v20191101:Setting';

    /**
     * Returns true if the given object is an instance of Setting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Setting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Setting.__pulumiType;
    }

    /**
     * Array of scopes with additional details used by Cost Management in the Azure portal.
     */
    public readonly cache!: pulumi.Output<outputs.costmanagement.v20191101.SettingsPropertiesResponseCache[] | undefined>;
    /**
     * Resource kind.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
     */
    public readonly startOn!: pulumi.Output<string | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Setting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            inputs["cache"] = args ? args.cache : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["settingName"] = args ? args.settingName : undefined;
            inputs["startOn"] = args ? args.startOn : undefined;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["cache"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["scope"] = undefined /*out*/;
            inputs["startOn"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:costmanagement/v20191101:Setting" }, { type: "azure-native:costmanagement:Setting" }, { type: "azure-nextgen:costmanagement:Setting" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Setting.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Setting resource.
 */
export interface SettingArgs {
    /**
     * Array of scopes with additional details used by Cost Management in the Azure portal.
     */
    cache?: pulumi.Input<pulumi.Input<inputs.costmanagement.v20191101.SettingsPropertiesCacheArgs>[]>;
    /**
     * Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
     */
    scope: pulumi.Input<string>;
    /**
     * Name of the setting. Allowed values: myscope
     */
    settingName?: pulumi.Input<string>;
    /**
     * Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
     */
    startOn?: pulumi.Input<string>;
}
