// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Get the setting from the given scope by name.
 */
/** @deprecated Please use one of the variants: TagInheritanceSetting. */
export function getSettingByScope(args: GetSettingByScopeArgs, opts?: pulumi.InvokeOptions): Promise<GetSettingByScopeResult> {
    pulumi.log.warn("getSettingByScope is deprecated: Please use one of the variants: TagInheritanceSetting.")

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:costmanagement/v20221005preview:getSettingByScope", {
        "scope": args.scope,
        "type": args.type,
    }, opts);
}

export interface GetSettingByScopeArgs {
    /**
     * The scope associated with this setting. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billing profile scope.
     */
    scope: string;
    /**
     * Setting type.
     */
    type: string;
}

/**
 * Setting definition.
 */
export interface GetSettingByScopeResult {
    /**
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     */
    readonly eTag?: string;
    /**
     * Resource Id.
     */
    readonly id: string;
    /**
     * Specifies the kind of settings.
     */
    readonly kind: string;
    /**
     * Resource name.
     */
    readonly name: string;
    /**
     * Resource type.
     */
    readonly type: string;
}
/**
 * Get the setting from the given scope by name.
 */
/** @deprecated Please use one of the variants: TagInheritanceSetting. */
export function getSettingByScopeOutput(args: GetSettingByScopeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSettingByScopeResult> {
    return pulumi.output(args).apply((a: any) => getSettingByScope(a, opts))
}

export interface GetSettingByScopeOutputArgs {
    /**
     * The scope associated with this setting. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billing profile scope.
     */
    scope: pulumi.Input<string>;
    /**
     * Setting type.
     */
    type: pulumi.Input<string>;
}
