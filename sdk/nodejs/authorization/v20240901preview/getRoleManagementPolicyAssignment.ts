// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Get the specified role management policy assignment for a resource scope
 */
export function getRoleManagementPolicyAssignment(args: GetRoleManagementPolicyAssignmentArgs, opts?: pulumi.InvokeOptions): Promise<GetRoleManagementPolicyAssignmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:authorization/v20240901preview:getRoleManagementPolicyAssignment", {
        "roleManagementPolicyAssignmentName": args.roleManagementPolicyAssignmentName,
        "scope": args.scope,
    }, opts);
}

export interface GetRoleManagementPolicyAssignmentArgs {
    /**
     * The name of format {guid_guid} the role management policy assignment to get.
     */
    roleManagementPolicyAssignmentName: string;
    /**
     * The scope of the role management policy.
     */
    scope: string;
}

/**
 * Role management policy
 */
export interface GetRoleManagementPolicyAssignmentResult {
    /**
     * The readonly computed rule applied to the policy.
     */
    readonly effectiveRules: (outputs.authorization.v20240901preview.RoleManagementPolicyApprovalRuleResponse | outputs.authorization.v20240901preview.RoleManagementPolicyAuthenticationContextRuleResponse | outputs.authorization.v20240901preview.RoleManagementPolicyEnablementRuleResponse | outputs.authorization.v20240901preview.RoleManagementPolicyExpirationRuleResponse | outputs.authorization.v20240901preview.RoleManagementPolicyNotificationRuleResponse | outputs.authorization.v20240901preview.RoleManagementPolicyPimOnlyModeRuleResponse)[];
    /**
     * The role management policy Id.
     */
    readonly id: string;
    /**
     * The role management policy name.
     */
    readonly name: string;
    /**
     * Additional properties of scope, role definition and policy
     */
    readonly policyAssignmentProperties: outputs.authorization.v20240901preview.PolicyAssignmentPropertiesResponse;
    /**
     * The policy id role management policy assignment.
     */
    readonly policyId?: string;
    /**
     * The role definition of management policy assignment.
     */
    readonly roleDefinitionId?: string;
    /**
     * The role management policy scope.
     */
    readonly scope?: string;
    /**
     * The role management policy type.
     */
    readonly type: string;
}
/**
 * Get the specified role management policy assignment for a resource scope
 */
export function getRoleManagementPolicyAssignmentOutput(args: GetRoleManagementPolicyAssignmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRoleManagementPolicyAssignmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure-native:authorization/v20240901preview:getRoleManagementPolicyAssignment", {
        "roleManagementPolicyAssignmentName": args.roleManagementPolicyAssignmentName,
        "scope": args.scope,
    }, opts);
}

export interface GetRoleManagementPolicyAssignmentOutputArgs {
    /**
     * The name of format {guid_guid} the role management policy assignment to get.
     */
    roleManagementPolicyAssignmentName: pulumi.Input<string>;
    /**
     * The scope of the role management policy.
     */
    scope: pulumi.Input<string>;
}
