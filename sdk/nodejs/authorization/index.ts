// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./accessReviewScheduleDefinitionById";
export * from "./denyAssignment";
export * from "./getAccessReviewScheduleDefinitionById";
export * from "./getClientConfig";
export * from "./getClientToken";
export * from "./getDenyAssignment";
export * from "./getManagementLockAtResourceGroupLevel";
export * from "./getManagementLockAtResourceLevel";
export * from "./getManagementLockAtSubscriptionLevel";
export * from "./getManagementLockByScope";
export * from "./getPolicyAssignment";
export * from "./getPolicyDefinition";
export * from "./getPolicyDefinitionAtManagementGroup";
export * from "./getPolicyExemption";
export * from "./getPolicySetDefinition";
export * from "./getPolicySetDefinitionAtManagementGroup";
export * from "./getRoleAssignment";
export * from "./getRoleDefinition";
export * from "./managementLockAtResourceGroupLevel";
export * from "./managementLockAtResourceLevel";
export * from "./managementLockAtSubscriptionLevel";
export * from "./managementLockByScope";
export * from "./policyAssignment";
export * from "./policyDefinition";
export * from "./policyDefinitionAtManagementGroup";
export * from "./policyExemption";
export * from "./policySetDefinition";
export * from "./policySetDefinitionAtManagementGroup";
export * from "./roleAssignment";
export * from "./roleDefinition";

// Export enums:
export * from "../types/enums/authorization";

// Export sub-modules:
import * as latest from "./latest";
import * as v20150101 from "./v20150101";
import * as v20150701 from "./v20150701";
import * as v20151001preview from "./v20151001preview";
import * as v20160401 from "./v20160401";
import * as v20160901 from "./v20160901";
import * as v20161201 from "./v20161201";
import * as v20170601preview from "./v20170601preview";
import * as v20171001preview from "./v20171001preview";
import * as v20180101preview from "./v20180101preview";
import * as v20180301 from "./v20180301";
import * as v20180501 from "./v20180501";
import * as v20180501preview from "./v20180501preview";
import * as v20180901preview from "./v20180901preview";
import * as v20190101 from "./v20190101";
import * as v20190601 from "./v20190601";
import * as v20190901 from "./v20190901";
import * as v20200301 from "./v20200301";
import * as v20200301preview from "./v20200301preview";
import * as v20200401preview from "./v20200401preview";
import * as v20200701preview from "./v20200701preview";
import * as v20200901 from "./v20200901";
import * as v20201001preview from "./v20201001preview";

export {
    latest,
    v20150101,
    v20150701,
    v20151001preview,
    v20160401,
    v20160901,
    v20161201,
    v20170601preview,
    v20171001preview,
    v20180101preview,
    v20180301,
    v20180501,
    v20180501preview,
    v20180901preview,
    v20190101,
    v20190601,
    v20190901,
    v20200301,
    v20200301preview,
    v20200401preview,
    v20200701preview,
    v20200901,
    v20201001preview,
};

// Import resources to register:
import { AccessReviewScheduleDefinitionById } from "./accessReviewScheduleDefinitionById";
import { DenyAssignment } from "./denyAssignment";
import { ManagementLockAtResourceGroupLevel } from "./managementLockAtResourceGroupLevel";
import { ManagementLockAtResourceLevel } from "./managementLockAtResourceLevel";
import { ManagementLockAtSubscriptionLevel } from "./managementLockAtSubscriptionLevel";
import { ManagementLockByScope } from "./managementLockByScope";
import { PolicyAssignment } from "./policyAssignment";
import { PolicyDefinition } from "./policyDefinition";
import { PolicyDefinitionAtManagementGroup } from "./policyDefinitionAtManagementGroup";
import { PolicyExemption } from "./policyExemption";
import { PolicySetDefinition } from "./policySetDefinition";
import { PolicySetDefinitionAtManagementGroup } from "./policySetDefinitionAtManagementGroup";
import { RoleAssignment } from "./roleAssignment";
import { RoleDefinition } from "./roleDefinition";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-nextgen:authorization:AccessReviewScheduleDefinitionById":
                return new AccessReviewScheduleDefinitionById(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:DenyAssignment":
                return new DenyAssignment(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:ManagementLockAtResourceGroupLevel":
                return new ManagementLockAtResourceGroupLevel(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:ManagementLockAtResourceLevel":
                return new ManagementLockAtResourceLevel(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:ManagementLockAtSubscriptionLevel":
                return new ManagementLockAtSubscriptionLevel(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:ManagementLockByScope":
                return new ManagementLockByScope(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:PolicyAssignment":
                return new PolicyAssignment(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:PolicyDefinition":
                return new PolicyDefinition(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:PolicyDefinitionAtManagementGroup":
                return new PolicyDefinitionAtManagementGroup(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:PolicyExemption":
                return new PolicyExemption(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:PolicySetDefinition":
                return new PolicySetDefinition(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:PolicySetDefinitionAtManagementGroup":
                return new PolicySetDefinitionAtManagementGroup(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "azure-nextgen:authorization:RoleDefinition":
                return new RoleDefinition(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-nextgen", "authorization", _module)
