// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessReviewHistoryDefinitionByIdArgs } from "./accessReviewHistoryDefinitionById";
export type AccessReviewHistoryDefinitionById = import("./accessReviewHistoryDefinitionById").AccessReviewHistoryDefinitionById;
export const AccessReviewHistoryDefinitionById: typeof import("./accessReviewHistoryDefinitionById").AccessReviewHistoryDefinitionById = null as any;
utilities.lazyLoad(exports, ["AccessReviewHistoryDefinitionById"], () => require("./accessReviewHistoryDefinitionById"));

export { AccessReviewScheduleDefinitionByIdArgs } from "./accessReviewScheduleDefinitionById";
export type AccessReviewScheduleDefinitionById = import("./accessReviewScheduleDefinitionById").AccessReviewScheduleDefinitionById;
export const AccessReviewScheduleDefinitionById: typeof import("./accessReviewScheduleDefinitionById").AccessReviewScheduleDefinitionById = null as any;
utilities.lazyLoad(exports, ["AccessReviewScheduleDefinitionById"], () => require("./accessReviewScheduleDefinitionById"));

export { GetAccessReviewHistoryDefinitionByIdArgs, GetAccessReviewHistoryDefinitionByIdResult, GetAccessReviewHistoryDefinitionByIdOutputArgs } from "./getAccessReviewHistoryDefinitionById";
export const getAccessReviewHistoryDefinitionById: typeof import("./getAccessReviewHistoryDefinitionById").getAccessReviewHistoryDefinitionById = null as any;
export const getAccessReviewHistoryDefinitionByIdOutput: typeof import("./getAccessReviewHistoryDefinitionById").getAccessReviewHistoryDefinitionByIdOutput = null as any;
utilities.lazyLoad(exports, ["getAccessReviewHistoryDefinitionById","getAccessReviewHistoryDefinitionByIdOutput"], () => require("./getAccessReviewHistoryDefinitionById"));

export { GetAccessReviewScheduleDefinitionByIdArgs, GetAccessReviewScheduleDefinitionByIdResult, GetAccessReviewScheduleDefinitionByIdOutputArgs } from "./getAccessReviewScheduleDefinitionById";
export const getAccessReviewScheduleDefinitionById: typeof import("./getAccessReviewScheduleDefinitionById").getAccessReviewScheduleDefinitionById = null as any;
export const getAccessReviewScheduleDefinitionByIdOutput: typeof import("./getAccessReviewScheduleDefinitionById").getAccessReviewScheduleDefinitionByIdOutput = null as any;
utilities.lazyLoad(exports, ["getAccessReviewScheduleDefinitionById","getAccessReviewScheduleDefinitionByIdOutput"], () => require("./getAccessReviewScheduleDefinitionById"));

export { GetClientConfigResult } from "./getClientConfig";
export const getClientConfig: typeof import("./getClientConfig").getClientConfig = null as any;
export const getClientConfigOutput: typeof import("./getClientConfig").getClientConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClientConfig","getClientConfigOutput"], () => require("./getClientConfig"));

export { GetClientTokenArgs, GetClientTokenResult, GetClientTokenOutputArgs } from "./getClientToken";
export const getClientToken: typeof import("./getClientToken").getClientToken = null as any;
export const getClientTokenOutput: typeof import("./getClientToken").getClientTokenOutput = null as any;
utilities.lazyLoad(exports, ["getClientToken","getClientTokenOutput"], () => require("./getClientToken"));

export { GetManagementLockAtResourceGroupLevelArgs, GetManagementLockAtResourceGroupLevelResult, GetManagementLockAtResourceGroupLevelOutputArgs } from "./getManagementLockAtResourceGroupLevel";
export const getManagementLockAtResourceGroupLevel: typeof import("./getManagementLockAtResourceGroupLevel").getManagementLockAtResourceGroupLevel = null as any;
export const getManagementLockAtResourceGroupLevelOutput: typeof import("./getManagementLockAtResourceGroupLevel").getManagementLockAtResourceGroupLevelOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLockAtResourceGroupLevel","getManagementLockAtResourceGroupLevelOutput"], () => require("./getManagementLockAtResourceGroupLevel"));

export { GetManagementLockAtResourceLevelArgs, GetManagementLockAtResourceLevelResult, GetManagementLockAtResourceLevelOutputArgs } from "./getManagementLockAtResourceLevel";
export const getManagementLockAtResourceLevel: typeof import("./getManagementLockAtResourceLevel").getManagementLockAtResourceLevel = null as any;
export const getManagementLockAtResourceLevelOutput: typeof import("./getManagementLockAtResourceLevel").getManagementLockAtResourceLevelOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLockAtResourceLevel","getManagementLockAtResourceLevelOutput"], () => require("./getManagementLockAtResourceLevel"));

export { GetManagementLockAtSubscriptionLevelArgs, GetManagementLockAtSubscriptionLevelResult, GetManagementLockAtSubscriptionLevelOutputArgs } from "./getManagementLockAtSubscriptionLevel";
export const getManagementLockAtSubscriptionLevel: typeof import("./getManagementLockAtSubscriptionLevel").getManagementLockAtSubscriptionLevel = null as any;
export const getManagementLockAtSubscriptionLevelOutput: typeof import("./getManagementLockAtSubscriptionLevel").getManagementLockAtSubscriptionLevelOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLockAtSubscriptionLevel","getManagementLockAtSubscriptionLevelOutput"], () => require("./getManagementLockAtSubscriptionLevel"));

export { GetManagementLockByScopeArgs, GetManagementLockByScopeResult, GetManagementLockByScopeOutputArgs } from "./getManagementLockByScope";
export const getManagementLockByScope: typeof import("./getManagementLockByScope").getManagementLockByScope = null as any;
export const getManagementLockByScopeOutput: typeof import("./getManagementLockByScope").getManagementLockByScopeOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLockByScope","getManagementLockByScopeOutput"], () => require("./getManagementLockByScope"));

export { GetPolicyAssignmentArgs, GetPolicyAssignmentResult, GetPolicyAssignmentOutputArgs } from "./getPolicyAssignment";
export const getPolicyAssignment: typeof import("./getPolicyAssignment").getPolicyAssignment = null as any;
export const getPolicyAssignmentOutput: typeof import("./getPolicyAssignment").getPolicyAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyAssignment","getPolicyAssignmentOutput"], () => require("./getPolicyAssignment"));

export { GetPolicyDefinitionArgs, GetPolicyDefinitionResult, GetPolicyDefinitionOutputArgs } from "./getPolicyDefinition";
export const getPolicyDefinition: typeof import("./getPolicyDefinition").getPolicyDefinition = null as any;
export const getPolicyDefinitionOutput: typeof import("./getPolicyDefinition").getPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDefinition","getPolicyDefinitionOutput"], () => require("./getPolicyDefinition"));

export { GetPolicyDefinitionAtManagementGroupArgs, GetPolicyDefinitionAtManagementGroupResult, GetPolicyDefinitionAtManagementGroupOutputArgs } from "./getPolicyDefinitionAtManagementGroup";
export const getPolicyDefinitionAtManagementGroup: typeof import("./getPolicyDefinitionAtManagementGroup").getPolicyDefinitionAtManagementGroup = null as any;
export const getPolicyDefinitionAtManagementGroupOutput: typeof import("./getPolicyDefinitionAtManagementGroup").getPolicyDefinitionAtManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDefinitionAtManagementGroup","getPolicyDefinitionAtManagementGroupOutput"], () => require("./getPolicyDefinitionAtManagementGroup"));

export { GetPolicyDefinitionVersionArgs, GetPolicyDefinitionVersionResult, GetPolicyDefinitionVersionOutputArgs } from "./getPolicyDefinitionVersion";
export const getPolicyDefinitionVersion: typeof import("./getPolicyDefinitionVersion").getPolicyDefinitionVersion = null as any;
export const getPolicyDefinitionVersionOutput: typeof import("./getPolicyDefinitionVersion").getPolicyDefinitionVersionOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDefinitionVersion","getPolicyDefinitionVersionOutput"], () => require("./getPolicyDefinitionVersion"));

export { GetPolicyDefinitionVersionAtManagementGroupArgs, GetPolicyDefinitionVersionAtManagementGroupResult, GetPolicyDefinitionVersionAtManagementGroupOutputArgs } from "./getPolicyDefinitionVersionAtManagementGroup";
export const getPolicyDefinitionVersionAtManagementGroup: typeof import("./getPolicyDefinitionVersionAtManagementGroup").getPolicyDefinitionVersionAtManagementGroup = null as any;
export const getPolicyDefinitionVersionAtManagementGroupOutput: typeof import("./getPolicyDefinitionVersionAtManagementGroup").getPolicyDefinitionVersionAtManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDefinitionVersionAtManagementGroup","getPolicyDefinitionVersionAtManagementGroupOutput"], () => require("./getPolicyDefinitionVersionAtManagementGroup"));

export { GetPolicyExemptionArgs, GetPolicyExemptionResult, GetPolicyExemptionOutputArgs } from "./getPolicyExemption";
export const getPolicyExemption: typeof import("./getPolicyExemption").getPolicyExemption = null as any;
export const getPolicyExemptionOutput: typeof import("./getPolicyExemption").getPolicyExemptionOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyExemption","getPolicyExemptionOutput"], () => require("./getPolicyExemption"));

export { GetPolicySetDefinitionArgs, GetPolicySetDefinitionResult, GetPolicySetDefinitionOutputArgs } from "./getPolicySetDefinition";
export const getPolicySetDefinition: typeof import("./getPolicySetDefinition").getPolicySetDefinition = null as any;
export const getPolicySetDefinitionOutput: typeof import("./getPolicySetDefinition").getPolicySetDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySetDefinition","getPolicySetDefinitionOutput"], () => require("./getPolicySetDefinition"));

export { GetPolicySetDefinitionAtManagementGroupArgs, GetPolicySetDefinitionAtManagementGroupResult, GetPolicySetDefinitionAtManagementGroupOutputArgs } from "./getPolicySetDefinitionAtManagementGroup";
export const getPolicySetDefinitionAtManagementGroup: typeof import("./getPolicySetDefinitionAtManagementGroup").getPolicySetDefinitionAtManagementGroup = null as any;
export const getPolicySetDefinitionAtManagementGroupOutput: typeof import("./getPolicySetDefinitionAtManagementGroup").getPolicySetDefinitionAtManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySetDefinitionAtManagementGroup","getPolicySetDefinitionAtManagementGroupOutput"], () => require("./getPolicySetDefinitionAtManagementGroup"));

export { GetPolicySetDefinitionVersionArgs, GetPolicySetDefinitionVersionResult, GetPolicySetDefinitionVersionOutputArgs } from "./getPolicySetDefinitionVersion";
export const getPolicySetDefinitionVersion: typeof import("./getPolicySetDefinitionVersion").getPolicySetDefinitionVersion = null as any;
export const getPolicySetDefinitionVersionOutput: typeof import("./getPolicySetDefinitionVersion").getPolicySetDefinitionVersionOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySetDefinitionVersion","getPolicySetDefinitionVersionOutput"], () => require("./getPolicySetDefinitionVersion"));

export { GetPolicySetDefinitionVersionAtManagementGroupArgs, GetPolicySetDefinitionVersionAtManagementGroupResult, GetPolicySetDefinitionVersionAtManagementGroupOutputArgs } from "./getPolicySetDefinitionVersionAtManagementGroup";
export const getPolicySetDefinitionVersionAtManagementGroup: typeof import("./getPolicySetDefinitionVersionAtManagementGroup").getPolicySetDefinitionVersionAtManagementGroup = null as any;
export const getPolicySetDefinitionVersionAtManagementGroupOutput: typeof import("./getPolicySetDefinitionVersionAtManagementGroup").getPolicySetDefinitionVersionAtManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySetDefinitionVersionAtManagementGroup","getPolicySetDefinitionVersionAtManagementGroupOutput"], () => require("./getPolicySetDefinitionVersionAtManagementGroup"));

export { GetPrivateLinkAssociationArgs, GetPrivateLinkAssociationResult, GetPrivateLinkAssociationOutputArgs } from "./getPrivateLinkAssociation";
export const getPrivateLinkAssociation: typeof import("./getPrivateLinkAssociation").getPrivateLinkAssociation = null as any;
export const getPrivateLinkAssociationOutput: typeof import("./getPrivateLinkAssociation").getPrivateLinkAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkAssociation","getPrivateLinkAssociationOutput"], () => require("./getPrivateLinkAssociation"));

export { GetResourceManagementPrivateLinkArgs, GetResourceManagementPrivateLinkResult, GetResourceManagementPrivateLinkOutputArgs } from "./getResourceManagementPrivateLink";
export const getResourceManagementPrivateLink: typeof import("./getResourceManagementPrivateLink").getResourceManagementPrivateLink = null as any;
export const getResourceManagementPrivateLinkOutput: typeof import("./getResourceManagementPrivateLink").getResourceManagementPrivateLinkOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagementPrivateLink","getResourceManagementPrivateLinkOutput"], () => require("./getResourceManagementPrivateLink"));

export { GetRoleAssignmentArgs, GetRoleAssignmentResult, GetRoleAssignmentOutputArgs } from "./getRoleAssignment";
export const getRoleAssignment: typeof import("./getRoleAssignment").getRoleAssignment = null as any;
export const getRoleAssignmentOutput: typeof import("./getRoleAssignment").getRoleAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getRoleAssignment","getRoleAssignmentOutput"], () => require("./getRoleAssignment"));

export { GetRoleDefinitionArgs, GetRoleDefinitionResult, GetRoleDefinitionOutputArgs } from "./getRoleDefinition";
export const getRoleDefinition: typeof import("./getRoleDefinition").getRoleDefinition = null as any;
export const getRoleDefinitionOutput: typeof import("./getRoleDefinition").getRoleDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getRoleDefinition","getRoleDefinitionOutput"], () => require("./getRoleDefinition"));

export { GetRoleManagementPolicyAssignmentArgs, GetRoleManagementPolicyAssignmentResult, GetRoleManagementPolicyAssignmentOutputArgs } from "./getRoleManagementPolicyAssignment";
export const getRoleManagementPolicyAssignment: typeof import("./getRoleManagementPolicyAssignment").getRoleManagementPolicyAssignment = null as any;
export const getRoleManagementPolicyAssignmentOutput: typeof import("./getRoleManagementPolicyAssignment").getRoleManagementPolicyAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getRoleManagementPolicyAssignment","getRoleManagementPolicyAssignmentOutput"], () => require("./getRoleManagementPolicyAssignment"));

export { GetScopeAccessReviewHistoryDefinitionByIdArgs, GetScopeAccessReviewHistoryDefinitionByIdResult, GetScopeAccessReviewHistoryDefinitionByIdOutputArgs } from "./getScopeAccessReviewHistoryDefinitionById";
export const getScopeAccessReviewHistoryDefinitionById: typeof import("./getScopeAccessReviewHistoryDefinitionById").getScopeAccessReviewHistoryDefinitionById = null as any;
export const getScopeAccessReviewHistoryDefinitionByIdOutput: typeof import("./getScopeAccessReviewHistoryDefinitionById").getScopeAccessReviewHistoryDefinitionByIdOutput = null as any;
utilities.lazyLoad(exports, ["getScopeAccessReviewHistoryDefinitionById","getScopeAccessReviewHistoryDefinitionByIdOutput"], () => require("./getScopeAccessReviewHistoryDefinitionById"));

export { GetScopeAccessReviewScheduleDefinitionByIdArgs, GetScopeAccessReviewScheduleDefinitionByIdResult, GetScopeAccessReviewScheduleDefinitionByIdOutputArgs } from "./getScopeAccessReviewScheduleDefinitionById";
export const getScopeAccessReviewScheduleDefinitionById: typeof import("./getScopeAccessReviewScheduleDefinitionById").getScopeAccessReviewScheduleDefinitionById = null as any;
export const getScopeAccessReviewScheduleDefinitionByIdOutput: typeof import("./getScopeAccessReviewScheduleDefinitionById").getScopeAccessReviewScheduleDefinitionByIdOutput = null as any;
utilities.lazyLoad(exports, ["getScopeAccessReviewScheduleDefinitionById","getScopeAccessReviewScheduleDefinitionByIdOutput"], () => require("./getScopeAccessReviewScheduleDefinitionById"));

export { GetVariableArgs, GetVariableResult, GetVariableOutputArgs } from "./getVariable";
export const getVariable: typeof import("./getVariable").getVariable = null as any;
export const getVariableOutput: typeof import("./getVariable").getVariableOutput = null as any;
utilities.lazyLoad(exports, ["getVariable","getVariableOutput"], () => require("./getVariable"));

export { GetVariableAtManagementGroupArgs, GetVariableAtManagementGroupResult, GetVariableAtManagementGroupOutputArgs } from "./getVariableAtManagementGroup";
export const getVariableAtManagementGroup: typeof import("./getVariableAtManagementGroup").getVariableAtManagementGroup = null as any;
export const getVariableAtManagementGroupOutput: typeof import("./getVariableAtManagementGroup").getVariableAtManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVariableAtManagementGroup","getVariableAtManagementGroupOutput"], () => require("./getVariableAtManagementGroup"));

export { GetVariableValueArgs, GetVariableValueResult, GetVariableValueOutputArgs } from "./getVariableValue";
export const getVariableValue: typeof import("./getVariableValue").getVariableValue = null as any;
export const getVariableValueOutput: typeof import("./getVariableValue").getVariableValueOutput = null as any;
utilities.lazyLoad(exports, ["getVariableValue","getVariableValueOutput"], () => require("./getVariableValue"));

export { GetVariableValueAtManagementGroupArgs, GetVariableValueAtManagementGroupResult, GetVariableValueAtManagementGroupOutputArgs } from "./getVariableValueAtManagementGroup";
export const getVariableValueAtManagementGroup: typeof import("./getVariableValueAtManagementGroup").getVariableValueAtManagementGroup = null as any;
export const getVariableValueAtManagementGroupOutput: typeof import("./getVariableValueAtManagementGroup").getVariableValueAtManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVariableValueAtManagementGroup","getVariableValueAtManagementGroupOutput"], () => require("./getVariableValueAtManagementGroup"));

export { ListPolicyDefinitionVersionAllArgs, ListPolicyDefinitionVersionAllResult } from "./listPolicyDefinitionVersionAll";
export const listPolicyDefinitionVersionAll: typeof import("./listPolicyDefinitionVersionAll").listPolicyDefinitionVersionAll = null as any;
export const listPolicyDefinitionVersionAllOutput: typeof import("./listPolicyDefinitionVersionAll").listPolicyDefinitionVersionAllOutput = null as any;
utilities.lazyLoad(exports, ["listPolicyDefinitionVersionAll","listPolicyDefinitionVersionAllOutput"], () => require("./listPolicyDefinitionVersionAll"));

export { ListPolicyDefinitionVersionAllAtManagementGroupArgs, ListPolicyDefinitionVersionAllAtManagementGroupResult, ListPolicyDefinitionVersionAllAtManagementGroupOutputArgs } from "./listPolicyDefinitionVersionAllAtManagementGroup";
export const listPolicyDefinitionVersionAllAtManagementGroup: typeof import("./listPolicyDefinitionVersionAllAtManagementGroup").listPolicyDefinitionVersionAllAtManagementGroup = null as any;
export const listPolicyDefinitionVersionAllAtManagementGroupOutput: typeof import("./listPolicyDefinitionVersionAllAtManagementGroup").listPolicyDefinitionVersionAllAtManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["listPolicyDefinitionVersionAllAtManagementGroup","listPolicyDefinitionVersionAllAtManagementGroupOutput"], () => require("./listPolicyDefinitionVersionAllAtManagementGroup"));

export { ListPolicyDefinitionVersionAllBuiltinsArgs, ListPolicyDefinitionVersionAllBuiltinsResult } from "./listPolicyDefinitionVersionAllBuiltins";
export const listPolicyDefinitionVersionAllBuiltins: typeof import("./listPolicyDefinitionVersionAllBuiltins").listPolicyDefinitionVersionAllBuiltins = null as any;
export const listPolicyDefinitionVersionAllBuiltinsOutput: typeof import("./listPolicyDefinitionVersionAllBuiltins").listPolicyDefinitionVersionAllBuiltinsOutput = null as any;
utilities.lazyLoad(exports, ["listPolicyDefinitionVersionAllBuiltins","listPolicyDefinitionVersionAllBuiltinsOutput"], () => require("./listPolicyDefinitionVersionAllBuiltins"));

export { ListPolicySetDefinitionVersionAllArgs, ListPolicySetDefinitionVersionAllResult } from "./listPolicySetDefinitionVersionAll";
export const listPolicySetDefinitionVersionAll: typeof import("./listPolicySetDefinitionVersionAll").listPolicySetDefinitionVersionAll = null as any;
export const listPolicySetDefinitionVersionAllOutput: typeof import("./listPolicySetDefinitionVersionAll").listPolicySetDefinitionVersionAllOutput = null as any;
utilities.lazyLoad(exports, ["listPolicySetDefinitionVersionAll","listPolicySetDefinitionVersionAllOutput"], () => require("./listPolicySetDefinitionVersionAll"));

export { ListPolicySetDefinitionVersionAllAtManagementGroupArgs, ListPolicySetDefinitionVersionAllAtManagementGroupResult, ListPolicySetDefinitionVersionAllAtManagementGroupOutputArgs } from "./listPolicySetDefinitionVersionAllAtManagementGroup";
export const listPolicySetDefinitionVersionAllAtManagementGroup: typeof import("./listPolicySetDefinitionVersionAllAtManagementGroup").listPolicySetDefinitionVersionAllAtManagementGroup = null as any;
export const listPolicySetDefinitionVersionAllAtManagementGroupOutput: typeof import("./listPolicySetDefinitionVersionAllAtManagementGroup").listPolicySetDefinitionVersionAllAtManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["listPolicySetDefinitionVersionAllAtManagementGroup","listPolicySetDefinitionVersionAllAtManagementGroupOutput"], () => require("./listPolicySetDefinitionVersionAllAtManagementGroup"));

export { ListPolicySetDefinitionVersionAllBuiltinsArgs, ListPolicySetDefinitionVersionAllBuiltinsResult } from "./listPolicySetDefinitionVersionAllBuiltins";
export const listPolicySetDefinitionVersionAllBuiltins: typeof import("./listPolicySetDefinitionVersionAllBuiltins").listPolicySetDefinitionVersionAllBuiltins = null as any;
export const listPolicySetDefinitionVersionAllBuiltinsOutput: typeof import("./listPolicySetDefinitionVersionAllBuiltins").listPolicySetDefinitionVersionAllBuiltinsOutput = null as any;
utilities.lazyLoad(exports, ["listPolicySetDefinitionVersionAllBuiltins","listPolicySetDefinitionVersionAllBuiltinsOutput"], () => require("./listPolicySetDefinitionVersionAllBuiltins"));

export { ManagementLockAtResourceGroupLevelArgs } from "./managementLockAtResourceGroupLevel";
export type ManagementLockAtResourceGroupLevel = import("./managementLockAtResourceGroupLevel").ManagementLockAtResourceGroupLevel;
export const ManagementLockAtResourceGroupLevel: typeof import("./managementLockAtResourceGroupLevel").ManagementLockAtResourceGroupLevel = null as any;
utilities.lazyLoad(exports, ["ManagementLockAtResourceGroupLevel"], () => require("./managementLockAtResourceGroupLevel"));

export { ManagementLockAtResourceLevelArgs } from "./managementLockAtResourceLevel";
export type ManagementLockAtResourceLevel = import("./managementLockAtResourceLevel").ManagementLockAtResourceLevel;
export const ManagementLockAtResourceLevel: typeof import("./managementLockAtResourceLevel").ManagementLockAtResourceLevel = null as any;
utilities.lazyLoad(exports, ["ManagementLockAtResourceLevel"], () => require("./managementLockAtResourceLevel"));

export { ManagementLockAtSubscriptionLevelArgs } from "./managementLockAtSubscriptionLevel";
export type ManagementLockAtSubscriptionLevel = import("./managementLockAtSubscriptionLevel").ManagementLockAtSubscriptionLevel;
export const ManagementLockAtSubscriptionLevel: typeof import("./managementLockAtSubscriptionLevel").ManagementLockAtSubscriptionLevel = null as any;
utilities.lazyLoad(exports, ["ManagementLockAtSubscriptionLevel"], () => require("./managementLockAtSubscriptionLevel"));

export { ManagementLockByScopeArgs } from "./managementLockByScope";
export type ManagementLockByScope = import("./managementLockByScope").ManagementLockByScope;
export const ManagementLockByScope: typeof import("./managementLockByScope").ManagementLockByScope = null as any;
utilities.lazyLoad(exports, ["ManagementLockByScope"], () => require("./managementLockByScope"));

export { PolicyAssignmentArgs } from "./policyAssignment";
export type PolicyAssignment = import("./policyAssignment").PolicyAssignment;
export const PolicyAssignment: typeof import("./policyAssignment").PolicyAssignment = null as any;
utilities.lazyLoad(exports, ["PolicyAssignment"], () => require("./policyAssignment"));

export { PolicyDefinitionArgs } from "./policyDefinition";
export type PolicyDefinition = import("./policyDefinition").PolicyDefinition;
export const PolicyDefinition: typeof import("./policyDefinition").PolicyDefinition = null as any;
utilities.lazyLoad(exports, ["PolicyDefinition"], () => require("./policyDefinition"));

export { PolicyDefinitionAtManagementGroupArgs } from "./policyDefinitionAtManagementGroup";
export type PolicyDefinitionAtManagementGroup = import("./policyDefinitionAtManagementGroup").PolicyDefinitionAtManagementGroup;
export const PolicyDefinitionAtManagementGroup: typeof import("./policyDefinitionAtManagementGroup").PolicyDefinitionAtManagementGroup = null as any;
utilities.lazyLoad(exports, ["PolicyDefinitionAtManagementGroup"], () => require("./policyDefinitionAtManagementGroup"));

export { PolicyDefinitionVersionArgs } from "./policyDefinitionVersion";
export type PolicyDefinitionVersion = import("./policyDefinitionVersion").PolicyDefinitionVersion;
export const PolicyDefinitionVersion: typeof import("./policyDefinitionVersion").PolicyDefinitionVersion = null as any;
utilities.lazyLoad(exports, ["PolicyDefinitionVersion"], () => require("./policyDefinitionVersion"));

export { PolicyDefinitionVersionAtManagementGroupArgs } from "./policyDefinitionVersionAtManagementGroup";
export type PolicyDefinitionVersionAtManagementGroup = import("./policyDefinitionVersionAtManagementGroup").PolicyDefinitionVersionAtManagementGroup;
export const PolicyDefinitionVersionAtManagementGroup: typeof import("./policyDefinitionVersionAtManagementGroup").PolicyDefinitionVersionAtManagementGroup = null as any;
utilities.lazyLoad(exports, ["PolicyDefinitionVersionAtManagementGroup"], () => require("./policyDefinitionVersionAtManagementGroup"));

export { PolicyExemptionArgs } from "./policyExemption";
export type PolicyExemption = import("./policyExemption").PolicyExemption;
export const PolicyExemption: typeof import("./policyExemption").PolicyExemption = null as any;
utilities.lazyLoad(exports, ["PolicyExemption"], () => require("./policyExemption"));

export { PolicySetDefinitionArgs } from "./policySetDefinition";
export type PolicySetDefinition = import("./policySetDefinition").PolicySetDefinition;
export const PolicySetDefinition: typeof import("./policySetDefinition").PolicySetDefinition = null as any;
utilities.lazyLoad(exports, ["PolicySetDefinition"], () => require("./policySetDefinition"));

export { PolicySetDefinitionAtManagementGroupArgs } from "./policySetDefinitionAtManagementGroup";
export type PolicySetDefinitionAtManagementGroup = import("./policySetDefinitionAtManagementGroup").PolicySetDefinitionAtManagementGroup;
export const PolicySetDefinitionAtManagementGroup: typeof import("./policySetDefinitionAtManagementGroup").PolicySetDefinitionAtManagementGroup = null as any;
utilities.lazyLoad(exports, ["PolicySetDefinitionAtManagementGroup"], () => require("./policySetDefinitionAtManagementGroup"));

export { PolicySetDefinitionVersionArgs } from "./policySetDefinitionVersion";
export type PolicySetDefinitionVersion = import("./policySetDefinitionVersion").PolicySetDefinitionVersion;
export const PolicySetDefinitionVersion: typeof import("./policySetDefinitionVersion").PolicySetDefinitionVersion = null as any;
utilities.lazyLoad(exports, ["PolicySetDefinitionVersion"], () => require("./policySetDefinitionVersion"));

export { PolicySetDefinitionVersionAtManagementGroupArgs } from "./policySetDefinitionVersionAtManagementGroup";
export type PolicySetDefinitionVersionAtManagementGroup = import("./policySetDefinitionVersionAtManagementGroup").PolicySetDefinitionVersionAtManagementGroup;
export const PolicySetDefinitionVersionAtManagementGroup: typeof import("./policySetDefinitionVersionAtManagementGroup").PolicySetDefinitionVersionAtManagementGroup = null as any;
utilities.lazyLoad(exports, ["PolicySetDefinitionVersionAtManagementGroup"], () => require("./policySetDefinitionVersionAtManagementGroup"));

export { PrivateLinkAssociationArgs } from "./privateLinkAssociation";
export type PrivateLinkAssociation = import("./privateLinkAssociation").PrivateLinkAssociation;
export const PrivateLinkAssociation: typeof import("./privateLinkAssociation").PrivateLinkAssociation = null as any;
utilities.lazyLoad(exports, ["PrivateLinkAssociation"], () => require("./privateLinkAssociation"));

export { ResourceManagementPrivateLinkArgs } from "./resourceManagementPrivateLink";
export type ResourceManagementPrivateLink = import("./resourceManagementPrivateLink").ResourceManagementPrivateLink;
export const ResourceManagementPrivateLink: typeof import("./resourceManagementPrivateLink").ResourceManagementPrivateLink = null as any;
utilities.lazyLoad(exports, ["ResourceManagementPrivateLink"], () => require("./resourceManagementPrivateLink"));

export { RoleAssignmentArgs } from "./roleAssignment";
export type RoleAssignment = import("./roleAssignment").RoleAssignment;
export const RoleAssignment: typeof import("./roleAssignment").RoleAssignment = null as any;
utilities.lazyLoad(exports, ["RoleAssignment"], () => require("./roleAssignment"));

export { RoleDefinitionArgs } from "./roleDefinition";
export type RoleDefinition = import("./roleDefinition").RoleDefinition;
export const RoleDefinition: typeof import("./roleDefinition").RoleDefinition = null as any;
utilities.lazyLoad(exports, ["RoleDefinition"], () => require("./roleDefinition"));

export { RoleManagementPolicyAssignmentArgs } from "./roleManagementPolicyAssignment";
export type RoleManagementPolicyAssignment = import("./roleManagementPolicyAssignment").RoleManagementPolicyAssignment;
export const RoleManagementPolicyAssignment: typeof import("./roleManagementPolicyAssignment").RoleManagementPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["RoleManagementPolicyAssignment"], () => require("./roleManagementPolicyAssignment"));

export { ScopeAccessReviewHistoryDefinitionByIdArgs } from "./scopeAccessReviewHistoryDefinitionById";
export type ScopeAccessReviewHistoryDefinitionById = import("./scopeAccessReviewHistoryDefinitionById").ScopeAccessReviewHistoryDefinitionById;
export const ScopeAccessReviewHistoryDefinitionById: typeof import("./scopeAccessReviewHistoryDefinitionById").ScopeAccessReviewHistoryDefinitionById = null as any;
utilities.lazyLoad(exports, ["ScopeAccessReviewHistoryDefinitionById"], () => require("./scopeAccessReviewHistoryDefinitionById"));

export { ScopeAccessReviewScheduleDefinitionByIdArgs } from "./scopeAccessReviewScheduleDefinitionById";
export type ScopeAccessReviewScheduleDefinitionById = import("./scopeAccessReviewScheduleDefinitionById").ScopeAccessReviewScheduleDefinitionById;
export const ScopeAccessReviewScheduleDefinitionById: typeof import("./scopeAccessReviewScheduleDefinitionById").ScopeAccessReviewScheduleDefinitionById = null as any;
utilities.lazyLoad(exports, ["ScopeAccessReviewScheduleDefinitionById"], () => require("./scopeAccessReviewScheduleDefinitionById"));

export { VariableArgs } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));

export { VariableAtManagementGroupArgs } from "./variableAtManagementGroup";
export type VariableAtManagementGroup = import("./variableAtManagementGroup").VariableAtManagementGroup;
export const VariableAtManagementGroup: typeof import("./variableAtManagementGroup").VariableAtManagementGroup = null as any;
utilities.lazyLoad(exports, ["VariableAtManagementGroup"], () => require("./variableAtManagementGroup"));

export { VariableValueArgs } from "./variableValue";
export type VariableValue = import("./variableValue").VariableValue;
export const VariableValue: typeof import("./variableValue").VariableValue = null as any;
utilities.lazyLoad(exports, ["VariableValue"], () => require("./variableValue"));

export { VariableValueAtManagementGroupArgs } from "./variableValueAtManagementGroup";
export type VariableValueAtManagementGroup = import("./variableValueAtManagementGroup").VariableValueAtManagementGroup;
export const VariableValueAtManagementGroup: typeof import("./variableValueAtManagementGroup").VariableValueAtManagementGroup = null as any;
utilities.lazyLoad(exports, ["VariableValueAtManagementGroup"], () => require("./variableValueAtManagementGroup"));


// Export enums:
export * from "../types/enums/authorization";

// Export sub-modules:
import * as v20171001preview from "./v20171001preview";
import * as v20180501 from "./v20180501";
import * as v20190601 from "./v20190601";
import * as v20200301 from "./v20200301";
import * as v20200301preview from "./v20200301preview";
import * as v20200401preview from "./v20200401preview";
import * as v20200501 from "./v20200501";
import * as v20201001 from "./v20201001";
import * as v20201001preview from "./v20201001preview";
import * as v20210601 from "./v20210601";
import * as v20211201preview from "./v20211201preview";
import * as v20220401 from "./v20220401";
import * as v20220501preview from "./v20220501preview";
import * as v20220601 from "./v20220601";
import * as v20220701preview from "./v20220701preview";
import * as v20220801preview from "./v20220801preview";
import * as v20230401 from "./v20230401";
import * as v20240201preview from "./v20240201preview";
import * as v20240401 from "./v20240401";
import * as v20240501 from "./v20240501";

export {
    v20171001preview,
    v20180501,
    v20190601,
    v20200301,
    v20200301preview,
    v20200401preview,
    v20200501,
    v20201001,
    v20201001preview,
    v20210601,
    v20211201preview,
    v20220401,
    v20220501preview,
    v20220601,
    v20220701preview,
    v20220801preview,
    v20230401,
    v20240201preview,
    v20240401,
    v20240501,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:authorization:AccessReviewHistoryDefinitionById":
                return new AccessReviewHistoryDefinitionById(name, <any>undefined, { urn })
            case "azure-native:authorization:AccessReviewScheduleDefinitionById":
                return new AccessReviewScheduleDefinitionById(name, <any>undefined, { urn })
            case "azure-native:authorization:ManagementLockAtResourceGroupLevel":
                return new ManagementLockAtResourceGroupLevel(name, <any>undefined, { urn })
            case "azure-native:authorization:ManagementLockAtResourceLevel":
                return new ManagementLockAtResourceLevel(name, <any>undefined, { urn })
            case "azure-native:authorization:ManagementLockAtSubscriptionLevel":
                return new ManagementLockAtSubscriptionLevel(name, <any>undefined, { urn })
            case "azure-native:authorization:ManagementLockByScope":
                return new ManagementLockByScope(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicyAssignment":
                return new PolicyAssignment(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicyDefinition":
                return new PolicyDefinition(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicyDefinitionAtManagementGroup":
                return new PolicyDefinitionAtManagementGroup(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicyDefinitionVersion":
                return new PolicyDefinitionVersion(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicyDefinitionVersionAtManagementGroup":
                return new PolicyDefinitionVersionAtManagementGroup(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicyExemption":
                return new PolicyExemption(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicySetDefinition":
                return new PolicySetDefinition(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicySetDefinitionAtManagementGroup":
                return new PolicySetDefinitionAtManagementGroup(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicySetDefinitionVersion":
                return new PolicySetDefinitionVersion(name, <any>undefined, { urn })
            case "azure-native:authorization:PolicySetDefinitionVersionAtManagementGroup":
                return new PolicySetDefinitionVersionAtManagementGroup(name, <any>undefined, { urn })
            case "azure-native:authorization:PrivateLinkAssociation":
                return new PrivateLinkAssociation(name, <any>undefined, { urn })
            case "azure-native:authorization:ResourceManagementPrivateLink":
                return new ResourceManagementPrivateLink(name, <any>undefined, { urn })
            case "azure-native:authorization:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "azure-native:authorization:RoleDefinition":
                return new RoleDefinition(name, <any>undefined, { urn })
            case "azure-native:authorization:RoleManagementPolicyAssignment":
                return new RoleManagementPolicyAssignment(name, <any>undefined, { urn })
            case "azure-native:authorization:ScopeAccessReviewHistoryDefinitionById":
                return new ScopeAccessReviewHistoryDefinitionById(name, <any>undefined, { urn })
            case "azure-native:authorization:ScopeAccessReviewScheduleDefinitionById":
                return new ScopeAccessReviewScheduleDefinitionById(name, <any>undefined, { urn })
            case "azure-native:authorization:Variable":
                return new Variable(name, <any>undefined, { urn })
            case "azure-native:authorization:VariableAtManagementGroup":
                return new VariableAtManagementGroup(name, <any>undefined, { urn })
            case "azure-native:authorization:VariableValue":
                return new VariableValue(name, <any>undefined, { urn })
            case "azure-native:authorization:VariableValueAtManagementGroup":
                return new VariableValueAtManagementGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "authorization", _module)
