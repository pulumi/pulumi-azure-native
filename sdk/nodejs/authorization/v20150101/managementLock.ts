// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Management lock information.
 *
 * @deprecated Version 2015-01-01 will be removed in v2 of the provider.
 */
export class ManagementLock extends pulumi.CustomResource {
    /**
     * Get an existing ManagementLock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ManagementLock {
        pulumi.log.warn("ManagementLock is deprecated: Version 2015-01-01 will be removed in v2 of the provider.")
        return new ManagementLock(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:authorization/v20150101:ManagementLock';

    /**
     * Returns true if the given object is an instance of ManagementLock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementLock {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementLock.__pulumiType;
    }

    /**
     * The lock level of the management lock.
     */
    public readonly level!: pulumi.Output<string | undefined>;
    /**
     * The name of the lock.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The notes of the management lock.
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * The type of the lock.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ManagementLock resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2015-01-01 will be removed in v2 of the provider. */
    constructor(name: string, args?: ManagementLockArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ManagementLock is deprecated: Version 2015-01-01 will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["lockName"] = args ? args.lockName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["level"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["notes"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:authorization:ManagementLock" }, { type: "azure-native:authorization/v20160901:ManagementLock" }, { type: "azure-native:authorization/v20170401:ManagementLock" }, { type: "azure-native:authorization/v20200501:ManagementLock" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ManagementLock.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ManagementLock resource.
 */
export interface ManagementLockArgs {
    /**
     * The lock level of the management lock.
     */
    level?: pulumi.Input<string | enums.authorization.v20150101.LockLevel>;
    /**
     * The name of lock.
     */
    lockName?: pulumi.Input<string>;
    /**
     * The name of the lock.
     */
    name?: pulumi.Input<string>;
    /**
     * The notes of the management lock.
     */
    notes?: pulumi.Input<string>;
}
