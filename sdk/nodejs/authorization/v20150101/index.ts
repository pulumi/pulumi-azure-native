// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetManagementLockArgs, GetManagementLockResult, GetManagementLockOutputArgs } from "./getManagementLock";
export const getManagementLock: typeof import("./getManagementLock").getManagementLock = null as any;
export const getManagementLockOutput: typeof import("./getManagementLock").getManagementLockOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLock","getManagementLockOutput"], () => require("./getManagementLock"));

export { GetManagementLockAtResourceGroupLevelArgs, GetManagementLockAtResourceGroupLevelResult, GetManagementLockAtResourceGroupLevelOutputArgs } from "./getManagementLockAtResourceGroupLevel";
export const getManagementLockAtResourceGroupLevel: typeof import("./getManagementLockAtResourceGroupLevel").getManagementLockAtResourceGroupLevel = null as any;
export const getManagementLockAtResourceGroupLevelOutput: typeof import("./getManagementLockAtResourceGroupLevel").getManagementLockAtResourceGroupLevelOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLockAtResourceGroupLevel","getManagementLockAtResourceGroupLevelOutput"], () => require("./getManagementLockAtResourceGroupLevel"));

export { ManagementLockArgs } from "./managementLock";
export type ManagementLock = import("./managementLock").ManagementLock;
export const ManagementLock: typeof import("./managementLock").ManagementLock = null as any;
utilities.lazyLoad(exports, ["ManagementLock"], () => require("./managementLock"));

export { ManagementLockAtResourceGroupLevelArgs } from "./managementLockAtResourceGroupLevel";
export type ManagementLockAtResourceGroupLevel = import("./managementLockAtResourceGroupLevel").ManagementLockAtResourceGroupLevel;
export const ManagementLockAtResourceGroupLevel: typeof import("./managementLockAtResourceGroupLevel").ManagementLockAtResourceGroupLevel = null as any;
utilities.lazyLoad(exports, ["ManagementLockAtResourceGroupLevel"], () => require("./managementLockAtResourceGroupLevel"));


// Export enums:
export * from "../../types/enums/authorization/v20150101";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:authorization/v20150101:ManagementLock":
                return new ManagementLock(name, <any>undefined, { urn })
            case "azure-native:authorization/v20150101:ManagementLockAtResourceGroupLevel":
                return new ManagementLockAtResourceGroupLevel(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "authorization/v20150101", _module)
