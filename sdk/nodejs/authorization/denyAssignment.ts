// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Deny Assignment
 * API Version: 2020-03-01-preview.
 */
export class DenyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing DenyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DenyAssignment {
        return new DenyAssignment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:authorization:DenyAssignment';

    /**
     * Returns true if the given object is an instance of DenyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DenyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DenyAssignment.__pulumiType;
    }

    /**
     * The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
     */
    public readonly condition!: pulumi.Output<string | undefined>;
    /**
     * Version of the condition. Currently accepted value is '2.0'
     */
    public readonly conditionVersion!: pulumi.Output<string | undefined>;
    /**
     * Id of the user who created the assignment
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Time it was created
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * The display name of the deny assignment.
     */
    public readonly denyAssignmentName!: pulumi.Output<string | undefined>;
    /**
     * The description of the deny assignment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Determines if the deny assignment applies to child scopes. Default value is false.
     */
    public readonly doNotApplyToChildScopes!: pulumi.Output<boolean | undefined>;
    /**
     * Array of principals to which the deny assignment does not apply.
     */
    public readonly excludePrincipals!: pulumi.Output<outputs.authorization.PrincipalResponse[] | undefined>;
    /**
     * Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
     */
    public readonly isSystemProtected!: pulumi.Output<boolean | undefined>;
    /**
     * The deny assignment name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * An array of permissions that are denied by the deny assignment.
     */
    public readonly permissions!: pulumi.Output<outputs.authorization.PermissionResponse[]>;
    /**
     * Array of principals to which the deny assignment applies.
     */
    public readonly principals!: pulumi.Output<outputs.authorization.PrincipalResponse[]>;
    /**
     * The deny assignment scope.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * The deny assignment type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Id of the user who updated the assignment
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    /**
     * Time it was updated
     */
    public /*out*/ readonly updatedOn!: pulumi.Output<string>;

    /**
     * Create a DenyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DenyAssignmentArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if ((!args || args.permissions === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.principals === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'principals'");
            }
            if ((!args || args.scope === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'scope'");
            }
            inputs["condition"] = args ? args.condition : undefined;
            inputs["conditionVersion"] = args ? args.conditionVersion : undefined;
            inputs["denyAssignmentName"] = args ? args.denyAssignmentName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["doNotApplyToChildScopes"] = args ? args.doNotApplyToChildScopes : undefined;
            inputs["excludePrincipals"] = args ? args.excludePrincipals : undefined;
            inputs["isSystemProtected"] = args ? args.isSystemProtected : undefined;
            inputs["permissions"] = args ? args.permissions : undefined;
            inputs["principals"] = args ? args.principals : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["createdBy"] = undefined /*out*/;
            inputs["createdOn"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["updatedBy"] = undefined /*out*/;
            inputs["updatedOn"] = undefined /*out*/;
        } else {
            inputs["condition"] = undefined /*out*/;
            inputs["conditionVersion"] = undefined /*out*/;
            inputs["createdBy"] = undefined /*out*/;
            inputs["createdOn"] = undefined /*out*/;
            inputs["denyAssignmentName"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["doNotApplyToChildScopes"] = undefined /*out*/;
            inputs["excludePrincipals"] = undefined /*out*/;
            inputs["isSystemProtected"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["permissions"] = undefined /*out*/;
            inputs["principals"] = undefined /*out*/;
            inputs["scope"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["updatedBy"] = undefined /*out*/;
            inputs["updatedOn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:authorization/v20200301preview:DenyAssignment" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(DenyAssignment.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a DenyAssignment resource.
 */
export interface DenyAssignmentArgs {
    /**
     * The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
     */
    readonly condition?: pulumi.Input<string>;
    /**
     * Version of the condition. Currently accepted value is '2.0'
     */
    readonly conditionVersion?: pulumi.Input<string>;
    /**
     * The display name of the deny assignment.
     */
    readonly denyAssignmentName?: pulumi.Input<string>;
    /**
     * The description of the deny assignment.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Determines if the deny assignment applies to child scopes. Default value is false.
     */
    readonly doNotApplyToChildScopes?: pulumi.Input<boolean>;
    /**
     * Array of principals to which the deny assignment does not apply.
     */
    readonly excludePrincipals?: pulumi.Input<pulumi.Input<inputs.authorization.Principal>[]>;
    /**
     * Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
     */
    readonly isSystemProtected?: pulumi.Input<boolean>;
    /**
     * An array of permissions that are denied by the deny assignment.
     */
    readonly permissions: pulumi.Input<pulumi.Input<inputs.authorization.Permission>[]>;
    /**
     * Array of principals to which the deny assignment applies.
     */
    readonly principals: pulumi.Input<pulumi.Input<inputs.authorization.Principal>[]>;
    /**
     * The deny assignment scope.
     */
    readonly scope: pulumi.Input<string>;
}
