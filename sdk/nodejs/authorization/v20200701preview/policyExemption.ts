// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * The policy exemption.
 */
export class PolicyExemption extends pulumi.CustomResource {
    /**
     * Get an existing PolicyExemption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PolicyExemption {
        return new PolicyExemption(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:authorization/v20200701preview:PolicyExemption';

    /**
     * Returns true if the given object is an instance of PolicyExemption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyExemption {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyExemption.__pulumiType;
    }

    /**
     * The description of the policy exemption.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the policy exemption.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The policy exemption category. Possible values are Waiver and Mitigated.
     */
    public readonly exemptionCategory!: pulumi.Output<string>;
    /**
     * The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
     */
    public readonly expiresOn!: pulumi.Output<string | undefined>;
    /**
     * The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs.
     */
    public readonly metadata!: pulumi.Output<any | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ID of the policy assignment that is being exempted.
     */
    public readonly policyAssignmentId!: pulumi.Output<string>;
    /**
     * The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
     */
    public readonly policyDefinitionReferenceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.authorization.v20200701preview.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a PolicyExemption resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyExemptionArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.exemptionCategory === undefined) {
                throw new Error("Missing required property 'exemptionCategory'");
            }
            if (!args || args.policyAssignmentId === undefined) {
                throw new Error("Missing required property 'policyAssignmentId'");
            }
            if (!args || args.policyExemptionName === undefined) {
                throw new Error("Missing required property 'policyExemptionName'");
            }
            if (!args || args.scope === undefined) {
                throw new Error("Missing required property 'scope'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["exemptionCategory"] = args ? args.exemptionCategory : undefined;
            inputs["expiresOn"] = args ? args.expiresOn : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["policyAssignmentId"] = args ? args.policyAssignmentId : undefined;
            inputs["policyDefinitionReferenceIds"] = args ? args.policyDefinitionReferenceIds : undefined;
            inputs["policyExemptionName"] = args ? args.policyExemptionName : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["description"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["exemptionCategory"] = undefined /*out*/;
            inputs["expiresOn"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["policyAssignmentId"] = undefined /*out*/;
            inputs["policyDefinitionReferenceIds"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(PolicyExemption.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a PolicyExemption resource.
 */
export interface PolicyExemptionArgs {
    /**
     * The description of the policy exemption.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of the policy exemption.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * The policy exemption category. Possible values are Waiver and Mitigated.
     */
    readonly exemptionCategory: pulumi.Input<string>;
    /**
     * The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
     */
    readonly expiresOn?: pulumi.Input<string>;
    /**
     * The policy exemption metadata. Metadata is an open ended object and is typically a collection of key value pairs.
     */
    readonly metadata?: any;
    /**
     * The ID of the policy assignment that is being exempted.
     */
    readonly policyAssignmentId: pulumi.Input<string>;
    /**
     * The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
     */
    readonly policyDefinitionReferenceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the policy exemption to delete.
     */
    readonly policyExemptionName: pulumi.Input<string>;
    /**
     * The scope of the policy exemption. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
     */
    readonly scope: pulumi.Input<string>;
}
