// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AADDataConnectorArgs } from "./aaddataConnector";
export type AADDataConnector = import("./aaddataConnector").AADDataConnector;
export const AADDataConnector: typeof import("./aaddataConnector").AADDataConnector = null as any;
utilities.lazyLoad(exports, ["AADDataConnector"], () => require("./aaddataConnector"));

export { AATPDataConnectorArgs } from "./aatpdataConnector";
export type AATPDataConnector = import("./aatpdataConnector").AATPDataConnector;
export const AATPDataConnector: typeof import("./aatpdataConnector").AATPDataConnector = null as any;
utilities.lazyLoad(exports, ["AATPDataConnector"], () => require("./aatpdataConnector"));

export { ActionArgs } from "./action";
export type Action = import("./action").Action;
export const Action: typeof import("./action").Action = null as any;
utilities.lazyLoad(exports, ["Action"], () => require("./action"));

export { ActivityCustomEntityQueryArgs } from "./activityCustomEntityQuery";
export type ActivityCustomEntityQuery = import("./activityCustomEntityQuery").ActivityCustomEntityQuery;
export const ActivityCustomEntityQuery: typeof import("./activityCustomEntityQuery").ActivityCustomEntityQuery = null as any;
utilities.lazyLoad(exports, ["ActivityCustomEntityQuery"], () => require("./activityCustomEntityQuery"));

export { AnomaliesArgs } from "./anomalies";
export type Anomalies = import("./anomalies").Anomalies;
export const Anomalies: typeof import("./anomalies").Anomalies = null as any;
utilities.lazyLoad(exports, ["Anomalies"], () => require("./anomalies"));

export { AnomalySecurityMLAnalyticsSettingsArgs } from "./anomalySecurityMLAnalyticsSettings";
export type AnomalySecurityMLAnalyticsSettings = import("./anomalySecurityMLAnalyticsSettings").AnomalySecurityMLAnalyticsSettings;
export const AnomalySecurityMLAnalyticsSettings: typeof import("./anomalySecurityMLAnalyticsSettings").AnomalySecurityMLAnalyticsSettings = null as any;
utilities.lazyLoad(exports, ["AnomalySecurityMLAnalyticsSettings"], () => require("./anomalySecurityMLAnalyticsSettings"));

export { ASCDataConnectorArgs } from "./ascdataConnector";
export type ASCDataConnector = import("./ascdataConnector").ASCDataConnector;
export const ASCDataConnector: typeof import("./ascdataConnector").ASCDataConnector = null as any;
utilities.lazyLoad(exports, ["ASCDataConnector"], () => require("./ascdataConnector"));

export { AutomationRuleArgs } from "./automationRule";
export type AutomationRule = import("./automationRule").AutomationRule;
export const AutomationRule: typeof import("./automationRule").AutomationRule = null as any;
utilities.lazyLoad(exports, ["AutomationRule"], () => require("./automationRule"));

export { AwsCloudTrailDataConnectorArgs } from "./awsCloudTrailDataConnector";
export type AwsCloudTrailDataConnector = import("./awsCloudTrailDataConnector").AwsCloudTrailDataConnector;
export const AwsCloudTrailDataConnector: typeof import("./awsCloudTrailDataConnector").AwsCloudTrailDataConnector = null as any;
utilities.lazyLoad(exports, ["AwsCloudTrailDataConnector"], () => require("./awsCloudTrailDataConnector"));

export { BookmarkArgs } from "./bookmark";
export type Bookmark = import("./bookmark").Bookmark;
export const Bookmark: typeof import("./bookmark").Bookmark = null as any;
utilities.lazyLoad(exports, ["Bookmark"], () => require("./bookmark"));

export { BookmarkRelationArgs } from "./bookmarkRelation";
export type BookmarkRelation = import("./bookmarkRelation").BookmarkRelation;
export const BookmarkRelation: typeof import("./bookmarkRelation").BookmarkRelation = null as any;
utilities.lazyLoad(exports, ["BookmarkRelation"], () => require("./bookmarkRelation"));

export { BusinessApplicationAgentArgs } from "./businessApplicationAgent";
export type BusinessApplicationAgent = import("./businessApplicationAgent").BusinessApplicationAgent;
export const BusinessApplicationAgent: typeof import("./businessApplicationAgent").BusinessApplicationAgent = null as any;
utilities.lazyLoad(exports, ["BusinessApplicationAgent"], () => require("./businessApplicationAgent"));

export { ContentPackageArgs } from "./contentPackage";
export type ContentPackage = import("./contentPackage").ContentPackage;
export const ContentPackage: typeof import("./contentPackage").ContentPackage = null as any;
utilities.lazyLoad(exports, ["ContentPackage"], () => require("./contentPackage"));

export { ContentTemplateArgs } from "./contentTemplate";
export type ContentTemplate = import("./contentTemplate").ContentTemplate;
export const ContentTemplate: typeof import("./contentTemplate").ContentTemplate = null as any;
utilities.lazyLoad(exports, ["ContentTemplate"], () => require("./contentTemplate"));

export { CustomizableConnectorDefinitionArgs } from "./customizableConnectorDefinition";
export type CustomizableConnectorDefinition = import("./customizableConnectorDefinition").CustomizableConnectorDefinition;
export const CustomizableConnectorDefinition: typeof import("./customizableConnectorDefinition").CustomizableConnectorDefinition = null as any;
utilities.lazyLoad(exports, ["CustomizableConnectorDefinition"], () => require("./customizableConnectorDefinition"));

export { EntityAnalyticsArgs } from "./entityAnalytics";
export type EntityAnalytics = import("./entityAnalytics").EntityAnalytics;
export const EntityAnalytics: typeof import("./entityAnalytics").EntityAnalytics = null as any;
utilities.lazyLoad(exports, ["EntityAnalytics"], () => require("./entityAnalytics"));

export { EyesOnArgs } from "./eyesOn";
export type EyesOn = import("./eyesOn").EyesOn;
export const EyesOn: typeof import("./eyesOn").EyesOn = null as any;
utilities.lazyLoad(exports, ["EyesOn"], () => require("./eyesOn"));

export { FileImportArgs } from "./fileImport";
export type FileImport = import("./fileImport").FileImport;
export const FileImport: typeof import("./fileImport").FileImport = null as any;
utilities.lazyLoad(exports, ["FileImport"], () => require("./fileImport"));

export { FusionAlertRuleArgs } from "./fusionAlertRule";
export type FusionAlertRule = import("./fusionAlertRule").FusionAlertRule;
export const FusionAlertRule: typeof import("./fusionAlertRule").FusionAlertRule = null as any;
utilities.lazyLoad(exports, ["FusionAlertRule"], () => require("./fusionAlertRule"));

export { GetAADDataConnectorArgs, GetAADDataConnectorResult, GetAADDataConnectorOutputArgs } from "./getAADDataConnector";
export const getAADDataConnector: typeof import("./getAADDataConnector").getAADDataConnector = null as any;
export const getAADDataConnectorOutput: typeof import("./getAADDataConnector").getAADDataConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getAADDataConnector","getAADDataConnectorOutput"], () => require("./getAADDataConnector"));

export { GetAATPDataConnectorArgs, GetAATPDataConnectorResult, GetAATPDataConnectorOutputArgs } from "./getAATPDataConnector";
export const getAATPDataConnector: typeof import("./getAATPDataConnector").getAATPDataConnector = null as any;
export const getAATPDataConnectorOutput: typeof import("./getAATPDataConnector").getAATPDataConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getAATPDataConnector","getAATPDataConnectorOutput"], () => require("./getAATPDataConnector"));

export { GetASCDataConnectorArgs, GetASCDataConnectorResult, GetASCDataConnectorOutputArgs } from "./getASCDataConnector";
export const getASCDataConnector: typeof import("./getASCDataConnector").getASCDataConnector = null as any;
export const getASCDataConnectorOutput: typeof import("./getASCDataConnector").getASCDataConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getASCDataConnector","getASCDataConnectorOutput"], () => require("./getASCDataConnector"));

export { GetActionArgs, GetActionResult, GetActionOutputArgs } from "./getAction";
export const getAction: typeof import("./getAction").getAction = null as any;
export const getActionOutput: typeof import("./getAction").getActionOutput = null as any;
utilities.lazyLoad(exports, ["getAction","getActionOutput"], () => require("./getAction"));

export { GetActivityCustomEntityQueryArgs, GetActivityCustomEntityQueryResult, GetActivityCustomEntityQueryOutputArgs } from "./getActivityCustomEntityQuery";
export const getActivityCustomEntityQuery: typeof import("./getActivityCustomEntityQuery").getActivityCustomEntityQuery = null as any;
export const getActivityCustomEntityQueryOutput: typeof import("./getActivityCustomEntityQuery").getActivityCustomEntityQueryOutput = null as any;
utilities.lazyLoad(exports, ["getActivityCustomEntityQuery","getActivityCustomEntityQueryOutput"], () => require("./getActivityCustomEntityQuery"));

export { GetAnomaliesArgs, GetAnomaliesResult, GetAnomaliesOutputArgs } from "./getAnomalies";
export const getAnomalies: typeof import("./getAnomalies").getAnomalies = null as any;
export const getAnomaliesOutput: typeof import("./getAnomalies").getAnomaliesOutput = null as any;
utilities.lazyLoad(exports, ["getAnomalies","getAnomaliesOutput"], () => require("./getAnomalies"));

export { GetAnomalySecurityMLAnalyticsSettingsArgs, GetAnomalySecurityMLAnalyticsSettingsResult, GetAnomalySecurityMLAnalyticsSettingsOutputArgs } from "./getAnomalySecurityMLAnalyticsSettings";
export const getAnomalySecurityMLAnalyticsSettings: typeof import("./getAnomalySecurityMLAnalyticsSettings").getAnomalySecurityMLAnalyticsSettings = null as any;
export const getAnomalySecurityMLAnalyticsSettingsOutput: typeof import("./getAnomalySecurityMLAnalyticsSettings").getAnomalySecurityMLAnalyticsSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAnomalySecurityMLAnalyticsSettings","getAnomalySecurityMLAnalyticsSettingsOutput"], () => require("./getAnomalySecurityMLAnalyticsSettings"));

export { GetAutomationRuleArgs, GetAutomationRuleResult, GetAutomationRuleOutputArgs } from "./getAutomationRule";
export const getAutomationRule: typeof import("./getAutomationRule").getAutomationRule = null as any;
export const getAutomationRuleOutput: typeof import("./getAutomationRule").getAutomationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationRule","getAutomationRuleOutput"], () => require("./getAutomationRule"));

export { GetAwsCloudTrailDataConnectorArgs, GetAwsCloudTrailDataConnectorResult, GetAwsCloudTrailDataConnectorOutputArgs } from "./getAwsCloudTrailDataConnector";
export const getAwsCloudTrailDataConnector: typeof import("./getAwsCloudTrailDataConnector").getAwsCloudTrailDataConnector = null as any;
export const getAwsCloudTrailDataConnectorOutput: typeof import("./getAwsCloudTrailDataConnector").getAwsCloudTrailDataConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getAwsCloudTrailDataConnector","getAwsCloudTrailDataConnectorOutput"], () => require("./getAwsCloudTrailDataConnector"));

export { GetBookmarkArgs, GetBookmarkResult, GetBookmarkOutputArgs } from "./getBookmark";
export const getBookmark: typeof import("./getBookmark").getBookmark = null as any;
export const getBookmarkOutput: typeof import("./getBookmark").getBookmarkOutput = null as any;
utilities.lazyLoad(exports, ["getBookmark","getBookmarkOutput"], () => require("./getBookmark"));

export { GetBookmarkRelationArgs, GetBookmarkRelationResult, GetBookmarkRelationOutputArgs } from "./getBookmarkRelation";
export const getBookmarkRelation: typeof import("./getBookmarkRelation").getBookmarkRelation = null as any;
export const getBookmarkRelationOutput: typeof import("./getBookmarkRelation").getBookmarkRelationOutput = null as any;
utilities.lazyLoad(exports, ["getBookmarkRelation","getBookmarkRelationOutput"], () => require("./getBookmarkRelation"));

export { GetBusinessApplicationAgentArgs, GetBusinessApplicationAgentResult, GetBusinessApplicationAgentOutputArgs } from "./getBusinessApplicationAgent";
export const getBusinessApplicationAgent: typeof import("./getBusinessApplicationAgent").getBusinessApplicationAgent = null as any;
export const getBusinessApplicationAgentOutput: typeof import("./getBusinessApplicationAgent").getBusinessApplicationAgentOutput = null as any;
utilities.lazyLoad(exports, ["getBusinessApplicationAgent","getBusinessApplicationAgentOutput"], () => require("./getBusinessApplicationAgent"));

export { GetContentPackageArgs, GetContentPackageResult, GetContentPackageOutputArgs } from "./getContentPackage";
export const getContentPackage: typeof import("./getContentPackage").getContentPackage = null as any;
export const getContentPackageOutput: typeof import("./getContentPackage").getContentPackageOutput = null as any;
utilities.lazyLoad(exports, ["getContentPackage","getContentPackageOutput"], () => require("./getContentPackage"));

export { GetContentTemplateArgs, GetContentTemplateResult, GetContentTemplateOutputArgs } from "./getContentTemplate";
export const getContentTemplate: typeof import("./getContentTemplate").getContentTemplate = null as any;
export const getContentTemplateOutput: typeof import("./getContentTemplate").getContentTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getContentTemplate","getContentTemplateOutput"], () => require("./getContentTemplate"));

export { GetCustomizableConnectorDefinitionArgs, GetCustomizableConnectorDefinitionResult, GetCustomizableConnectorDefinitionOutputArgs } from "./getCustomizableConnectorDefinition";
export const getCustomizableConnectorDefinition: typeof import("./getCustomizableConnectorDefinition").getCustomizableConnectorDefinition = null as any;
export const getCustomizableConnectorDefinitionOutput: typeof import("./getCustomizableConnectorDefinition").getCustomizableConnectorDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCustomizableConnectorDefinition","getCustomizableConnectorDefinitionOutput"], () => require("./getCustomizableConnectorDefinition"));

export { GetEntitiesGetTimelineArgs, GetEntitiesGetTimelineResult, GetEntitiesGetTimelineOutputArgs } from "./getEntitiesGetTimeline";
export const getEntitiesGetTimeline: typeof import("./getEntitiesGetTimeline").getEntitiesGetTimeline = null as any;
export const getEntitiesGetTimelineOutput: typeof import("./getEntitiesGetTimeline").getEntitiesGetTimelineOutput = null as any;
utilities.lazyLoad(exports, ["getEntitiesGetTimeline","getEntitiesGetTimelineOutput"], () => require("./getEntitiesGetTimeline"));

export { GetEntityAnalyticsArgs, GetEntityAnalyticsResult, GetEntityAnalyticsOutputArgs } from "./getEntityAnalytics";
export const getEntityAnalytics: typeof import("./getEntityAnalytics").getEntityAnalytics = null as any;
export const getEntityAnalyticsOutput: typeof import("./getEntityAnalytics").getEntityAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getEntityAnalytics","getEntityAnalyticsOutput"], () => require("./getEntityAnalytics"));

export { GetEntityInsightsArgs, GetEntityInsightsResult, GetEntityInsightsOutputArgs } from "./getEntityInsights";
export const getEntityInsights: typeof import("./getEntityInsights").getEntityInsights = null as any;
export const getEntityInsightsOutput: typeof import("./getEntityInsights").getEntityInsightsOutput = null as any;
utilities.lazyLoad(exports, ["getEntityInsights","getEntityInsightsOutput"], () => require("./getEntityInsights"));

export { GetEyesOnArgs, GetEyesOnResult, GetEyesOnOutputArgs } from "./getEyesOn";
export const getEyesOn: typeof import("./getEyesOn").getEyesOn = null as any;
export const getEyesOnOutput: typeof import("./getEyesOn").getEyesOnOutput = null as any;
utilities.lazyLoad(exports, ["getEyesOn","getEyesOnOutput"], () => require("./getEyesOn"));

export { GetFileImportArgs, GetFileImportResult, GetFileImportOutputArgs } from "./getFileImport";
export const getFileImport: typeof import("./getFileImport").getFileImport = null as any;
export const getFileImportOutput: typeof import("./getFileImport").getFileImportOutput = null as any;
utilities.lazyLoad(exports, ["getFileImport","getFileImportOutput"], () => require("./getFileImport"));

export { GetFusionAlertRuleArgs, GetFusionAlertRuleResult, GetFusionAlertRuleOutputArgs } from "./getFusionAlertRule";
export const getFusionAlertRule: typeof import("./getFusionAlertRule").getFusionAlertRule = null as any;
export const getFusionAlertRuleOutput: typeof import("./getFusionAlertRule").getFusionAlertRuleOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAlertRule","getFusionAlertRuleOutput"], () => require("./getFusionAlertRule"));

export { GetHuntArgs, GetHuntResult, GetHuntOutputArgs } from "./getHunt";
export const getHunt: typeof import("./getHunt").getHunt = null as any;
export const getHuntOutput: typeof import("./getHunt").getHuntOutput = null as any;
utilities.lazyLoad(exports, ["getHunt","getHuntOutput"], () => require("./getHunt"));

export { GetHuntCommentArgs, GetHuntCommentResult, GetHuntCommentOutputArgs } from "./getHuntComment";
export const getHuntComment: typeof import("./getHuntComment").getHuntComment = null as any;
export const getHuntCommentOutput: typeof import("./getHuntComment").getHuntCommentOutput = null as any;
utilities.lazyLoad(exports, ["getHuntComment","getHuntCommentOutput"], () => require("./getHuntComment"));

export { GetHuntRelationArgs, GetHuntRelationResult, GetHuntRelationOutputArgs } from "./getHuntRelation";
export const getHuntRelation: typeof import("./getHuntRelation").getHuntRelation = null as any;
export const getHuntRelationOutput: typeof import("./getHuntRelation").getHuntRelationOutput = null as any;
utilities.lazyLoad(exports, ["getHuntRelation","getHuntRelationOutput"], () => require("./getHuntRelation"));

export { GetIncidentArgs, GetIncidentResult, GetIncidentOutputArgs } from "./getIncident";
export const getIncident: typeof import("./getIncident").getIncident = null as any;
export const getIncidentOutput: typeof import("./getIncident").getIncidentOutput = null as any;
utilities.lazyLoad(exports, ["getIncident","getIncidentOutput"], () => require("./getIncident"));

export { GetIncidentCommentArgs, GetIncidentCommentResult, GetIncidentCommentOutputArgs } from "./getIncidentComment";
export const getIncidentComment: typeof import("./getIncidentComment").getIncidentComment = null as any;
export const getIncidentCommentOutput: typeof import("./getIncidentComment").getIncidentCommentOutput = null as any;
utilities.lazyLoad(exports, ["getIncidentComment","getIncidentCommentOutput"], () => require("./getIncidentComment"));

export { GetIncidentRelationArgs, GetIncidentRelationResult, GetIncidentRelationOutputArgs } from "./getIncidentRelation";
export const getIncidentRelation: typeof import("./getIncidentRelation").getIncidentRelation = null as any;
export const getIncidentRelationOutput: typeof import("./getIncidentRelation").getIncidentRelationOutput = null as any;
utilities.lazyLoad(exports, ["getIncidentRelation","getIncidentRelationOutput"], () => require("./getIncidentRelation"));

export { GetIncidentTaskArgs, GetIncidentTaskResult, GetIncidentTaskOutputArgs } from "./getIncidentTask";
export const getIncidentTask: typeof import("./getIncidentTask").getIncidentTask = null as any;
export const getIncidentTaskOutput: typeof import("./getIncidentTask").getIncidentTaskOutput = null as any;
utilities.lazyLoad(exports, ["getIncidentTask","getIncidentTaskOutput"], () => require("./getIncidentTask"));

export { GetMCASDataConnectorArgs, GetMCASDataConnectorResult, GetMCASDataConnectorOutputArgs } from "./getMCASDataConnector";
export const getMCASDataConnector: typeof import("./getMCASDataConnector").getMCASDataConnector = null as any;
export const getMCASDataConnectorOutput: typeof import("./getMCASDataConnector").getMCASDataConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getMCASDataConnector","getMCASDataConnectorOutput"], () => require("./getMCASDataConnector"));

export { GetMDATPDataConnectorArgs, GetMDATPDataConnectorResult, GetMDATPDataConnectorOutputArgs } from "./getMDATPDataConnector";
export const getMDATPDataConnector: typeof import("./getMDATPDataConnector").getMDATPDataConnector = null as any;
export const getMDATPDataConnectorOutput: typeof import("./getMDATPDataConnector").getMDATPDataConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getMDATPDataConnector","getMDATPDataConnectorOutput"], () => require("./getMDATPDataConnector"));

export { GetMetadataArgs, GetMetadataResult, GetMetadataOutputArgs } from "./getMetadata";
export const getMetadata: typeof import("./getMetadata").getMetadata = null as any;
export const getMetadataOutput: typeof import("./getMetadata").getMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getMetadata","getMetadataOutput"], () => require("./getMetadata"));

export { GetMicrosoftSecurityIncidentCreationAlertRuleArgs, GetMicrosoftSecurityIncidentCreationAlertRuleResult, GetMicrosoftSecurityIncidentCreationAlertRuleOutputArgs } from "./getMicrosoftSecurityIncidentCreationAlertRule";
export const getMicrosoftSecurityIncidentCreationAlertRule: typeof import("./getMicrosoftSecurityIncidentCreationAlertRule").getMicrosoftSecurityIncidentCreationAlertRule = null as any;
export const getMicrosoftSecurityIncidentCreationAlertRuleOutput: typeof import("./getMicrosoftSecurityIncidentCreationAlertRule").getMicrosoftSecurityIncidentCreationAlertRuleOutput = null as any;
utilities.lazyLoad(exports, ["getMicrosoftSecurityIncidentCreationAlertRule","getMicrosoftSecurityIncidentCreationAlertRuleOutput"], () => require("./getMicrosoftSecurityIncidentCreationAlertRule"));

export { GetOfficeDataConnectorArgs, GetOfficeDataConnectorResult, GetOfficeDataConnectorOutputArgs } from "./getOfficeDataConnector";
export const getOfficeDataConnector: typeof import("./getOfficeDataConnector").getOfficeDataConnector = null as any;
export const getOfficeDataConnectorOutput: typeof import("./getOfficeDataConnector").getOfficeDataConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getOfficeDataConnector","getOfficeDataConnectorOutput"], () => require("./getOfficeDataConnector"));

export { GetScheduledAlertRuleArgs, GetScheduledAlertRuleResult, GetScheduledAlertRuleOutputArgs } from "./getScheduledAlertRule";
export const getScheduledAlertRule: typeof import("./getScheduledAlertRule").getScheduledAlertRule = null as any;
export const getScheduledAlertRuleOutput: typeof import("./getScheduledAlertRule").getScheduledAlertRuleOutput = null as any;
utilities.lazyLoad(exports, ["getScheduledAlertRule","getScheduledAlertRuleOutput"], () => require("./getScheduledAlertRule"));

export { GetSentinelOnboardingStateArgs, GetSentinelOnboardingStateResult, GetSentinelOnboardingStateOutputArgs } from "./getSentinelOnboardingState";
export const getSentinelOnboardingState: typeof import("./getSentinelOnboardingState").getSentinelOnboardingState = null as any;
export const getSentinelOnboardingStateOutput: typeof import("./getSentinelOnboardingState").getSentinelOnboardingStateOutput = null as any;
utilities.lazyLoad(exports, ["getSentinelOnboardingState","getSentinelOnboardingStateOutput"], () => require("./getSentinelOnboardingState"));

export { GetSourceControlArgs, GetSourceControlResult, GetSourceControlOutputArgs } from "./getSourceControl";
export const getSourceControl: typeof import("./getSourceControl").getSourceControl = null as any;
export const getSourceControlOutput: typeof import("./getSourceControl").getSourceControlOutput = null as any;
utilities.lazyLoad(exports, ["getSourceControl","getSourceControlOutput"], () => require("./getSourceControl"));

export { GetSystemArgs, GetSystemResult, GetSystemOutputArgs } from "./getSystem";
export const getSystem: typeof import("./getSystem").getSystem = null as any;
export const getSystemOutput: typeof import("./getSystem").getSystemOutput = null as any;
utilities.lazyLoad(exports, ["getSystem","getSystemOutput"], () => require("./getSystem"));

export { GetTIDataConnectorArgs, GetTIDataConnectorResult, GetTIDataConnectorOutputArgs } from "./getTIDataConnector";
export const getTIDataConnector: typeof import("./getTIDataConnector").getTIDataConnector = null as any;
export const getTIDataConnectorOutput: typeof import("./getTIDataConnector").getTIDataConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getTIDataConnector","getTIDataConnectorOutput"], () => require("./getTIDataConnector"));

export { GetThreatIntelligenceIndicatorArgs, GetThreatIntelligenceIndicatorResult, GetThreatIntelligenceIndicatorOutputArgs } from "./getThreatIntelligenceIndicator";
export const getThreatIntelligenceIndicator: typeof import("./getThreatIntelligenceIndicator").getThreatIntelligenceIndicator = null as any;
export const getThreatIntelligenceIndicatorOutput: typeof import("./getThreatIntelligenceIndicator").getThreatIntelligenceIndicatorOutput = null as any;
utilities.lazyLoad(exports, ["getThreatIntelligenceIndicator","getThreatIntelligenceIndicatorOutput"], () => require("./getThreatIntelligenceIndicator"));

export { GetUebaArgs, GetUebaResult, GetUebaOutputArgs } from "./getUeba";
export const getUeba: typeof import("./getUeba").getUeba = null as any;
export const getUebaOutput: typeof import("./getUeba").getUebaOutput = null as any;
utilities.lazyLoad(exports, ["getUeba","getUebaOutput"], () => require("./getUeba"));

export { GetWatchlistArgs, GetWatchlistResult, GetWatchlistOutputArgs } from "./getWatchlist";
export const getWatchlist: typeof import("./getWatchlist").getWatchlist = null as any;
export const getWatchlistOutput: typeof import("./getWatchlist").getWatchlistOutput = null as any;
utilities.lazyLoad(exports, ["getWatchlist","getWatchlistOutput"], () => require("./getWatchlist"));

export { GetWatchlistItemArgs, GetWatchlistItemResult, GetWatchlistItemOutputArgs } from "./getWatchlistItem";
export const getWatchlistItem: typeof import("./getWatchlistItem").getWatchlistItem = null as any;
export const getWatchlistItemOutput: typeof import("./getWatchlistItem").getWatchlistItemOutput = null as any;
utilities.lazyLoad(exports, ["getWatchlistItem","getWatchlistItemOutput"], () => require("./getWatchlistItem"));

export { GetWorkspaceManagerAssignmentArgs, GetWorkspaceManagerAssignmentResult, GetWorkspaceManagerAssignmentOutputArgs } from "./getWorkspaceManagerAssignment";
export const getWorkspaceManagerAssignment: typeof import("./getWorkspaceManagerAssignment").getWorkspaceManagerAssignment = null as any;
export const getWorkspaceManagerAssignmentOutput: typeof import("./getWorkspaceManagerAssignment").getWorkspaceManagerAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceManagerAssignment","getWorkspaceManagerAssignmentOutput"], () => require("./getWorkspaceManagerAssignment"));

export { GetWorkspaceManagerConfigurationArgs, GetWorkspaceManagerConfigurationResult, GetWorkspaceManagerConfigurationOutputArgs } from "./getWorkspaceManagerConfiguration";
export const getWorkspaceManagerConfiguration: typeof import("./getWorkspaceManagerConfiguration").getWorkspaceManagerConfiguration = null as any;
export const getWorkspaceManagerConfigurationOutput: typeof import("./getWorkspaceManagerConfiguration").getWorkspaceManagerConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceManagerConfiguration","getWorkspaceManagerConfigurationOutput"], () => require("./getWorkspaceManagerConfiguration"));

export { GetWorkspaceManagerGroupArgs, GetWorkspaceManagerGroupResult, GetWorkspaceManagerGroupOutputArgs } from "./getWorkspaceManagerGroup";
export const getWorkspaceManagerGroup: typeof import("./getWorkspaceManagerGroup").getWorkspaceManagerGroup = null as any;
export const getWorkspaceManagerGroupOutput: typeof import("./getWorkspaceManagerGroup").getWorkspaceManagerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceManagerGroup","getWorkspaceManagerGroupOutput"], () => require("./getWorkspaceManagerGroup"));

export { GetWorkspaceManagerMemberArgs, GetWorkspaceManagerMemberResult, GetWorkspaceManagerMemberOutputArgs } from "./getWorkspaceManagerMember";
export const getWorkspaceManagerMember: typeof import("./getWorkspaceManagerMember").getWorkspaceManagerMember = null as any;
export const getWorkspaceManagerMemberOutput: typeof import("./getWorkspaceManagerMember").getWorkspaceManagerMemberOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceManagerMember","getWorkspaceManagerMemberOutput"], () => require("./getWorkspaceManagerMember"));

export { HuntArgs } from "./hunt";
export type Hunt = import("./hunt").Hunt;
export const Hunt: typeof import("./hunt").Hunt = null as any;
utilities.lazyLoad(exports, ["Hunt"], () => require("./hunt"));

export { HuntCommentArgs } from "./huntComment";
export type HuntComment = import("./huntComment").HuntComment;
export const HuntComment: typeof import("./huntComment").HuntComment = null as any;
utilities.lazyLoad(exports, ["HuntComment"], () => require("./huntComment"));

export { HuntRelationArgs } from "./huntRelation";
export type HuntRelation = import("./huntRelation").HuntRelation;
export const HuntRelation: typeof import("./huntRelation").HuntRelation = null as any;
utilities.lazyLoad(exports, ["HuntRelation"], () => require("./huntRelation"));

export { IncidentArgs } from "./incident";
export type Incident = import("./incident").Incident;
export const Incident: typeof import("./incident").Incident = null as any;
utilities.lazyLoad(exports, ["Incident"], () => require("./incident"));

export { IncidentCommentArgs } from "./incidentComment";
export type IncidentComment = import("./incidentComment").IncidentComment;
export const IncidentComment: typeof import("./incidentComment").IncidentComment = null as any;
utilities.lazyLoad(exports, ["IncidentComment"], () => require("./incidentComment"));

export { IncidentRelationArgs } from "./incidentRelation";
export type IncidentRelation = import("./incidentRelation").IncidentRelation;
export const IncidentRelation: typeof import("./incidentRelation").IncidentRelation = null as any;
utilities.lazyLoad(exports, ["IncidentRelation"], () => require("./incidentRelation"));

export { IncidentTaskArgs } from "./incidentTask";
export type IncidentTask = import("./incidentTask").IncidentTask;
export const IncidentTask: typeof import("./incidentTask").IncidentTask = null as any;
utilities.lazyLoad(exports, ["IncidentTask"], () => require("./incidentTask"));

export { ListGeodataByIpArgs, ListGeodataByIpResult, ListGeodataByIpOutputArgs } from "./listGeodataByIp";
export const listGeodataByIp: typeof import("./listGeodataByIp").listGeodataByIp = null as any;
export const listGeodataByIpOutput: typeof import("./listGeodataByIp").listGeodataByIpOutput = null as any;
utilities.lazyLoad(exports, ["listGeodataByIp","listGeodataByIpOutput"], () => require("./listGeodataByIp"));

export { ListSourceControlRepositoriesArgs, ListSourceControlRepositoriesResult, ListSourceControlRepositoriesOutputArgs } from "./listSourceControlRepositories";
export const listSourceControlRepositories: typeof import("./listSourceControlRepositories").listSourceControlRepositories = null as any;
export const listSourceControlRepositoriesOutput: typeof import("./listSourceControlRepositories").listSourceControlRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["listSourceControlRepositories","listSourceControlRepositoriesOutput"], () => require("./listSourceControlRepositories"));

export { ListSystemActionsArgs, ListSystemActionsResult, ListSystemActionsOutputArgs } from "./listSystemActions";
export const listSystemActions: typeof import("./listSystemActions").listSystemActions = null as any;
export const listSystemActionsOutput: typeof import("./listSystemActions").listSystemActionsOutput = null as any;
utilities.lazyLoad(exports, ["listSystemActions","listSystemActionsOutput"], () => require("./listSystemActions"));

export { ListWhoisByDomainArgs, ListWhoisByDomainResult, ListWhoisByDomainOutputArgs } from "./listWhoisByDomain";
export const listWhoisByDomain: typeof import("./listWhoisByDomain").listWhoisByDomain = null as any;
export const listWhoisByDomainOutput: typeof import("./listWhoisByDomain").listWhoisByDomainOutput = null as any;
utilities.lazyLoad(exports, ["listWhoisByDomain","listWhoisByDomainOutput"], () => require("./listWhoisByDomain"));

export { MCASDataConnectorArgs } from "./mcasdataConnector";
export type MCASDataConnector = import("./mcasdataConnector").MCASDataConnector;
export const MCASDataConnector: typeof import("./mcasdataConnector").MCASDataConnector = null as any;
utilities.lazyLoad(exports, ["MCASDataConnector"], () => require("./mcasdataConnector"));

export { MDATPDataConnectorArgs } from "./mdatpdataConnector";
export type MDATPDataConnector = import("./mdatpdataConnector").MDATPDataConnector;
export const MDATPDataConnector: typeof import("./mdatpdataConnector").MDATPDataConnector = null as any;
utilities.lazyLoad(exports, ["MDATPDataConnector"], () => require("./mdatpdataConnector"));

export { MetadataArgs } from "./metadata";
export type Metadata = import("./metadata").Metadata;
export const Metadata: typeof import("./metadata").Metadata = null as any;
utilities.lazyLoad(exports, ["Metadata"], () => require("./metadata"));

export { MicrosoftSecurityIncidentCreationAlertRuleArgs } from "./microsoftSecurityIncidentCreationAlertRule";
export type MicrosoftSecurityIncidentCreationAlertRule = import("./microsoftSecurityIncidentCreationAlertRule").MicrosoftSecurityIncidentCreationAlertRule;
export const MicrosoftSecurityIncidentCreationAlertRule: typeof import("./microsoftSecurityIncidentCreationAlertRule").MicrosoftSecurityIncidentCreationAlertRule = null as any;
utilities.lazyLoad(exports, ["MicrosoftSecurityIncidentCreationAlertRule"], () => require("./microsoftSecurityIncidentCreationAlertRule"));

export { OfficeDataConnectorArgs } from "./officeDataConnector";
export type OfficeDataConnector = import("./officeDataConnector").OfficeDataConnector;
export const OfficeDataConnector: typeof import("./officeDataConnector").OfficeDataConnector = null as any;
utilities.lazyLoad(exports, ["OfficeDataConnector"], () => require("./officeDataConnector"));

export { ScheduledAlertRuleArgs } from "./scheduledAlertRule";
export type ScheduledAlertRule = import("./scheduledAlertRule").ScheduledAlertRule;
export const ScheduledAlertRule: typeof import("./scheduledAlertRule").ScheduledAlertRule = null as any;
utilities.lazyLoad(exports, ["ScheduledAlertRule"], () => require("./scheduledAlertRule"));

export { SentinelOnboardingStateArgs } from "./sentinelOnboardingState";
export type SentinelOnboardingState = import("./sentinelOnboardingState").SentinelOnboardingState;
export const SentinelOnboardingState: typeof import("./sentinelOnboardingState").SentinelOnboardingState = null as any;
utilities.lazyLoad(exports, ["SentinelOnboardingState"], () => require("./sentinelOnboardingState"));

export { SourceControlArgs } from "./sourceControl";
export type SourceControl = import("./sourceControl").SourceControl;
export const SourceControl: typeof import("./sourceControl").SourceControl = null as any;
utilities.lazyLoad(exports, ["SourceControl"], () => require("./sourceControl"));

export { SystemArgs } from "./system";
export type System = import("./system").System;
export const System: typeof import("./system").System = null as any;
utilities.lazyLoad(exports, ["System"], () => require("./system"));

export { ThreatIntelligenceIndicatorArgs } from "./threatIntelligenceIndicator";
export type ThreatIntelligenceIndicator = import("./threatIntelligenceIndicator").ThreatIntelligenceIndicator;
export const ThreatIntelligenceIndicator: typeof import("./threatIntelligenceIndicator").ThreatIntelligenceIndicator = null as any;
utilities.lazyLoad(exports, ["ThreatIntelligenceIndicator"], () => require("./threatIntelligenceIndicator"));

export { TIDataConnectorArgs } from "./tidataConnector";
export type TIDataConnector = import("./tidataConnector").TIDataConnector;
export const TIDataConnector: typeof import("./tidataConnector").TIDataConnector = null as any;
utilities.lazyLoad(exports, ["TIDataConnector"], () => require("./tidataConnector"));

export { UebaArgs } from "./ueba";
export type Ueba = import("./ueba").Ueba;
export const Ueba: typeof import("./ueba").Ueba = null as any;
utilities.lazyLoad(exports, ["Ueba"], () => require("./ueba"));

export { WatchlistArgs } from "./watchlist";
export type Watchlist = import("./watchlist").Watchlist;
export const Watchlist: typeof import("./watchlist").Watchlist = null as any;
utilities.lazyLoad(exports, ["Watchlist"], () => require("./watchlist"));

export { WatchlistItemArgs } from "./watchlistItem";
export type WatchlistItem = import("./watchlistItem").WatchlistItem;
export const WatchlistItem: typeof import("./watchlistItem").WatchlistItem = null as any;
utilities.lazyLoad(exports, ["WatchlistItem"], () => require("./watchlistItem"));

export { WorkspaceManagerAssignmentArgs } from "./workspaceManagerAssignment";
export type WorkspaceManagerAssignment = import("./workspaceManagerAssignment").WorkspaceManagerAssignment;
export const WorkspaceManagerAssignment: typeof import("./workspaceManagerAssignment").WorkspaceManagerAssignment = null as any;
utilities.lazyLoad(exports, ["WorkspaceManagerAssignment"], () => require("./workspaceManagerAssignment"));

export { WorkspaceManagerConfigurationArgs } from "./workspaceManagerConfiguration";
export type WorkspaceManagerConfiguration = import("./workspaceManagerConfiguration").WorkspaceManagerConfiguration;
export const WorkspaceManagerConfiguration: typeof import("./workspaceManagerConfiguration").WorkspaceManagerConfiguration = null as any;
utilities.lazyLoad(exports, ["WorkspaceManagerConfiguration"], () => require("./workspaceManagerConfiguration"));

export { WorkspaceManagerGroupArgs } from "./workspaceManagerGroup";
export type WorkspaceManagerGroup = import("./workspaceManagerGroup").WorkspaceManagerGroup;
export const WorkspaceManagerGroup: typeof import("./workspaceManagerGroup").WorkspaceManagerGroup = null as any;
utilities.lazyLoad(exports, ["WorkspaceManagerGroup"], () => require("./workspaceManagerGroup"));

export { WorkspaceManagerMemberArgs } from "./workspaceManagerMember";
export type WorkspaceManagerMember = import("./workspaceManagerMember").WorkspaceManagerMember;
export const WorkspaceManagerMember: typeof import("./workspaceManagerMember").WorkspaceManagerMember = null as any;
utilities.lazyLoad(exports, ["WorkspaceManagerMember"], () => require("./workspaceManagerMember"));


// Export enums:
export * from "../types/enums/securityinsights";

// Export sub-modules:
import * as v20190101preview from "./v20190101preview";
import * as v20210301preview from "./v20210301preview";
import * as v20210401 from "./v20210401";
import * as v20210901preview from "./v20210901preview";
import * as v20211001preview from "./v20211001preview";
import * as v20220101preview from "./v20220101preview";
import * as v20220401preview from "./v20220401preview";
import * as v20220501preview from "./v20220501preview";
import * as v20220601preview from "./v20220601preview";
import * as v20220701preview from "./v20220701preview";
import * as v20220801preview from "./v20220801preview";
import * as v20220901preview from "./v20220901preview";
import * as v20221001preview from "./v20221001preview";
import * as v20221101preview from "./v20221101preview";
import * as v20221201preview from "./v20221201preview";
import * as v20230201 from "./v20230201";
import * as v20230201preview from "./v20230201preview";
import * as v20230301preview from "./v20230301preview";
import * as v20230401preview from "./v20230401preview";
import * as v20230501preview from "./v20230501preview";
import * as v20230601preview from "./v20230601preview";
import * as v20230701preview from "./v20230701preview";
import * as v20230801preview from "./v20230801preview";
import * as v20230901preview from "./v20230901preview";
import * as v20231001preview from "./v20231001preview";
import * as v20231101 from "./v20231101";
import * as v20231201preview from "./v20231201preview";
import * as v20240101preview from "./v20240101preview";
import * as v20240301 from "./v20240301";
import * as v20240401preview from "./v20240401preview";

export {
    v20190101preview,
    v20210301preview,
    v20210401,
    v20210901preview,
    v20211001preview,
    v20220101preview,
    v20220401preview,
    v20220501preview,
    v20220601preview,
    v20220701preview,
    v20220801preview,
    v20220901preview,
    v20221001preview,
    v20221101preview,
    v20221201preview,
    v20230201,
    v20230201preview,
    v20230301preview,
    v20230401preview,
    v20230501preview,
    v20230601preview,
    v20230701preview,
    v20230801preview,
    v20230901preview,
    v20231001preview,
    v20231101,
    v20231201preview,
    v20240101preview,
    v20240301,
    v20240401preview,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:securityinsights:AADDataConnector":
                return new AADDataConnector(name, <any>undefined, { urn })
            case "azure-native:securityinsights:AATPDataConnector":
                return new AATPDataConnector(name, <any>undefined, { urn })
            case "azure-native:securityinsights:ASCDataConnector":
                return new ASCDataConnector(name, <any>undefined, { urn })
            case "azure-native:securityinsights:Action":
                return new Action(name, <any>undefined, { urn })
            case "azure-native:securityinsights:ActivityCustomEntityQuery":
                return new ActivityCustomEntityQuery(name, <any>undefined, { urn })
            case "azure-native:securityinsights:Anomalies":
                return new Anomalies(name, <any>undefined, { urn })
            case "azure-native:securityinsights:AnomalySecurityMLAnalyticsSettings":
                return new AnomalySecurityMLAnalyticsSettings(name, <any>undefined, { urn })
            case "azure-native:securityinsights:AutomationRule":
                return new AutomationRule(name, <any>undefined, { urn })
            case "azure-native:securityinsights:AwsCloudTrailDataConnector":
                return new AwsCloudTrailDataConnector(name, <any>undefined, { urn })
            case "azure-native:securityinsights:Bookmark":
                return new Bookmark(name, <any>undefined, { urn })
            case "azure-native:securityinsights:BookmarkRelation":
                return new BookmarkRelation(name, <any>undefined, { urn })
            case "azure-native:securityinsights:BusinessApplicationAgent":
                return new BusinessApplicationAgent(name, <any>undefined, { urn })
            case "azure-native:securityinsights:ContentPackage":
                return new ContentPackage(name, <any>undefined, { urn })
            case "azure-native:securityinsights:ContentTemplate":
                return new ContentTemplate(name, <any>undefined, { urn })
            case "azure-native:securityinsights:CustomizableConnectorDefinition":
                return new CustomizableConnectorDefinition(name, <any>undefined, { urn })
            case "azure-native:securityinsights:EntityAnalytics":
                return new EntityAnalytics(name, <any>undefined, { urn })
            case "azure-native:securityinsights:EyesOn":
                return new EyesOn(name, <any>undefined, { urn })
            case "azure-native:securityinsights:FileImport":
                return new FileImport(name, <any>undefined, { urn })
            case "azure-native:securityinsights:FusionAlertRule":
                return new FusionAlertRule(name, <any>undefined, { urn })
            case "azure-native:securityinsights:Hunt":
                return new Hunt(name, <any>undefined, { urn })
            case "azure-native:securityinsights:HuntComment":
                return new HuntComment(name, <any>undefined, { urn })
            case "azure-native:securityinsights:HuntRelation":
                return new HuntRelation(name, <any>undefined, { urn })
            case "azure-native:securityinsights:Incident":
                return new Incident(name, <any>undefined, { urn })
            case "azure-native:securityinsights:IncidentComment":
                return new IncidentComment(name, <any>undefined, { urn })
            case "azure-native:securityinsights:IncidentRelation":
                return new IncidentRelation(name, <any>undefined, { urn })
            case "azure-native:securityinsights:IncidentTask":
                return new IncidentTask(name, <any>undefined, { urn })
            case "azure-native:securityinsights:MCASDataConnector":
                return new MCASDataConnector(name, <any>undefined, { urn })
            case "azure-native:securityinsights:MDATPDataConnector":
                return new MDATPDataConnector(name, <any>undefined, { urn })
            case "azure-native:securityinsights:Metadata":
                return new Metadata(name, <any>undefined, { urn })
            case "azure-native:securityinsights:MicrosoftSecurityIncidentCreationAlertRule":
                return new MicrosoftSecurityIncidentCreationAlertRule(name, <any>undefined, { urn })
            case "azure-native:securityinsights:OfficeDataConnector":
                return new OfficeDataConnector(name, <any>undefined, { urn })
            case "azure-native:securityinsights:ScheduledAlertRule":
                return new ScheduledAlertRule(name, <any>undefined, { urn })
            case "azure-native:securityinsights:SentinelOnboardingState":
                return new SentinelOnboardingState(name, <any>undefined, { urn })
            case "azure-native:securityinsights:SourceControl":
                return new SourceControl(name, <any>undefined, { urn })
            case "azure-native:securityinsights:System":
                return new System(name, <any>undefined, { urn })
            case "azure-native:securityinsights:TIDataConnector":
                return new TIDataConnector(name, <any>undefined, { urn })
            case "azure-native:securityinsights:ThreatIntelligenceIndicator":
                return new ThreatIntelligenceIndicator(name, <any>undefined, { urn })
            case "azure-native:securityinsights:Ueba":
                return new Ueba(name, <any>undefined, { urn })
            case "azure-native:securityinsights:Watchlist":
                return new Watchlist(name, <any>undefined, { urn })
            case "azure-native:securityinsights:WatchlistItem":
                return new WatchlistItem(name, <any>undefined, { urn })
            case "azure-native:securityinsights:WorkspaceManagerAssignment":
                return new WorkspaceManagerAssignment(name, <any>undefined, { urn })
            case "azure-native:securityinsights:WorkspaceManagerConfiguration":
                return new WorkspaceManagerConfiguration(name, <any>undefined, { urn })
            case "azure-native:securityinsights:WorkspaceManagerGroup":
                return new WorkspaceManagerGroup(name, <any>undefined, { urn })
            case "azure-native:securityinsights:WorkspaceManagerMember":
                return new WorkspaceManagerMember(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "securityinsights", _module)
