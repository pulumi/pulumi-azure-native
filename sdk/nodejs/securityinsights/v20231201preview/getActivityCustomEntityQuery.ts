// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets an entity query.
 */
export function getActivityCustomEntityQuery(args: GetActivityCustomEntityQueryArgs, opts?: pulumi.InvokeOptions): Promise<GetActivityCustomEntityQueryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:securityinsights/v20231201preview:getActivityCustomEntityQuery", {
        "entityQueryId": args.entityQueryId,
        "resourceGroupName": args.resourceGroupName,
        "workspaceName": args.workspaceName,
    }, opts);
}

export interface GetActivityCustomEntityQueryArgs {
    /**
     * entity query ID
     */
    entityQueryId: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
    /**
     * The name of the workspace.
     */
    workspaceName: string;
}

/**
 * Represents Activity entity query.
 */
export interface GetActivityCustomEntityQueryResult {
    /**
     * The entity query content to display in timeline
     */
    readonly content?: string;
    /**
     * The time the activity was created
     */
    readonly createdTimeUtc: string;
    /**
     * The entity query description
     */
    readonly description?: string;
    /**
     * Determines whether this activity is enabled or disabled.
     */
    readonly enabled?: boolean;
    /**
     * The query applied only to entities matching to all filters
     */
    readonly entitiesFilter?: {[key: string]: string[]};
    /**
     * Etag of the azure resource
     */
    readonly etag?: string;
    /**
     * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
     */
    readonly id: string;
    /**
     * The type of the query's source entity
     */
    readonly inputEntityType?: string;
    /**
     * The kind of the entity query
     * Expected value is 'Activity'.
     */
    readonly kind: "Activity";
    /**
     * The last time the activity was updated
     */
    readonly lastModifiedTimeUtc: string;
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * The Activity query definitions
     */
    readonly queryDefinitions?: outputs.securityinsights.v20231201preview.ActivityEntityQueriesPropertiesResponseQueryDefinitions;
    /**
     * List of the fields of the source entity that are required to run the query
     */
    readonly requiredInputFieldsSets?: string[][];
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    readonly systemData: outputs.securityinsights.v20231201preview.SystemDataResponse;
    /**
     * The template id this activity was created from
     */
    readonly templateName?: string;
    /**
     * The entity query title
     */
    readonly title?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
/**
 * Gets an entity query.
 */
export function getActivityCustomEntityQueryOutput(args: GetActivityCustomEntityQueryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetActivityCustomEntityQueryResult> {
    return pulumi.output(args).apply((a: any) => getActivityCustomEntityQuery(a, opts))
}

export interface GetActivityCustomEntityQueryOutputArgs {
    /**
     * entity query ID
     */
    entityQueryId: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the workspace.
     */
    workspaceName: pulumi.Input<string>;
}
