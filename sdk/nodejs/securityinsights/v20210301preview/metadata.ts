// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Metadata resource definition.
 */
export class Metadata extends pulumi.CustomResource {
    /**
     * Get an existing Metadata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Metadata {
        return new Metadata(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:securityinsights/v20210301preview:Metadata';

    /**
     * Returns true if the given object is an instance of Metadata.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Metadata {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metadata.__pulumiType;
    }

    /**
     * The creator of the content item.
     */
    public readonly author!: pulumi.Output<outputs.securityinsights.v20210301preview.MetadataAuthorResponse | undefined>;
    /**
     * Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
     */
    public readonly contentId!: pulumi.Output<string>;
    /**
     * Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
     */
    public readonly dependencies!: pulumi.Output<outputs.securityinsights.v20210301preview.MetadataDependenciesResponse | undefined>;
    /**
     * Etag of the azure resource
     */
    public readonly etag!: pulumi.Output<string | undefined>;
    /**
     * The kind of content the metadata is for.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Azure resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
     */
    public readonly parentId!: pulumi.Output<string>;
    /**
     * Source of the content.  This is where/how it was created.
     */
    public readonly source!: pulumi.Output<outputs.securityinsights.v20210301preview.MetadataSourceResponse | undefined>;
    /**
     * Support information for the metadata - type, name, contact information
     */
    public readonly support!: pulumi.Output<outputs.securityinsights.v20210301preview.MetadataSupportResponse | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.securityinsights.v20210301preview.SystemDataResponse>;
    /**
     * Azure resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
     */
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a Metadata resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.contentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentId'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.operationalInsightsResourceProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operationalInsightsResourceProvider'");
            }
            if ((!args || args.parentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.workspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            inputs["author"] = args ? args.author : undefined;
            inputs["contentId"] = args ? args.contentId : undefined;
            inputs["dependencies"] = args ? args.dependencies : undefined;
            inputs["etag"] = args ? args.etag : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["metadataName"] = args ? args.metadataName : undefined;
            inputs["operationalInsightsResourceProvider"] = args ? args.operationalInsightsResourceProvider : undefined;
            inputs["parentId"] = args ? args.parentId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["support"] = args ? args.support : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["workspaceName"] = args ? args.workspaceName : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["author"] = undefined /*out*/;
            inputs["contentId"] = undefined /*out*/;
            inputs["dependencies"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["parentId"] = undefined /*out*/;
            inputs["source"] = undefined /*out*/;
            inputs["support"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:securityinsights/v20210301preview:Metadata" }, { type: "azure-native:securityinsights:Metadata" }, { type: "azure-nextgen:securityinsights:Metadata" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Metadata.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Metadata resource.
 */
export interface MetadataArgs {
    /**
     * The creator of the content item.
     */
    author?: pulumi.Input<inputs.securityinsights.v20210301preview.MetadataAuthorArgs>;
    /**
     * Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
     */
    contentId: pulumi.Input<string>;
    /**
     * Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
     */
    dependencies?: pulumi.Input<inputs.securityinsights.v20210301preview.MetadataDependenciesArgs>;
    /**
     * Etag of the azure resource
     */
    etag?: pulumi.Input<string>;
    /**
     * The kind of content the metadata is for.
     */
    kind: pulumi.Input<string | enums.securityinsights.v20210301preview.Kind>;
    /**
     * The Metadata name.
     */
    metadataName?: pulumi.Input<string>;
    /**
     * The namespace of workspaces resource provider- Microsoft.OperationalInsights.
     */
    operationalInsightsResourceProvider: pulumi.Input<string>;
    /**
     * Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
     */
    parentId: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Source of the content.  This is where/how it was created.
     */
    source?: pulumi.Input<inputs.securityinsights.v20210301preview.MetadataSourceArgs>;
    /**
     * Support information for the metadata - type, name, contact information
     */
    support?: pulumi.Input<inputs.securityinsights.v20210301preview.MetadataSupportArgs>;
    /**
     * Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
     */
    version?: pulumi.Input<string>;
    /**
     * The name of the workspace.
     */
    workspaceName: pulumi.Input<string>;
}
