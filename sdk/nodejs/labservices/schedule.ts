// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Schedule for automatically turning virtual machines in a lab on and off at specified times.
 * API Version: 2021-10-01-preview.
 */
export class Schedule extends pulumi.CustomResource {
    /**
     * Get an existing Schedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Schedule {
        return new Schedule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:labservices:Schedule';

    /**
     * Returns true if the given object is an instance of Schedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schedule.__pulumiType;
    }

    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Notes for this schedule.
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * Current provisioning state of the schedule.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The recurrence pattern of the scheduled actions.
     */
    public readonly recurrencePattern!: pulumi.Output<outputs.labservices.RecurrencePatternResponse | undefined>;
    /**
     * When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead.
     */
    public readonly startAt!: pulumi.Output<string | undefined>;
    /**
     * When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead.
     */
    public readonly stopAt!: pulumi.Output<string>;
    /**
     * Metadata pertaining to creation and last modification of the schedule.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.labservices.SystemDataResponse>;
    /**
     * The IANA timezone id for the schedule.
     */
    public readonly timeZoneId!: pulumi.Output<string>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Schedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.labName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.stopAt === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stopAt'");
            }
            if ((!args || args.timeZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZoneId'");
            }
            inputs["labName"] = args ? args.labName : undefined;
            inputs["notes"] = args ? args.notes : undefined;
            inputs["recurrencePattern"] = args ? args.recurrencePattern : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scheduleName"] = args ? args.scheduleName : undefined;
            inputs["startAt"] = args ? args.startAt : undefined;
            inputs["stopAt"] = args ? args.stopAt : undefined;
            inputs["timeZoneId"] = args ? args.timeZoneId : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["name"] = undefined /*out*/;
            inputs["notes"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["recurrencePattern"] = undefined /*out*/;
            inputs["startAt"] = undefined /*out*/;
            inputs["stopAt"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["timeZoneId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-native:labservices/v20211001preview:Schedule" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Schedule.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Schedule resource.
 */
export interface ScheduleArgs {
    /**
     * The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
     */
    labName: pulumi.Input<string>;
    /**
     * Notes for this schedule.
     */
    notes?: pulumi.Input<string>;
    /**
     * The recurrence pattern of the scheduled actions.
     */
    recurrencePattern?: pulumi.Input<inputs.labservices.RecurrencePatternArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the schedule that uniquely identifies it within containing lab. Used in resource URIs.
     */
    scheduleName?: pulumi.Input<string>;
    /**
     * When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead.
     */
    startAt?: pulumi.Input<string>;
    /**
     * When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead.
     */
    stopAt: pulumi.Input<string>;
    /**
     * The IANA timezone id for the schedule.
     */
    timeZoneId: pulumi.Input<string>;
}
