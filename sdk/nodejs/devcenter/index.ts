// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AttachedNetworkByDevCenterArgs } from "./attachedNetworkByDevCenter";
export type AttachedNetworkByDevCenter = import("./attachedNetworkByDevCenter").AttachedNetworkByDevCenter;
export const AttachedNetworkByDevCenter: typeof import("./attachedNetworkByDevCenter").AttachedNetworkByDevCenter = null as any;
utilities.lazyLoad(exports, ["AttachedNetworkByDevCenter"], () => require("./attachedNetworkByDevCenter"));

export { CatalogArgs } from "./catalog";
export type Catalog = import("./catalog").Catalog;
export const Catalog: typeof import("./catalog").Catalog = null as any;
utilities.lazyLoad(exports, ["Catalog"], () => require("./catalog"));

export { CurationProfileArgs } from "./curationProfile";
export type CurationProfile = import("./curationProfile").CurationProfile;
export const CurationProfile: typeof import("./curationProfile").CurationProfile = null as any;
utilities.lazyLoad(exports, ["CurationProfile"], () => require("./curationProfile"));

export { DevBoxDefinitionArgs } from "./devBoxDefinition";
export type DevBoxDefinition = import("./devBoxDefinition").DevBoxDefinition;
export const DevBoxDefinition: typeof import("./devBoxDefinition").DevBoxDefinition = null as any;
utilities.lazyLoad(exports, ["DevBoxDefinition"], () => require("./devBoxDefinition"));

export { DevCenterArgs } from "./devCenter";
export type DevCenter = import("./devCenter").DevCenter;
export const DevCenter: typeof import("./devCenter").DevCenter = null as any;
utilities.lazyLoad(exports, ["DevCenter"], () => require("./devCenter"));

export { EncryptionSetArgs } from "./encryptionSet";
export type EncryptionSet = import("./encryptionSet").EncryptionSet;
export const EncryptionSet: typeof import("./encryptionSet").EncryptionSet = null as any;
utilities.lazyLoad(exports, ["EncryptionSet"], () => require("./encryptionSet"));

export { EnvironmentTypeArgs } from "./environmentType";
export type EnvironmentType = import("./environmentType").EnvironmentType;
export const EnvironmentType: typeof import("./environmentType").EnvironmentType = null as any;
utilities.lazyLoad(exports, ["EnvironmentType"], () => require("./environmentType"));

export { GalleryArgs } from "./gallery";
export type Gallery = import("./gallery").Gallery;
export const Gallery: typeof import("./gallery").Gallery = null as any;
utilities.lazyLoad(exports, ["Gallery"], () => require("./gallery"));

export { GetAttachedNetworkByDevCenterArgs, GetAttachedNetworkByDevCenterResult, GetAttachedNetworkByDevCenterOutputArgs } from "./getAttachedNetworkByDevCenter";
export const getAttachedNetworkByDevCenter: typeof import("./getAttachedNetworkByDevCenter").getAttachedNetworkByDevCenter = null as any;
export const getAttachedNetworkByDevCenterOutput: typeof import("./getAttachedNetworkByDevCenter").getAttachedNetworkByDevCenterOutput = null as any;
utilities.lazyLoad(exports, ["getAttachedNetworkByDevCenter","getAttachedNetworkByDevCenterOutput"], () => require("./getAttachedNetworkByDevCenter"));

export { GetCatalogArgs, GetCatalogResult, GetCatalogOutputArgs } from "./getCatalog";
export const getCatalog: typeof import("./getCatalog").getCatalog = null as any;
export const getCatalogOutput: typeof import("./getCatalog").getCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getCatalog","getCatalogOutput"], () => require("./getCatalog"));

export { GetCatalogDevBoxDefinitionErrorDetailsArgs, GetCatalogDevBoxDefinitionErrorDetailsResult, GetCatalogDevBoxDefinitionErrorDetailsOutputArgs } from "./getCatalogDevBoxDefinitionErrorDetails";
export const getCatalogDevBoxDefinitionErrorDetails: typeof import("./getCatalogDevBoxDefinitionErrorDetails").getCatalogDevBoxDefinitionErrorDetails = null as any;
export const getCatalogDevBoxDefinitionErrorDetailsOutput: typeof import("./getCatalogDevBoxDefinitionErrorDetails").getCatalogDevBoxDefinitionErrorDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogDevBoxDefinitionErrorDetails","getCatalogDevBoxDefinitionErrorDetailsOutput"], () => require("./getCatalogDevBoxDefinitionErrorDetails"));

export { GetCatalogSyncErrorDetailsArgs, GetCatalogSyncErrorDetailsResult, GetCatalogSyncErrorDetailsOutputArgs } from "./getCatalogSyncErrorDetails";
export const getCatalogSyncErrorDetails: typeof import("./getCatalogSyncErrorDetails").getCatalogSyncErrorDetails = null as any;
export const getCatalogSyncErrorDetailsOutput: typeof import("./getCatalogSyncErrorDetails").getCatalogSyncErrorDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogSyncErrorDetails","getCatalogSyncErrorDetailsOutput"], () => require("./getCatalogSyncErrorDetails"));

export { GetCurationProfileArgs, GetCurationProfileResult, GetCurationProfileOutputArgs } from "./getCurationProfile";
export const getCurationProfile: typeof import("./getCurationProfile").getCurationProfile = null as any;
export const getCurationProfileOutput: typeof import("./getCurationProfile").getCurationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCurationProfile","getCurationProfileOutput"], () => require("./getCurationProfile"));

export { GetCustomizationTaskErrorDetailsArgs, GetCustomizationTaskErrorDetailsResult, GetCustomizationTaskErrorDetailsOutputArgs } from "./getCustomizationTaskErrorDetails";
export const getCustomizationTaskErrorDetails: typeof import("./getCustomizationTaskErrorDetails").getCustomizationTaskErrorDetails = null as any;
export const getCustomizationTaskErrorDetailsOutput: typeof import("./getCustomizationTaskErrorDetails").getCustomizationTaskErrorDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getCustomizationTaskErrorDetails","getCustomizationTaskErrorDetailsOutput"], () => require("./getCustomizationTaskErrorDetails"));

export { GetDevBoxDefinitionArgs, GetDevBoxDefinitionResult, GetDevBoxDefinitionOutputArgs } from "./getDevBoxDefinition";
export const getDevBoxDefinition: typeof import("./getDevBoxDefinition").getDevBoxDefinition = null as any;
export const getDevBoxDefinitionOutput: typeof import("./getDevBoxDefinition").getDevBoxDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getDevBoxDefinition","getDevBoxDefinitionOutput"], () => require("./getDevBoxDefinition"));

export { GetDevCenterArgs, GetDevCenterResult, GetDevCenterOutputArgs } from "./getDevCenter";
export const getDevCenter: typeof import("./getDevCenter").getDevCenter = null as any;
export const getDevCenterOutput: typeof import("./getDevCenter").getDevCenterOutput = null as any;
utilities.lazyLoad(exports, ["getDevCenter","getDevCenterOutput"], () => require("./getDevCenter"));

export { GetEncryptionSetArgs, GetEncryptionSetResult, GetEncryptionSetOutputArgs } from "./getEncryptionSet";
export const getEncryptionSet: typeof import("./getEncryptionSet").getEncryptionSet = null as any;
export const getEncryptionSetOutput: typeof import("./getEncryptionSet").getEncryptionSetOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptionSet","getEncryptionSetOutput"], () => require("./getEncryptionSet"));

export { GetEnvironmentDefinitionErrorDetailsArgs, GetEnvironmentDefinitionErrorDetailsResult, GetEnvironmentDefinitionErrorDetailsOutputArgs } from "./getEnvironmentDefinitionErrorDetails";
export const getEnvironmentDefinitionErrorDetails: typeof import("./getEnvironmentDefinitionErrorDetails").getEnvironmentDefinitionErrorDetails = null as any;
export const getEnvironmentDefinitionErrorDetailsOutput: typeof import("./getEnvironmentDefinitionErrorDetails").getEnvironmentDefinitionErrorDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentDefinitionErrorDetails","getEnvironmentDefinitionErrorDetailsOutput"], () => require("./getEnvironmentDefinitionErrorDetails"));

export { GetEnvironmentTypeArgs, GetEnvironmentTypeResult, GetEnvironmentTypeOutputArgs } from "./getEnvironmentType";
export const getEnvironmentType: typeof import("./getEnvironmentType").getEnvironmentType = null as any;
export const getEnvironmentTypeOutput: typeof import("./getEnvironmentType").getEnvironmentTypeOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentType","getEnvironmentTypeOutput"], () => require("./getEnvironmentType"));

export { GetGalleryArgs, GetGalleryResult, GetGalleryOutputArgs } from "./getGallery";
export const getGallery: typeof import("./getGallery").getGallery = null as any;
export const getGalleryOutput: typeof import("./getGallery").getGalleryOutput = null as any;
utilities.lazyLoad(exports, ["getGallery","getGalleryOutput"], () => require("./getGallery"));

export { GetNetworkConnectionArgs, GetNetworkConnectionResult, GetNetworkConnectionOutputArgs } from "./getNetworkConnection";
export const getNetworkConnection: typeof import("./getNetworkConnection").getNetworkConnection = null as any;
export const getNetworkConnectionOutput: typeof import("./getNetworkConnection").getNetworkConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkConnection","getNetworkConnectionOutput"], () => require("./getNetworkConnection"));

export { GetPlanArgs, GetPlanResult, GetPlanOutputArgs } from "./getPlan";
export const getPlan: typeof import("./getPlan").getPlan = null as any;
export const getPlanOutput: typeof import("./getPlan").getPlanOutput = null as any;
utilities.lazyLoad(exports, ["getPlan","getPlanOutput"], () => require("./getPlan"));

export { GetPlanMemberArgs, GetPlanMemberResult, GetPlanMemberOutputArgs } from "./getPlanMember";
export const getPlanMember: typeof import("./getPlanMember").getPlanMember = null as any;
export const getPlanMemberOutput: typeof import("./getPlanMember").getPlanMemberOutput = null as any;
utilities.lazyLoad(exports, ["getPlanMember","getPlanMemberOutput"], () => require("./getPlanMember"));

export { GetPoolArgs, GetPoolResult, GetPoolOutputArgs } from "./getPool";
export const getPool: typeof import("./getPool").getPool = null as any;
export const getPoolOutput: typeof import("./getPool").getPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPool","getPoolOutput"], () => require("./getPool"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectCatalogArgs, GetProjectCatalogResult, GetProjectCatalogOutputArgs } from "./getProjectCatalog";
export const getProjectCatalog: typeof import("./getProjectCatalog").getProjectCatalog = null as any;
export const getProjectCatalogOutput: typeof import("./getProjectCatalog").getProjectCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getProjectCatalog","getProjectCatalogOutput"], () => require("./getProjectCatalog"));

export { GetProjectCatalogEnvironmentDefinitionErrorDetailsArgs, GetProjectCatalogEnvironmentDefinitionErrorDetailsResult, GetProjectCatalogEnvironmentDefinitionErrorDetailsOutputArgs } from "./getProjectCatalogEnvironmentDefinitionErrorDetails";
export const getProjectCatalogEnvironmentDefinitionErrorDetails: typeof import("./getProjectCatalogEnvironmentDefinitionErrorDetails").getProjectCatalogEnvironmentDefinitionErrorDetails = null as any;
export const getProjectCatalogEnvironmentDefinitionErrorDetailsOutput: typeof import("./getProjectCatalogEnvironmentDefinitionErrorDetails").getProjectCatalogEnvironmentDefinitionErrorDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectCatalogEnvironmentDefinitionErrorDetails","getProjectCatalogEnvironmentDefinitionErrorDetailsOutput"], () => require("./getProjectCatalogEnvironmentDefinitionErrorDetails"));

export { GetProjectCatalogImageDefinitionBuildDetailsArgs, GetProjectCatalogImageDefinitionBuildDetailsResult, GetProjectCatalogImageDefinitionBuildDetailsOutputArgs } from "./getProjectCatalogImageDefinitionBuildDetails";
export const getProjectCatalogImageDefinitionBuildDetails: typeof import("./getProjectCatalogImageDefinitionBuildDetails").getProjectCatalogImageDefinitionBuildDetails = null as any;
export const getProjectCatalogImageDefinitionBuildDetailsOutput: typeof import("./getProjectCatalogImageDefinitionBuildDetails").getProjectCatalogImageDefinitionBuildDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectCatalogImageDefinitionBuildDetails","getProjectCatalogImageDefinitionBuildDetailsOutput"], () => require("./getProjectCatalogImageDefinitionBuildDetails"));

export { GetProjectCatalogSyncErrorDetailsArgs, GetProjectCatalogSyncErrorDetailsResult, GetProjectCatalogSyncErrorDetailsOutputArgs } from "./getProjectCatalogSyncErrorDetails";
export const getProjectCatalogSyncErrorDetails: typeof import("./getProjectCatalogSyncErrorDetails").getProjectCatalogSyncErrorDetails = null as any;
export const getProjectCatalogSyncErrorDetailsOutput: typeof import("./getProjectCatalogSyncErrorDetails").getProjectCatalogSyncErrorDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectCatalogSyncErrorDetails","getProjectCatalogSyncErrorDetailsOutput"], () => require("./getProjectCatalogSyncErrorDetails"));

export { GetProjectEnvironmentTypeArgs, GetProjectEnvironmentTypeResult, GetProjectEnvironmentTypeOutputArgs } from "./getProjectEnvironmentType";
export const getProjectEnvironmentType: typeof import("./getProjectEnvironmentType").getProjectEnvironmentType = null as any;
export const getProjectEnvironmentTypeOutput: typeof import("./getProjectEnvironmentType").getProjectEnvironmentTypeOutput = null as any;
utilities.lazyLoad(exports, ["getProjectEnvironmentType","getProjectEnvironmentTypeOutput"], () => require("./getProjectEnvironmentType"));

export { GetProjectInheritedSettingsArgs, GetProjectInheritedSettingsResult, GetProjectInheritedSettingsOutputArgs } from "./getProjectInheritedSettings";
export const getProjectInheritedSettings: typeof import("./getProjectInheritedSettings").getProjectInheritedSettings = null as any;
export const getProjectInheritedSettingsOutput: typeof import("./getProjectInheritedSettings").getProjectInheritedSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectInheritedSettings","getProjectInheritedSettingsOutput"], () => require("./getProjectInheritedSettings"));

export { GetProjectPolicyArgs, GetProjectPolicyResult, GetProjectPolicyOutputArgs } from "./getProjectPolicy";
export const getProjectPolicy: typeof import("./getProjectPolicy").getProjectPolicy = null as any;
export const getProjectPolicyOutput: typeof import("./getProjectPolicy").getProjectPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getProjectPolicy","getProjectPolicyOutput"], () => require("./getProjectPolicy"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { ListSkusByProjectArgs, ListSkusByProjectResult, ListSkusByProjectOutputArgs } from "./listSkusByProject";
export const listSkusByProject: typeof import("./listSkusByProject").listSkusByProject = null as any;
export const listSkusByProjectOutput: typeof import("./listSkusByProject").listSkusByProjectOutput = null as any;
utilities.lazyLoad(exports, ["listSkusByProject","listSkusByProjectOutput"], () => require("./listSkusByProject"));

export { NetworkConnectionArgs } from "./networkConnection";
export type NetworkConnection = import("./networkConnection").NetworkConnection;
export const NetworkConnection: typeof import("./networkConnection").NetworkConnection = null as any;
utilities.lazyLoad(exports, ["NetworkConnection"], () => require("./networkConnection"));

export { PlanArgs } from "./plan";
export type Plan = import("./plan").Plan;
export const Plan: typeof import("./plan").Plan = null as any;
utilities.lazyLoad(exports, ["Plan"], () => require("./plan"));

export { PlanMemberArgs } from "./planMember";
export type PlanMember = import("./planMember").PlanMember;
export const PlanMember: typeof import("./planMember").PlanMember = null as any;
utilities.lazyLoad(exports, ["PlanMember"], () => require("./planMember"));

export { PoolArgs } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { ProjectArgs } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectCatalogArgs } from "./projectCatalog";
export type ProjectCatalog = import("./projectCatalog").ProjectCatalog;
export const ProjectCatalog: typeof import("./projectCatalog").ProjectCatalog = null as any;
utilities.lazyLoad(exports, ["ProjectCatalog"], () => require("./projectCatalog"));

export { ProjectEnvironmentTypeArgs } from "./projectEnvironmentType";
export type ProjectEnvironmentType = import("./projectEnvironmentType").ProjectEnvironmentType;
export const ProjectEnvironmentType: typeof import("./projectEnvironmentType").ProjectEnvironmentType = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironmentType"], () => require("./projectEnvironmentType"));

export { ProjectPolicyArgs } from "./projectPolicy";
export type ProjectPolicy = import("./projectPolicy").ProjectPolicy;
export const ProjectPolicy: typeof import("./projectPolicy").ProjectPolicy = null as any;
utilities.lazyLoad(exports, ["ProjectPolicy"], () => require("./projectPolicy"));

export { ScheduleArgs } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));


// Export enums:
export * from "../types/enums/devcenter";

// Export sub-modules:
import * as v20221111preview from "./v20221111preview";
import * as v20230401 from "./v20230401";
import * as v20230801preview from "./v20230801preview";
import * as v20231001preview from "./v20231001preview";
import * as v20240201 from "./v20240201";
import * as v20240501preview from "./v20240501preview";
import * as v20240601preview from "./v20240601preview";
import * as v20240701preview from "./v20240701preview";
import * as v20240801preview from "./v20240801preview";
import * as v20241001preview from "./v20241001preview";

export {
    v20221111preview,
    v20230401,
    v20230801preview,
    v20231001preview,
    v20240201,
    v20240501preview,
    v20240601preview,
    v20240701preview,
    v20240801preview,
    v20241001preview,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:devcenter:AttachedNetworkByDevCenter":
                return new AttachedNetworkByDevCenter(name, <any>undefined, { urn })
            case "azure-native:devcenter:Catalog":
                return new Catalog(name, <any>undefined, { urn })
            case "azure-native:devcenter:CurationProfile":
                return new CurationProfile(name, <any>undefined, { urn })
            case "azure-native:devcenter:DevBoxDefinition":
                return new DevBoxDefinition(name, <any>undefined, { urn })
            case "azure-native:devcenter:DevCenter":
                return new DevCenter(name, <any>undefined, { urn })
            case "azure-native:devcenter:EncryptionSet":
                return new EncryptionSet(name, <any>undefined, { urn })
            case "azure-native:devcenter:EnvironmentType":
                return new EnvironmentType(name, <any>undefined, { urn })
            case "azure-native:devcenter:Gallery":
                return new Gallery(name, <any>undefined, { urn })
            case "azure-native:devcenter:NetworkConnection":
                return new NetworkConnection(name, <any>undefined, { urn })
            case "azure-native:devcenter:Plan":
                return new Plan(name, <any>undefined, { urn })
            case "azure-native:devcenter:PlanMember":
                return new PlanMember(name, <any>undefined, { urn })
            case "azure-native:devcenter:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "azure-native:devcenter:Project":
                return new Project(name, <any>undefined, { urn })
            case "azure-native:devcenter:ProjectCatalog":
                return new ProjectCatalog(name, <any>undefined, { urn })
            case "azure-native:devcenter:ProjectEnvironmentType":
                return new ProjectEnvironmentType(name, <any>undefined, { urn })
            case "azure-native:devcenter:ProjectPolicy":
                return new ProjectPolicy(name, <any>undefined, { urn })
            case "azure-native:devcenter:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "devcenter", _module)
