// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AttachedNetworkByDevCenterArgs } from "./attachedNetworkByDevCenter";
export type AttachedNetworkByDevCenter = import("./attachedNetworkByDevCenter").AttachedNetworkByDevCenter;
export const AttachedNetworkByDevCenter: typeof import("./attachedNetworkByDevCenter").AttachedNetworkByDevCenter = null as any;
utilities.lazyLoad(exports, ["AttachedNetworkByDevCenter"], () => require("./attachedNetworkByDevCenter"));

export { CatalogArgs } from "./catalog";
export type Catalog = import("./catalog").Catalog;
export const Catalog: typeof import("./catalog").Catalog = null as any;
utilities.lazyLoad(exports, ["Catalog"], () => require("./catalog"));

export { DevBoxDefinitionArgs } from "./devBoxDefinition";
export type DevBoxDefinition = import("./devBoxDefinition").DevBoxDefinition;
export const DevBoxDefinition: typeof import("./devBoxDefinition").DevBoxDefinition = null as any;
utilities.lazyLoad(exports, ["DevBoxDefinition"], () => require("./devBoxDefinition"));

export { DevCenterArgs } from "./devCenter";
export type DevCenter = import("./devCenter").DevCenter;
export const DevCenter: typeof import("./devCenter").DevCenter = null as any;
utilities.lazyLoad(exports, ["DevCenter"], () => require("./devCenter"));

export { EnvironmentTypeArgs } from "./environmentType";
export type EnvironmentType = import("./environmentType").EnvironmentType;
export const EnvironmentType: typeof import("./environmentType").EnvironmentType = null as any;
utilities.lazyLoad(exports, ["EnvironmentType"], () => require("./environmentType"));

export { GalleryArgs } from "./gallery";
export type Gallery = import("./gallery").Gallery;
export const Gallery: typeof import("./gallery").Gallery = null as any;
utilities.lazyLoad(exports, ["Gallery"], () => require("./gallery"));

export { GetAttachedNetworkByDevCenterArgs, GetAttachedNetworkByDevCenterResult, GetAttachedNetworkByDevCenterOutputArgs } from "./getAttachedNetworkByDevCenter";
export const getAttachedNetworkByDevCenter: typeof import("./getAttachedNetworkByDevCenter").getAttachedNetworkByDevCenter = null as any;
export const getAttachedNetworkByDevCenterOutput: typeof import("./getAttachedNetworkByDevCenter").getAttachedNetworkByDevCenterOutput = null as any;
utilities.lazyLoad(exports, ["getAttachedNetworkByDevCenter","getAttachedNetworkByDevCenterOutput"], () => require("./getAttachedNetworkByDevCenter"));

export { GetCatalogArgs, GetCatalogResult, GetCatalogOutputArgs } from "./getCatalog";
export const getCatalog: typeof import("./getCatalog").getCatalog = null as any;
export const getCatalogOutput: typeof import("./getCatalog").getCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getCatalog","getCatalogOutput"], () => require("./getCatalog"));

export { GetDevBoxDefinitionArgs, GetDevBoxDefinitionResult, GetDevBoxDefinitionOutputArgs } from "./getDevBoxDefinition";
export const getDevBoxDefinition: typeof import("./getDevBoxDefinition").getDevBoxDefinition = null as any;
export const getDevBoxDefinitionOutput: typeof import("./getDevBoxDefinition").getDevBoxDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getDevBoxDefinition","getDevBoxDefinitionOutput"], () => require("./getDevBoxDefinition"));

export { GetDevCenterArgs, GetDevCenterResult, GetDevCenterOutputArgs } from "./getDevCenter";
export const getDevCenter: typeof import("./getDevCenter").getDevCenter = null as any;
export const getDevCenterOutput: typeof import("./getDevCenter").getDevCenterOutput = null as any;
utilities.lazyLoad(exports, ["getDevCenter","getDevCenterOutput"], () => require("./getDevCenter"));

export { GetEnvironmentTypeArgs, GetEnvironmentTypeResult, GetEnvironmentTypeOutputArgs } from "./getEnvironmentType";
export const getEnvironmentType: typeof import("./getEnvironmentType").getEnvironmentType = null as any;
export const getEnvironmentTypeOutput: typeof import("./getEnvironmentType").getEnvironmentTypeOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentType","getEnvironmentTypeOutput"], () => require("./getEnvironmentType"));

export { GetGalleryArgs, GetGalleryResult, GetGalleryOutputArgs } from "./getGallery";
export const getGallery: typeof import("./getGallery").getGallery = null as any;
export const getGalleryOutput: typeof import("./getGallery").getGalleryOutput = null as any;
utilities.lazyLoad(exports, ["getGallery","getGalleryOutput"], () => require("./getGallery"));

export { GetNetworkConnectionArgs, GetNetworkConnectionResult, GetNetworkConnectionOutputArgs } from "./getNetworkConnection";
export const getNetworkConnection: typeof import("./getNetworkConnection").getNetworkConnection = null as any;
export const getNetworkConnectionOutput: typeof import("./getNetworkConnection").getNetworkConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkConnection","getNetworkConnectionOutput"], () => require("./getNetworkConnection"));

export { GetPoolArgs, GetPoolResult, GetPoolOutputArgs } from "./getPool";
export const getPool: typeof import("./getPool").getPool = null as any;
export const getPoolOutput: typeof import("./getPool").getPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPool","getPoolOutput"], () => require("./getPool"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectEnvironmentTypeArgs, GetProjectEnvironmentTypeResult, GetProjectEnvironmentTypeOutputArgs } from "./getProjectEnvironmentType";
export const getProjectEnvironmentType: typeof import("./getProjectEnvironmentType").getProjectEnvironmentType = null as any;
export const getProjectEnvironmentTypeOutput: typeof import("./getProjectEnvironmentType").getProjectEnvironmentTypeOutput = null as any;
utilities.lazyLoad(exports, ["getProjectEnvironmentType","getProjectEnvironmentTypeOutput"], () => require("./getProjectEnvironmentType"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { NetworkConnectionArgs } from "./networkConnection";
export type NetworkConnection = import("./networkConnection").NetworkConnection;
export const NetworkConnection: typeof import("./networkConnection").NetworkConnection = null as any;
utilities.lazyLoad(exports, ["NetworkConnection"], () => require("./networkConnection"));

export { PoolArgs } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { ProjectArgs } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectEnvironmentTypeArgs } from "./projectEnvironmentType";
export type ProjectEnvironmentType = import("./projectEnvironmentType").ProjectEnvironmentType;
export const ProjectEnvironmentType: typeof import("./projectEnvironmentType").ProjectEnvironmentType = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironmentType"], () => require("./projectEnvironmentType"));

export { ScheduleArgs } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));


// Export enums:
export * from "../../types/enums/devcenter/v20221012preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:devcenter/v20221012preview:AttachedNetworkByDevCenter":
                return new AttachedNetworkByDevCenter(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:Catalog":
                return new Catalog(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:DevBoxDefinition":
                return new DevBoxDefinition(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:DevCenter":
                return new DevCenter(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:EnvironmentType":
                return new EnvironmentType(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:Gallery":
                return new Gallery(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:NetworkConnection":
                return new NetworkConnection(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:Project":
                return new Project(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:ProjectEnvironmentType":
                return new ProjectEnvironmentType(name, <any>undefined, { urn })
            case "azure-native:devcenter/v20221012preview:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "devcenter/v20221012preview", _module)
