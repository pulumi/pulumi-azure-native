// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * The connector resource format.
 */
export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:customerinsights/v20170426:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }

    /**
     * ID of the connector.
     */
    public /*out*/ readonly connectorId!: pulumi.Output<number>;
    /**
     * Name of the connector.
     */
    public readonly connectorName!: pulumi.Output<string | undefined>;
    /**
     * The connector properties.
     */
    public readonly connectorProperties!: pulumi.Output<{[key: string]: any}>;
    /**
     * Type of connector.
     */
    public readonly connectorType!: pulumi.Output<string>;
    /**
     * The created time.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Description of the connector.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display name of the connector.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * If this is an internal connector.
     */
    public readonly isInternal!: pulumi.Output<boolean | undefined>;
    /**
     * The last modified time.
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * State of connector.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The hub name.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.connectorName === undefined) {
                throw new Error("Missing required property 'connectorName'");
            }
            if (!args || args.connectorProperties === undefined) {
                throw new Error("Missing required property 'connectorProperties'");
            }
            if (!args || args.connectorType === undefined) {
                throw new Error("Missing required property 'connectorType'");
            }
            if (!args || args.hubName === undefined) {
                throw new Error("Missing required property 'hubName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["connectorName"] = args ? args.connectorName : undefined;
            inputs["connectorProperties"] = args ? args.connectorProperties : undefined;
            inputs["connectorType"] = args ? args.connectorType : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["hubName"] = args ? args.hubName : undefined;
            inputs["isInternal"] = args ? args.isInternal : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["connectorId"] = undefined /*out*/;
            inputs["created"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["tenantId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["connectorId"] = undefined /*out*/;
            inputs["connectorName"] = undefined /*out*/;
            inputs["connectorProperties"] = undefined /*out*/;
            inputs["connectorType"] = undefined /*out*/;
            inputs["created"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["isInternal"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["tenantId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:customerinsights/latest:Connector" }, { type: "azure-nextgen:customerinsights/v20170101:Connector" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(Connector.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    /**
     * Name of the connector.
     */
    readonly connectorName: pulumi.Input<string>;
    /**
     * The connector properties.
     */
    readonly connectorProperties: pulumi.Input<{[key: string]: any}>;
    /**
     * Type of connector.
     */
    readonly connectorType: pulumi.Input<string>;
    /**
     * Description of the connector.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Display name of the connector.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * The name of the hub.
     */
    readonly hubName: pulumi.Input<string>;
    /**
     * If this is an internal connector.
     */
    readonly isInternal?: pulumi.Input<boolean>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
