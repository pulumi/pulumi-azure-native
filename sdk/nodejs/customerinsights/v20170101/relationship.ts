// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * The relationship resource format.
 */
export class Relationship extends pulumi.CustomResource {
    /**
     * Get an existing Relationship resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Relationship {
        return new Relationship(name, undefined, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:customerinsights/v20170101:Relationship';

    /**
     * Returns true if the given object is an instance of Relationship.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Relationship {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Relationship.__pulumiType;
    }

    /**
     * Resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The definition of Relationship.
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.customerinsights.v20170101.RelationshipDefinitionResponse>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Relationship resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RelationshipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, state: undefined, opts: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RelationshipArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState as RelationshipArgs | undefined;
            if (!args || args.hubName === undefined) {
                throw new Error("Missing required property 'hubName'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.profileType === undefined) {
                throw new Error("Missing required property 'profileType'");
            }
            if (!args || args.relatedProfileType === undefined) {
                throw new Error("Missing required property 'relatedProfileType'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["cardinality"] = args ? args.cardinality : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["expiryDateTimeUtc"] = args ? args.expiryDateTimeUtc : undefined;
            inputs["fields"] = args ? args.fields : undefined;
            inputs["hubName"] = args ? args.hubName : undefined;
            inputs["lookupMappings"] = args ? args.lookupMappings : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["profileType"] = args ? args.profileType : undefined;
            inputs["relatedProfileType"] = args ? args.relatedProfileType : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["properties"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Relationship.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Relationship resource.
 */
export interface RelationshipArgs {
    /**
     * The Relationship Cardinality.
     */
    readonly cardinality?: pulumi.Input<string>;
    /**
     * Localized descriptions for the Relationship.
     */
    readonly description?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Localized display name for the Relationship.
     */
    readonly displayName?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The expiry date time in UTC.
     */
    readonly expiryDateTimeUtc?: pulumi.Input<string>;
    /**
     * The properties of the Relationship.
     */
    readonly fields?: pulumi.Input<pulumi.Input<inputs.customerinsights.v20170101.PropertyDefinition>[]>;
    /**
     * The name of the hub.
     */
    readonly hubName: pulumi.Input<string>;
    /**
     * Optional property to be used to map fields in profile to their strong ids in related profile.
     */
    readonly lookupMappings?: pulumi.Input<pulumi.Input<inputs.customerinsights.v20170101.RelationshipTypeMapping>[]>;
    /**
     * The name of the Relationship.
     */
    readonly name: pulumi.Input<string>;
    /**
     * Profile type.
     */
    readonly profileType: pulumi.Input<string>;
    /**
     * Related profile being referenced.
     */
    readonly relatedProfileType: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
