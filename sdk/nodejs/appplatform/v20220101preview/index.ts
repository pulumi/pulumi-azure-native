// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ApiPortalArgs } from "./apiPortal";
export type ApiPortal = import("./apiPortal").ApiPortal;
export const ApiPortal: typeof import("./apiPortal").ApiPortal = null as any;
utilities.lazyLoad(exports, ["ApiPortal"], () => require("./apiPortal"));

export { ApiPortalCustomDomainArgs } from "./apiPortalCustomDomain";
export type ApiPortalCustomDomain = import("./apiPortalCustomDomain").ApiPortalCustomDomain;
export const ApiPortalCustomDomain: typeof import("./apiPortalCustomDomain").ApiPortalCustomDomain = null as any;
utilities.lazyLoad(exports, ["ApiPortalCustomDomain"], () => require("./apiPortalCustomDomain"));

export { BuildServiceAgentPoolArgs } from "./buildServiceAgentPool";
export type BuildServiceAgentPool = import("./buildServiceAgentPool").BuildServiceAgentPool;
export const BuildServiceAgentPool: typeof import("./buildServiceAgentPool").BuildServiceAgentPool = null as any;
utilities.lazyLoad(exports, ["BuildServiceAgentPool"], () => require("./buildServiceAgentPool"));

export { BuildServiceBuilderArgs } from "./buildServiceBuilder";
export type BuildServiceBuilder = import("./buildServiceBuilder").BuildServiceBuilder;
export const BuildServiceBuilder: typeof import("./buildServiceBuilder").BuildServiceBuilder = null as any;
utilities.lazyLoad(exports, ["BuildServiceBuilder"], () => require("./buildServiceBuilder"));

export { BuildpackBindingArgs } from "./buildpackBinding";
export type BuildpackBinding = import("./buildpackBinding").BuildpackBinding;
export const BuildpackBinding: typeof import("./buildpackBinding").BuildpackBinding = null as any;
utilities.lazyLoad(exports, ["BuildpackBinding"], () => require("./buildpackBinding"));

export { ConfigurationServiceArgs } from "./configurationService";
export type ConfigurationService = import("./configurationService").ConfigurationService;
export const ConfigurationService: typeof import("./configurationService").ConfigurationService = null as any;
utilities.lazyLoad(exports, ["ConfigurationService"], () => require("./configurationService"));

export { GatewayArgs } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayCustomDomainArgs } from "./gatewayCustomDomain";
export type GatewayCustomDomain = import("./gatewayCustomDomain").GatewayCustomDomain;
export const GatewayCustomDomain: typeof import("./gatewayCustomDomain").GatewayCustomDomain = null as any;
utilities.lazyLoad(exports, ["GatewayCustomDomain"], () => require("./gatewayCustomDomain"));

export { GatewayRouteConfigArgs } from "./gatewayRouteConfig";
export type GatewayRouteConfig = import("./gatewayRouteConfig").GatewayRouteConfig;
export const GatewayRouteConfig: typeof import("./gatewayRouteConfig").GatewayRouteConfig = null as any;
utilities.lazyLoad(exports, ["GatewayRouteConfig"], () => require("./gatewayRouteConfig"));

export { GetApiPortalArgs, GetApiPortalResult, GetApiPortalOutputArgs } from "./getApiPortal";
export const getApiPortal: typeof import("./getApiPortal").getApiPortal = null as any;
export const getApiPortalOutput: typeof import("./getApiPortal").getApiPortalOutput = null as any;
utilities.lazyLoad(exports, ["getApiPortal","getApiPortalOutput"], () => require("./getApiPortal"));

export { GetApiPortalCustomDomainArgs, GetApiPortalCustomDomainResult, GetApiPortalCustomDomainOutputArgs } from "./getApiPortalCustomDomain";
export const getApiPortalCustomDomain: typeof import("./getApiPortalCustomDomain").getApiPortalCustomDomain = null as any;
export const getApiPortalCustomDomainOutput: typeof import("./getApiPortalCustomDomain").getApiPortalCustomDomainOutput = null as any;
utilities.lazyLoad(exports, ["getApiPortalCustomDomain","getApiPortalCustomDomainOutput"], () => require("./getApiPortalCustomDomain"));

export { GetBuildServiceAgentPoolArgs, GetBuildServiceAgentPoolResult, GetBuildServiceAgentPoolOutputArgs } from "./getBuildServiceAgentPool";
export const getBuildServiceAgentPool: typeof import("./getBuildServiceAgentPool").getBuildServiceAgentPool = null as any;
export const getBuildServiceAgentPoolOutput: typeof import("./getBuildServiceAgentPool").getBuildServiceAgentPoolOutput = null as any;
utilities.lazyLoad(exports, ["getBuildServiceAgentPool","getBuildServiceAgentPoolOutput"], () => require("./getBuildServiceAgentPool"));

export { GetBuildServiceBuilderArgs, GetBuildServiceBuilderResult, GetBuildServiceBuilderOutputArgs } from "./getBuildServiceBuilder";
export const getBuildServiceBuilder: typeof import("./getBuildServiceBuilder").getBuildServiceBuilder = null as any;
export const getBuildServiceBuilderOutput: typeof import("./getBuildServiceBuilder").getBuildServiceBuilderOutput = null as any;
utilities.lazyLoad(exports, ["getBuildServiceBuilder","getBuildServiceBuilderOutput"], () => require("./getBuildServiceBuilder"));

export { GetBuildpackBindingArgs, GetBuildpackBindingResult, GetBuildpackBindingOutputArgs } from "./getBuildpackBinding";
export const getBuildpackBinding: typeof import("./getBuildpackBinding").getBuildpackBinding = null as any;
export const getBuildpackBindingOutput: typeof import("./getBuildpackBinding").getBuildpackBindingOutput = null as any;
utilities.lazyLoad(exports, ["getBuildpackBinding","getBuildpackBindingOutput"], () => require("./getBuildpackBinding"));

export { GetConfigurationServiceArgs, GetConfigurationServiceResult, GetConfigurationServiceOutputArgs } from "./getConfigurationService";
export const getConfigurationService: typeof import("./getConfigurationService").getConfigurationService = null as any;
export const getConfigurationServiceOutput: typeof import("./getConfigurationService").getConfigurationServiceOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationService","getConfigurationServiceOutput"], () => require("./getConfigurationService"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetGatewayCustomDomainArgs, GetGatewayCustomDomainResult, GetGatewayCustomDomainOutputArgs } from "./getGatewayCustomDomain";
export const getGatewayCustomDomain: typeof import("./getGatewayCustomDomain").getGatewayCustomDomain = null as any;
export const getGatewayCustomDomainOutput: typeof import("./getGatewayCustomDomain").getGatewayCustomDomainOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayCustomDomain","getGatewayCustomDomainOutput"], () => require("./getGatewayCustomDomain"));

export { GetGatewayRouteConfigArgs, GetGatewayRouteConfigResult, GetGatewayRouteConfigOutputArgs } from "./getGatewayRouteConfig";
export const getGatewayRouteConfig: typeof import("./getGatewayRouteConfig").getGatewayRouteConfig = null as any;
export const getGatewayRouteConfigOutput: typeof import("./getGatewayRouteConfig").getGatewayRouteConfigOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayRouteConfig","getGatewayRouteConfigOutput"], () => require("./getGatewayRouteConfig"));

export { GetServiceRegistryArgs, GetServiceRegistryResult, GetServiceRegistryOutputArgs } from "./getServiceRegistry";
export const getServiceRegistry: typeof import("./getServiceRegistry").getServiceRegistry = null as any;
export const getServiceRegistryOutput: typeof import("./getServiceRegistry").getServiceRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRegistry","getServiceRegistryOutput"], () => require("./getServiceRegistry"));

export { ServiceRegistryArgs } from "./serviceRegistry";
export type ServiceRegistry = import("./serviceRegistry").ServiceRegistry;
export const ServiceRegistry: typeof import("./serviceRegistry").ServiceRegistry = null as any;
utilities.lazyLoad(exports, ["ServiceRegistry"], () => require("./serviceRegistry"));


// Export enums:
export * from "../../types/enums/appplatform/v20220101preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:appplatform/v20220101preview:ApiPortal":
                return new ApiPortal(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:ApiPortalCustomDomain":
                return new ApiPortalCustomDomain(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:BuildServiceAgentPool":
                return new BuildServiceAgentPool(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:BuildServiceBuilder":
                return new BuildServiceBuilder(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:BuildpackBinding":
                return new BuildpackBinding(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:ConfigurationService":
                return new ConfigurationService(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:GatewayCustomDomain":
                return new GatewayCustomDomain(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:GatewayRouteConfig":
                return new GatewayRouteConfig(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20220101preview:ServiceRegistry":
                return new ServiceRegistry(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "appplatform/v20220101preview", _module)
