// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AFDCustomDomainArgs } from "./afdcustomDomain";
export type AFDCustomDomain = import("./afdcustomDomain").AFDCustomDomain;
export const AFDCustomDomain: typeof import("./afdcustomDomain").AFDCustomDomain = null as any;
utilities.lazyLoad(exports, ["AFDCustomDomain"], () => require("./afdcustomDomain"));

export { AFDTargetGroupArgs } from "./afdtargetGroup";
export type AFDTargetGroup = import("./afdtargetGroup").AFDTargetGroup;
export const AFDTargetGroup: typeof import("./afdtargetGroup").AFDTargetGroup = null as any;
utilities.lazyLoad(exports, ["AFDTargetGroup"], () => require("./afdtargetGroup"));

export { GetAFDCustomDomainArgs, GetAFDCustomDomainResult, GetAFDCustomDomainOutputArgs } from "./getAFDCustomDomain";
export const getAFDCustomDomain: typeof import("./getAFDCustomDomain").getAFDCustomDomain = null as any;
export const getAFDCustomDomainOutput: typeof import("./getAFDCustomDomain").getAFDCustomDomainOutput = null as any;
utilities.lazyLoad(exports, ["getAFDCustomDomain","getAFDCustomDomainOutput"], () => require("./getAFDCustomDomain"));

export { GetAFDTargetGroupArgs, GetAFDTargetGroupResult, GetAFDTargetGroupOutputArgs } from "./getAFDTargetGroup";
export const getAFDTargetGroup: typeof import("./getAFDTargetGroup").getAFDTargetGroup = null as any;
export const getAFDTargetGroupOutput: typeof import("./getAFDTargetGroup").getAFDTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAFDTargetGroup","getAFDTargetGroupOutput"], () => require("./getAFDTargetGroup"));

export { GetKeyGroupArgs, GetKeyGroupResult, GetKeyGroupOutputArgs } from "./getKeyGroup";
export const getKeyGroup: typeof import("./getKeyGroup").getKeyGroup = null as any;
export const getKeyGroupOutput: typeof import("./getKeyGroup").getKeyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getKeyGroup","getKeyGroupOutput"], () => require("./getKeyGroup"));

export { GetRouteArgs, GetRouteResult, GetRouteOutputArgs } from "./getRoute";
export const getRoute: typeof import("./getRoute").getRoute = null as any;
export const getRouteOutput: typeof import("./getRoute").getRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRoute","getRouteOutput"], () => require("./getRoute"));

export { GetTunnelPolicyArgs, GetTunnelPolicyResult, GetTunnelPolicyOutputArgs } from "./getTunnelPolicy";
export const getTunnelPolicy: typeof import("./getTunnelPolicy").getTunnelPolicy = null as any;
export const getTunnelPolicyOutput: typeof import("./getTunnelPolicy").getTunnelPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getTunnelPolicy","getTunnelPolicyOutput"], () => require("./getTunnelPolicy"));

export { KeyGroupArgs } from "./keyGroup";
export type KeyGroup = import("./keyGroup").KeyGroup;
export const KeyGroup: typeof import("./keyGroup").KeyGroup = null as any;
utilities.lazyLoad(exports, ["KeyGroup"], () => require("./keyGroup"));

export { RouteArgs } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { TunnelPolicyArgs } from "./tunnelPolicy";
export type TunnelPolicy = import("./tunnelPolicy").TunnelPolicy;
export const TunnelPolicy: typeof import("./tunnelPolicy").TunnelPolicy = null as any;
utilities.lazyLoad(exports, ["TunnelPolicy"], () => require("./tunnelPolicy"));


// Export enums:
export * from "../../types/enums/cdn/v20240601preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:cdn/v20240601preview:AFDCustomDomain":
                return new AFDCustomDomain(name, <any>undefined, { urn })
            case "azure-native:cdn/v20240601preview:AFDTargetGroup":
                return new AFDTargetGroup(name, <any>undefined, { urn })
            case "azure-native:cdn/v20240601preview:KeyGroup":
                return new KeyGroup(name, <any>undefined, { urn })
            case "azure-native:cdn/v20240601preview:Route":
                return new Route(name, <any>undefined, { urn })
            case "azure-native:cdn/v20240601preview:TunnelPolicy":
                return new TunnelPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "cdn/v20240601preview", _module)
