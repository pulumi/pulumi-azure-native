// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets an existing security policy within a profile.
 */
export function getSecurityPolicy(args: GetSecurityPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:cdn/v20200901:getSecurityPolicy", {
        "profileName": args.profileName,
        "resourceGroupName": args.resourceGroupName,
        "securityPolicyName": args.securityPolicyName,
    }, opts);
}

export interface GetSecurityPolicyArgs {
    /**
     * Name of the CDN profile which is unique within the resource group.
     */
    profileName: string;
    /**
     * Name of the Resource group within the Azure subscription.
     */
    resourceGroupName: string;
    /**
     * Name of the security policy under the profile.
     */
    securityPolicyName: string;
}

/**
 * SecurityPolicy association for AzureFrontDoor profile
 */
export interface GetSecurityPolicyResult {
    readonly deploymentStatus: string;
    /**
     * Resource ID.
     */
    readonly id: string;
    /**
     * Resource name.
     */
    readonly name: string;
    /**
     * object which contains security policy parameters
     */
    readonly parameters?: outputs.cdn.v20200901.SecurityPolicyWebApplicationFirewallParametersResponse;
    /**
     * Provisioning status
     */
    readonly provisioningState: string;
    /**
     * Read only system data
     */
    readonly systemData: outputs.cdn.v20200901.SystemDataResponse;
    /**
     * Resource type.
     */
    readonly type: string;
}
/**
 * Gets an existing security policy within a profile.
 */
export function getSecurityPolicyOutput(args: GetSecurityPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityPolicyResult> {
    return pulumi.output(args).apply((a: any) => getSecurityPolicy(a, opts))
}

export interface GetSecurityPolicyOutputArgs {
    /**
     * Name of the CDN profile which is unique within the resource group.
     */
    profileName: pulumi.Input<string>;
    /**
     * Name of the Resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Name of the security policy under the profile.
     */
    securityPolicyName: pulumi.Input<string>;
}
