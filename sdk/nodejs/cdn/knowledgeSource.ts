// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Defines a knowledge source resource for a web agent.
 *
 * Uses Azure REST API version 2025-09-01-preview.
 */
export class KnowledgeSource extends pulumi.CustomResource {
    /**
     * Get an existing KnowledgeSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KnowledgeSource {
        return new KnowledgeSource(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:cdn:KnowledgeSource';

    /**
     * Returns true if the given object is an instance of KnowledgeSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KnowledgeSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KnowledgeSource.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Description of the knowledge source.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The last time the knowledge source was updated.
     */
    declare public /*out*/ readonly lastRefreshedTime: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Provisioning status of the knowledge source.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * Format or origin of the knowledge source.
     */
    declare public readonly sourceType: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.cdn.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * Specifies the units of time for scheduling update intervals for the knowledge source.
     */
    declare public readonly updateFrequency: pulumi.Output<string | undefined>;
    /**
     * Endpoint or location of the knowledge source.
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a KnowledgeSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KnowledgeSourceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.sourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if (args?.webAgentName === undefined && !opts.urn) {
                throw new Error("Missing required property 'webAgentName'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["knowledgeSourceName"] = args?.knowledgeSourceName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["sourceType"] = args?.sourceType;
            resourceInputs["updateFrequency"] = args?.updateFrequency;
            resourceInputs["url"] = args?.url;
            resourceInputs["webAgentName"] = args?.webAgentName;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["lastRefreshedTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["lastRefreshedTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updateFrequency"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:cdn/v20250901preview:KnowledgeSource" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(KnowledgeSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a KnowledgeSource resource.
 */
export interface KnowledgeSourceArgs {
    /**
     * Description of the knowledge source.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the knowledge source.
     */
    knowledgeSourceName?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Format or origin of the knowledge source.
     */
    sourceType: pulumi.Input<string | enums.cdn.KnowledgeSourceType>;
    /**
     * Specifies the units of time for scheduling update intervals for the knowledge source.
     */
    updateFrequency?: pulumi.Input<string | enums.cdn.KnowledgeSourceUpdateFrequency>;
    /**
     * Endpoint or location of the knowledge source.
     */
    url: pulumi.Input<string>;
    /**
     * The name of the web agent.
     */
    webAgentName: pulumi.Input<string>;
}
