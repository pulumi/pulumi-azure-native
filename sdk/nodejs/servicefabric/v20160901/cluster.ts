// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * The cluster resource
 *
 * @deprecated Version 2016-09-01 will be removed in v2 of the provider.
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster {
        pulumi.log.warn("Cluster is deprecated: Version 2016-09-01 will be removed in v2 of the provider.")
        return new Cluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:servicefabric/v20160901:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The available cluster code version which the cluster can upgrade to, note that you must choose upgradeMode to manual to upgrade to
     */
    public /*out*/ readonly availableClusterVersions!: pulumi.Output<outputs.servicefabric.v20160901.ClusterVersionDetailsResponse[]>;
    /**
     * The settings to enable AAD authentication on the cluster
     */
    public readonly azureActiveDirectory!: pulumi.Output<outputs.servicefabric.v20160901.AzureActiveDirectoryResponse | undefined>;
    /**
     * This primary certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client
     */
    public readonly certificate!: pulumi.Output<outputs.servicefabric.v20160901.CertificateDescriptionResponse | undefined>;
    /**
     *  List of client certificates to trust based on common names
     */
    public readonly clientCertificateCommonNames!: pulumi.Output<outputs.servicefabric.v20160901.ClientCertificateCommonNameResponse[] | undefined>;
    /**
     * The client thumbprint details ,it is used for client access for cluster operation
     */
    public readonly clientCertificateThumbprints!: pulumi.Output<outputs.servicefabric.v20160901.ClientCertificateThumbprintResponse[] | undefined>;
    /**
     * The ServiceFabric code version running in your cluster
     */
    public readonly clusterCodeVersion!: pulumi.Output<string | undefined>;
    /**
     * The endpoint for the cluster connecting to servicefabric resource provider
     */
    public /*out*/ readonly clusterEndpoint!: pulumi.Output<string>;
    /**
     * The unique identifier for the cluster resource
     */
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    /**
     * The state for the cluster
     */
    public /*out*/ readonly clusterState!: pulumi.Output<string>;
    /**
     * The storage diagnostics account configuration details
     */
    public readonly diagnosticsStorageAccountConfig!: pulumi.Output<outputs.servicefabric.v20160901.DiagnosticsStorageAccountConfigResponse | undefined>;
    /**
     * List of custom fabric settings to configure the cluster.
     */
    public readonly fabricSettings!: pulumi.Output<outputs.servicefabric.v20160901.SettingsSectionDescriptionResponse[] | undefined>;
    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The http management endpoint of the cluster
     */
    public readonly managementEndpoint!: pulumi.Output<string>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The list of node types that make up the cluster
     */
    public readonly nodeTypes!: pulumi.Output<outputs.servicefabric.v20160901.NodeTypeDescriptionResponse[]>;
    /**
     * The provisioning state of the cluster resource
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Cluster reliability level indicates replica set size of system service
     */
    public readonly reliabilityLevel!: pulumi.Output<string | undefined>;
    /**
     * The server certificate used by reverse proxy
     */
    public readonly reverseProxyCertificate!: pulumi.Output<outputs.servicefabric.v20160901.CertificateDescriptionResponse | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The policy to use when upgrading the cluster.
     */
    public readonly upgradeDescription!: pulumi.Output<outputs.servicefabric.v20160901.ClusterUpgradePolicyResponse | undefined>;
    /**
     * Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not
     */
    public readonly upgradeMode!: pulumi.Output<string | undefined>;
    /**
     * The name of VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     */
    public readonly vmImage!: pulumi.Output<string | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2016-09-01 will be removed in v2 of the provider. */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Cluster is deprecated: Version 2016-09-01 will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.managementEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementEndpoint'");
            }
            if ((!args || args.nodeTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeTypes'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["azureActiveDirectory"] = args ? args.azureActiveDirectory : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["clientCertificateCommonNames"] = args ? args.clientCertificateCommonNames : undefined;
            resourceInputs["clientCertificateThumbprints"] = args ? args.clientCertificateThumbprints : undefined;
            resourceInputs["clusterCodeVersion"] = args ? args.clusterCodeVersion : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["diagnosticsStorageAccountConfig"] = args ? args.diagnosticsStorageAccountConfig : undefined;
            resourceInputs["fabricSettings"] = args ? args.fabricSettings : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementEndpoint"] = args ? args.managementEndpoint : undefined;
            resourceInputs["nodeTypes"] = args ? args.nodeTypes : undefined;
            resourceInputs["reliabilityLevel"] = args ? args.reliabilityLevel : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["reverseProxyCertificate"] = args ? args.reverseProxyCertificate : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["upgradeDescription"] = args ? args.upgradeDescription : undefined;
            resourceInputs["upgradeMode"] = args ? args.upgradeMode : undefined;
            resourceInputs["vmImage"] = args ? args.vmImage : undefined;
            resourceInputs["availableClusterVersions"] = undefined /*out*/;
            resourceInputs["clusterEndpoint"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["clusterState"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["availableClusterVersions"] = undefined /*out*/;
            resourceInputs["azureActiveDirectory"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["clientCertificateCommonNames"] = undefined /*out*/;
            resourceInputs["clientCertificateThumbprints"] = undefined /*out*/;
            resourceInputs["clusterCodeVersion"] = undefined /*out*/;
            resourceInputs["clusterEndpoint"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["clusterState"] = undefined /*out*/;
            resourceInputs["diagnosticsStorageAccountConfig"] = undefined /*out*/;
            resourceInputs["fabricSettings"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["managementEndpoint"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nodeTypes"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["reliabilityLevel"] = undefined /*out*/;
            resourceInputs["reverseProxyCertificate"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["upgradeDescription"] = undefined /*out*/;
            resourceInputs["upgradeMode"] = undefined /*out*/;
            resourceInputs["vmImage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:servicefabric:Cluster" }, { type: "azure-native:servicefabric/v20170701preview:Cluster" }, { type: "azure-native:servicefabric/v20180201:Cluster" }, { type: "azure-native:servicefabric/v20190301:Cluster" }, { type: "azure-native:servicefabric/v20190301preview:Cluster" }, { type: "azure-native:servicefabric/v20190601preview:Cluster" }, { type: "azure-native:servicefabric/v20191101preview:Cluster" }, { type: "azure-native:servicefabric/v20200301:Cluster" }, { type: "azure-native:servicefabric/v20201201preview:Cluster" }, { type: "azure-native:servicefabric/v20210601:Cluster" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The settings to enable AAD authentication on the cluster
     */
    azureActiveDirectory?: pulumi.Input<inputs.servicefabric.v20160901.AzureActiveDirectoryArgs>;
    /**
     * This primary certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client
     */
    certificate?: pulumi.Input<inputs.servicefabric.v20160901.CertificateDescriptionArgs>;
    /**
     *  List of client certificates to trust based on common names
     */
    clientCertificateCommonNames?: pulumi.Input<pulumi.Input<inputs.servicefabric.v20160901.ClientCertificateCommonNameArgs>[]>;
    /**
     * The client thumbprint details ,it is used for client access for cluster operation
     */
    clientCertificateThumbprints?: pulumi.Input<pulumi.Input<inputs.servicefabric.v20160901.ClientCertificateThumbprintArgs>[]>;
    /**
     * The ServiceFabric code version running in your cluster
     */
    clusterCodeVersion?: pulumi.Input<string>;
    /**
     * The name of the cluster resource
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The storage diagnostics account configuration details
     */
    diagnosticsStorageAccountConfig?: pulumi.Input<inputs.servicefabric.v20160901.DiagnosticsStorageAccountConfigArgs>;
    /**
     * List of custom fabric settings to configure the cluster.
     */
    fabricSettings?: pulumi.Input<pulumi.Input<inputs.servicefabric.v20160901.SettingsSectionDescriptionArgs>[]>;
    /**
     * Resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The http management endpoint of the cluster
     */
    managementEndpoint: pulumi.Input<string>;
    /**
     * The list of node types that make up the cluster
     */
    nodeTypes: pulumi.Input<pulumi.Input<inputs.servicefabric.v20160901.NodeTypeDescriptionArgs>[]>;
    /**
     * Cluster reliability level indicates replica set size of system service
     */
    reliabilityLevel?: pulumi.Input<string>;
    /**
     * The name of the resource group to which the resource belongs or get created
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The server certificate used by reverse proxy
     */
    reverseProxyCertificate?: pulumi.Input<inputs.servicefabric.v20160901.CertificateDescriptionArgs>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The policy to use when upgrading the cluster.
     */
    upgradeDescription?: pulumi.Input<inputs.servicefabric.v20160901.ClusterUpgradePolicyArgs>;
    /**
     * Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not
     */
    upgradeMode?: pulumi.Input<string>;
    /**
     * The name of VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     */
    vmImage?: pulumi.Input<string>;
}
