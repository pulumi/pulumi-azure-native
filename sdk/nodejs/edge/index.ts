// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConfigTemplateArgs } from "./configTemplate";
export type ConfigTemplate = import("./configTemplate").ConfigTemplate;
export const ConfigTemplate: typeof import("./configTemplate").ConfigTemplate = null as any;
utilities.lazyLoad(exports, ["ConfigTemplate"], () => require("./configTemplate"));

export { ConfigurationArgs } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { ConfigurationReferenceArgs } from "./configurationReference";
export type ConfigurationReference = import("./configurationReference").ConfigurationReference;
export const ConfigurationReference: typeof import("./configurationReference").ConfigurationReference = null as any;
utilities.lazyLoad(exports, ["ConfigurationReference"], () => require("./configurationReference"));

export { ContextArgs } from "./context";
export type Context = import("./context").Context;
export const Context: typeof import("./context").Context = null as any;
utilities.lazyLoad(exports, ["Context"], () => require("./context"));

export { DiagnosticArgs } from "./diagnostic";
export type Diagnostic = import("./diagnostic").Diagnostic;
export const Diagnostic: typeof import("./diagnostic").Diagnostic = null as any;
utilities.lazyLoad(exports, ["Diagnostic"], () => require("./diagnostic"));

export { DynamicConfigurationArgs } from "./dynamicConfiguration";
export type DynamicConfiguration = import("./dynamicConfiguration").DynamicConfiguration;
export const DynamicConfiguration: typeof import("./dynamicConfiguration").DynamicConfiguration = null as any;
utilities.lazyLoad(exports, ["DynamicConfiguration"], () => require("./dynamicConfiguration"));

export { DynamicConfigurationVersionArgs } from "./dynamicConfigurationVersion";
export type DynamicConfigurationVersion = import("./dynamicConfigurationVersion").DynamicConfigurationVersion;
export const DynamicConfigurationVersion: typeof import("./dynamicConfigurationVersion").DynamicConfigurationVersion = null as any;
utilities.lazyLoad(exports, ["DynamicConfigurationVersion"], () => require("./dynamicConfigurationVersion"));

export { DynamicSchemaArgs } from "./dynamicSchema";
export type DynamicSchema = import("./dynamicSchema").DynamicSchema;
export const DynamicSchema: typeof import("./dynamicSchema").DynamicSchema = null as any;
utilities.lazyLoad(exports, ["DynamicSchema"], () => require("./dynamicSchema"));

export { DynamicSchemaVersionArgs } from "./dynamicSchemaVersion";
export type DynamicSchemaVersion = import("./dynamicSchemaVersion").DynamicSchemaVersion;
export const DynamicSchemaVersion: typeof import("./dynamicSchemaVersion").DynamicSchemaVersion = null as any;
utilities.lazyLoad(exports, ["DynamicSchemaVersion"], () => require("./dynamicSchemaVersion"));

export { ExecutionArgs } from "./execution";
export type Execution = import("./execution").Execution;
export const Execution: typeof import("./execution").Execution = null as any;
utilities.lazyLoad(exports, ["Execution"], () => require("./execution"));

export { GetConfigTemplateArgs, GetConfigTemplateResult, GetConfigTemplateOutputArgs } from "./getConfigTemplate";
export const getConfigTemplate: typeof import("./getConfigTemplate").getConfigTemplate = null as any;
export const getConfigTemplateOutput: typeof import("./getConfigTemplate").getConfigTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getConfigTemplate","getConfigTemplateOutput"], () => require("./getConfigTemplate"));

export { GetConfigurationArgs, GetConfigurationResult, GetConfigurationOutputArgs } from "./getConfiguration";
export const getConfiguration: typeof import("./getConfiguration").getConfiguration = null as any;
export const getConfigurationOutput: typeof import("./getConfiguration").getConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getConfiguration","getConfigurationOutput"], () => require("./getConfiguration"));

export { GetConfigurationReferenceArgs, GetConfigurationReferenceResult, GetConfigurationReferenceOutputArgs } from "./getConfigurationReference";
export const getConfigurationReference: typeof import("./getConfigurationReference").getConfigurationReference = null as any;
export const getConfigurationReferenceOutput: typeof import("./getConfigurationReference").getConfigurationReferenceOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationReference","getConfigurationReferenceOutput"], () => require("./getConfigurationReference"));

export { GetContextArgs, GetContextResult, GetContextOutputArgs } from "./getContext";
export const getContext: typeof import("./getContext").getContext = null as any;
export const getContextOutput: typeof import("./getContext").getContextOutput = null as any;
utilities.lazyLoad(exports, ["getContext","getContextOutput"], () => require("./getContext"));

export { GetDiagnosticArgs, GetDiagnosticResult, GetDiagnosticOutputArgs } from "./getDiagnostic";
export const getDiagnostic: typeof import("./getDiagnostic").getDiagnostic = null as any;
export const getDiagnosticOutput: typeof import("./getDiagnostic").getDiagnosticOutput = null as any;
utilities.lazyLoad(exports, ["getDiagnostic","getDiagnosticOutput"], () => require("./getDiagnostic"));

export { GetDynamicConfigurationArgs, GetDynamicConfigurationResult, GetDynamicConfigurationOutputArgs } from "./getDynamicConfiguration";
export const getDynamicConfiguration: typeof import("./getDynamicConfiguration").getDynamicConfiguration = null as any;
export const getDynamicConfigurationOutput: typeof import("./getDynamicConfiguration").getDynamicConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicConfiguration","getDynamicConfigurationOutput"], () => require("./getDynamicConfiguration"));

export { GetDynamicConfigurationVersionArgs, GetDynamicConfigurationVersionResult, GetDynamicConfigurationVersionOutputArgs } from "./getDynamicConfigurationVersion";
export const getDynamicConfigurationVersion: typeof import("./getDynamicConfigurationVersion").getDynamicConfigurationVersion = null as any;
export const getDynamicConfigurationVersionOutput: typeof import("./getDynamicConfigurationVersion").getDynamicConfigurationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicConfigurationVersion","getDynamicConfigurationVersionOutput"], () => require("./getDynamicConfigurationVersion"));

export { GetDynamicSchemaArgs, GetDynamicSchemaResult, GetDynamicSchemaOutputArgs } from "./getDynamicSchema";
export const getDynamicSchema: typeof import("./getDynamicSchema").getDynamicSchema = null as any;
export const getDynamicSchemaOutput: typeof import("./getDynamicSchema").getDynamicSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicSchema","getDynamicSchemaOutput"], () => require("./getDynamicSchema"));

export { GetDynamicSchemaVersionArgs, GetDynamicSchemaVersionResult, GetDynamicSchemaVersionOutputArgs } from "./getDynamicSchemaVersion";
export const getDynamicSchemaVersion: typeof import("./getDynamicSchemaVersion").getDynamicSchemaVersion = null as any;
export const getDynamicSchemaVersionOutput: typeof import("./getDynamicSchemaVersion").getDynamicSchemaVersionOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicSchemaVersion","getDynamicSchemaVersionOutput"], () => require("./getDynamicSchemaVersion"));

export { GetExecutionArgs, GetExecutionResult, GetExecutionOutputArgs } from "./getExecution";
export const getExecution: typeof import("./getExecution").getExecution = null as any;
export const getExecutionOutput: typeof import("./getExecution").getExecutionOutput = null as any;
utilities.lazyLoad(exports, ["getExecution","getExecutionOutput"], () => require("./getExecution"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetSchemaArgs, GetSchemaResult, GetSchemaOutputArgs } from "./getSchema";
export const getSchema: typeof import("./getSchema").getSchema = null as any;
export const getSchemaOutput: typeof import("./getSchema").getSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getSchema","getSchemaOutput"], () => require("./getSchema"));

export { GetSchemaVersionArgs, GetSchemaVersionResult, GetSchemaVersionOutputArgs } from "./getSchemaVersion";
export const getSchemaVersion: typeof import("./getSchemaVersion").getSchemaVersion = null as any;
export const getSchemaVersionOutput: typeof import("./getSchemaVersion").getSchemaVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaVersion","getSchemaVersionOutput"], () => require("./getSchemaVersion"));

export { GetSiteArgs, GetSiteResult, GetSiteOutputArgs } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetSiteReferenceArgs, GetSiteReferenceResult, GetSiteReferenceOutputArgs } from "./getSiteReference";
export const getSiteReference: typeof import("./getSiteReference").getSiteReference = null as any;
export const getSiteReferenceOutput: typeof import("./getSiteReference").getSiteReferenceOutput = null as any;
utilities.lazyLoad(exports, ["getSiteReference","getSiteReferenceOutput"], () => require("./getSiteReference"));

export { GetSitesByServiceGroupArgs, GetSitesByServiceGroupResult, GetSitesByServiceGroupOutputArgs } from "./getSitesByServiceGroup";
export const getSitesByServiceGroup: typeof import("./getSitesByServiceGroup").getSitesByServiceGroup = null as any;
export const getSitesByServiceGroupOutput: typeof import("./getSitesByServiceGroup").getSitesByServiceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSitesByServiceGroup","getSitesByServiceGroupOutput"], () => require("./getSitesByServiceGroup"));

export { GetSitesBySubscriptionArgs, GetSitesBySubscriptionResult, GetSitesBySubscriptionOutputArgs } from "./getSitesBySubscription";
export const getSitesBySubscription: typeof import("./getSitesBySubscription").getSitesBySubscription = null as any;
export const getSitesBySubscriptionOutput: typeof import("./getSitesBySubscription").getSitesBySubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSitesBySubscription","getSitesBySubscriptionOutput"], () => require("./getSitesBySubscription"));

export { GetSolutionArgs, GetSolutionResult, GetSolutionOutputArgs } from "./getSolution";
export const getSolution: typeof import("./getSolution").getSolution = null as any;
export const getSolutionOutput: typeof import("./getSolution").getSolutionOutput = null as any;
utilities.lazyLoad(exports, ["getSolution","getSolutionOutput"], () => require("./getSolution"));

export { GetSolutionTemplateArgs, GetSolutionTemplateResult, GetSolutionTemplateOutputArgs } from "./getSolutionTemplate";
export const getSolutionTemplate: typeof import("./getSolutionTemplate").getSolutionTemplate = null as any;
export const getSolutionTemplateOutput: typeof import("./getSolutionTemplate").getSolutionTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getSolutionTemplate","getSolutionTemplateOutput"], () => require("./getSolutionTemplate"));

export { GetSolutionVersionArgs, GetSolutionVersionResult, GetSolutionVersionOutputArgs } from "./getSolutionVersion";
export const getSolutionVersion: typeof import("./getSolutionVersion").getSolutionVersion = null as any;
export const getSolutionVersionOutput: typeof import("./getSolutionVersion").getSolutionVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSolutionVersion","getSolutionVersionOutput"], () => require("./getSolutionVersion"));

export { GetTargetArgs, GetTargetResult, GetTargetOutputArgs } from "./getTarget";
export const getTarget: typeof import("./getTarget").getTarget = null as any;
export const getTargetOutput: typeof import("./getTarget").getTargetOutput = null as any;
utilities.lazyLoad(exports, ["getTarget","getTargetOutput"], () => require("./getTarget"));

export { GetWorkflowArgs, GetWorkflowResult, GetWorkflowOutputArgs } from "./getWorkflow";
export const getWorkflow: typeof import("./getWorkflow").getWorkflow = null as any;
export const getWorkflowOutput: typeof import("./getWorkflow").getWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflow","getWorkflowOutput"], () => require("./getWorkflow"));

export { GetWorkflowVersionArgs, GetWorkflowVersionResult, GetWorkflowVersionOutputArgs } from "./getWorkflowVersion";
export const getWorkflowVersion: typeof import("./getWorkflowVersion").getWorkflowVersion = null as any;
export const getWorkflowVersionOutput: typeof import("./getWorkflowVersion").getWorkflowVersionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowVersion","getWorkflowVersionOutput"], () => require("./getWorkflowVersion"));

export { InstanceArgs } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { SchemaArgs } from "./schema";
export type Schema = import("./schema").Schema;
export const Schema: typeof import("./schema").Schema = null as any;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));

export { SchemaVersionArgs } from "./schemaVersion";
export type SchemaVersion = import("./schemaVersion").SchemaVersion;
export const SchemaVersion: typeof import("./schemaVersion").SchemaVersion = null as any;
utilities.lazyLoad(exports, ["SchemaVersion"], () => require("./schemaVersion"));

export { SiteArgs } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SiteReferenceArgs } from "./siteReference";
export type SiteReference = import("./siteReference").SiteReference;
export const SiteReference: typeof import("./siteReference").SiteReference = null as any;
utilities.lazyLoad(exports, ["SiteReference"], () => require("./siteReference"));

export { SitesByServiceGroupArgs } from "./sitesByServiceGroup";
export type SitesByServiceGroup = import("./sitesByServiceGroup").SitesByServiceGroup;
export const SitesByServiceGroup: typeof import("./sitesByServiceGroup").SitesByServiceGroup = null as any;
utilities.lazyLoad(exports, ["SitesByServiceGroup"], () => require("./sitesByServiceGroup"));

export { SitesBySubscriptionArgs } from "./sitesBySubscription";
export type SitesBySubscription = import("./sitesBySubscription").SitesBySubscription;
export const SitesBySubscription: typeof import("./sitesBySubscription").SitesBySubscription = null as any;
utilities.lazyLoad(exports, ["SitesBySubscription"], () => require("./sitesBySubscription"));

export { SolutionArgs } from "./solution";
export type Solution = import("./solution").Solution;
export const Solution: typeof import("./solution").Solution = null as any;
utilities.lazyLoad(exports, ["Solution"], () => require("./solution"));

export { SolutionTemplateArgs } from "./solutionTemplate";
export type SolutionTemplate = import("./solutionTemplate").SolutionTemplate;
export const SolutionTemplate: typeof import("./solutionTemplate").SolutionTemplate = null as any;
utilities.lazyLoad(exports, ["SolutionTemplate"], () => require("./solutionTemplate"));

export { SolutionVersionArgs } from "./solutionVersion";
export type SolutionVersion = import("./solutionVersion").SolutionVersion;
export const SolutionVersion: typeof import("./solutionVersion").SolutionVersion = null as any;
utilities.lazyLoad(exports, ["SolutionVersion"], () => require("./solutionVersion"));

export { TargetArgs } from "./target";
export type Target = import("./target").Target;
export const Target: typeof import("./target").Target = null as any;
utilities.lazyLoad(exports, ["Target"], () => require("./target"));

export { WorkflowArgs } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));

export { WorkflowVersionArgs } from "./workflowVersion";
export type WorkflowVersion = import("./workflowVersion").WorkflowVersion;
export const WorkflowVersion: typeof import("./workflowVersion").WorkflowVersion = null as any;
utilities.lazyLoad(exports, ["WorkflowVersion"], () => require("./workflowVersion"));


// Export enums:
export * from "../types/enums/edge";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:edge:ConfigTemplate":
                return new ConfigTemplate(name, <any>undefined, { urn })
            case "azure-native:edge:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "azure-native:edge:ConfigurationReference":
                return new ConfigurationReference(name, <any>undefined, { urn })
            case "azure-native:edge:Context":
                return new Context(name, <any>undefined, { urn })
            case "azure-native:edge:Diagnostic":
                return new Diagnostic(name, <any>undefined, { urn })
            case "azure-native:edge:DynamicConfiguration":
                return new DynamicConfiguration(name, <any>undefined, { urn })
            case "azure-native:edge:DynamicConfigurationVersion":
                return new DynamicConfigurationVersion(name, <any>undefined, { urn })
            case "azure-native:edge:DynamicSchema":
                return new DynamicSchema(name, <any>undefined, { urn })
            case "azure-native:edge:DynamicSchemaVersion":
                return new DynamicSchemaVersion(name, <any>undefined, { urn })
            case "azure-native:edge:Execution":
                return new Execution(name, <any>undefined, { urn })
            case "azure-native:edge:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "azure-native:edge:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "azure-native:edge:SchemaVersion":
                return new SchemaVersion(name, <any>undefined, { urn })
            case "azure-native:edge:Site":
                return new Site(name, <any>undefined, { urn })
            case "azure-native:edge:SiteReference":
                return new SiteReference(name, <any>undefined, { urn })
            case "azure-native:edge:SitesByServiceGroup":
                return new SitesByServiceGroup(name, <any>undefined, { urn })
            case "azure-native:edge:SitesBySubscription":
                return new SitesBySubscription(name, <any>undefined, { urn })
            case "azure-native:edge:Solution":
                return new Solution(name, <any>undefined, { urn })
            case "azure-native:edge:SolutionTemplate":
                return new SolutionTemplate(name, <any>undefined, { urn })
            case "azure-native:edge:SolutionVersion":
                return new SolutionVersion(name, <any>undefined, { urn })
            case "azure-native:edge:Target":
                return new Target(name, <any>undefined, { urn })
            case "azure-native:edge:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            case "azure-native:edge:WorkflowVersion":
                return new WorkflowVersion(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "edge", _module)
