// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * The Collection data structure.
 */
export class PrivateStoreCollection extends pulumi.CustomResource {
    /**
     * Get an existing PrivateStoreCollection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PrivateStoreCollection {
        return new PrivateStoreCollection(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:marketplace/v20210601:PrivateStoreCollection';

    /**
     * Returns true if the given object is an instance of PrivateStoreCollection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateStoreCollection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateStoreCollection.__pulumiType;
    }

    /**
     * Indicating whether all subscriptions are selected (=true) or not (=false).
     */
    public readonly allSubscriptions!: pulumi.Output<boolean | undefined>;
    /**
     * Gets or sets the association with Commercial's Billing Account.
     */
    public readonly claim!: pulumi.Output<string | undefined>;
    /**
     * Gets collection Id.
     */
    public readonly collectionId!: pulumi.Output<string>;
    /**
     * Gets or sets collection name.
     */
    public readonly collectionName!: pulumi.Output<string | undefined>;
    /**
     * Indicating whether the collection is enabled or disabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Gets the number of offers associated with the collection.
     */
    public /*out*/ readonly numberOfOffers!: pulumi.Output<number>;
    /**
     * Gets or sets subscription ids list. Empty list indicates all subscriptions are selected, null indicates no update is done, explicit list indicates the explicit selected subscriptions. On insert, null is considered as bad request
     */
    public readonly subscriptionsList!: pulumi.Output<string[] | undefined>;
    /**
     * Metadata pertaining to creation and last modification of the resource
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.marketplace.v20210601.SystemDataResponse>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a PrivateStoreCollection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateStoreCollectionArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.privateStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateStoreId'");
            }
            inputs["allSubscriptions"] = args ? args.allSubscriptions : undefined;
            inputs["claim"] = args ? args.claim : undefined;
            inputs["collectionId"] = args ? args.collectionId : undefined;
            inputs["collectionName"] = args ? args.collectionName : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["privateStoreId"] = args ? args.privateStoreId : undefined;
            inputs["subscriptionsList"] = args ? args.subscriptionsList : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["numberOfOffers"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["allSubscriptions"] = undefined /*out*/;
            inputs["claim"] = undefined /*out*/;
            inputs["collectionId"] = undefined /*out*/;
            inputs["collectionName"] = undefined /*out*/;
            inputs["enabled"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["numberOfOffers"] = undefined /*out*/;
            inputs["subscriptionsList"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:marketplace/v20210601:PrivateStoreCollection" }, { type: "azure-native:marketplace:PrivateStoreCollection" }, { type: "azure-nextgen:marketplace:PrivateStoreCollection" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PrivateStoreCollection.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a PrivateStoreCollection resource.
 */
export interface PrivateStoreCollectionArgs {
    /**
     * Indicating whether all subscriptions are selected (=true) or not (=false).
     */
    allSubscriptions?: pulumi.Input<boolean>;
    /**
     * Gets or sets the association with Commercial's Billing Account.
     */
    claim?: pulumi.Input<string>;
    /**
     * The collection ID
     */
    collectionId?: pulumi.Input<string>;
    /**
     * Gets or sets collection name.
     */
    collectionName?: pulumi.Input<string>;
    /**
     * Indicating whether the collection is enabled or disabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The store ID - must use the tenant ID
     */
    privateStoreId: pulumi.Input<string>;
    /**
     * Gets or sets subscription ids list. Empty list indicates all subscriptions are selected, null indicates no update is done, explicit list indicates the explicit selected subscriptions. On insert, null is considered as bad request
     */
    subscriptionsList?: pulumi.Input<pulumi.Input<string>[]>;
}
