// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The privateStore offer data structure.
 * API Version: 2020-01-01.
 */
export class PrivateStoreOffer extends pulumi.CustomResource {
    /**
     * Get an existing PrivateStoreOffer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PrivateStoreOffer {
        return new PrivateStoreOffer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:marketplace:PrivateStoreOffer';

    /**
     * Returns true if the given object is an instance of PrivateStoreOffer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateStoreOffer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateStoreOffer.__pulumiType;
    }

    /**
     * Private store offer creation date
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Identifier for purposes of race condition
     */
    public readonly eTag!: pulumi.Output<string | undefined>;
    /**
     * Icon File Uris
     */
    public readonly iconFileUris!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Private store offer modification date
     */
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * It will be displayed prominently in the marketplace
     */
    public /*out*/ readonly offerDisplayName!: pulumi.Output<string>;
    /**
     * Offer plans
     */
    public readonly plans!: pulumi.Output<outputs.marketplace.PlanResponse[] | undefined>;
    /**
     * Private store unique id
     */
    public readonly privateStoreId!: pulumi.Output<string>;
    /**
     * Publisher name that will be displayed prominently in the marketplace
     */
    public /*out*/ readonly publisherDisplayName!: pulumi.Output<string>;
    /**
     * Plan ids limitation for this offer
     */
    public readonly specificPlanIdsLimitation!: pulumi.Output<string[] | undefined>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Offers unique id
     */
    public /*out*/ readonly uniqueOfferId!: pulumi.Output<string>;
    /**
     * Indicating whether the offer was not updated to db (true = not updated). If the allow list is identical to the existed one in db, the offer would not be updated.
     */
    public readonly updateSuppressedDueIdempotence!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PrivateStoreOffer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateStoreOfferArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.privateStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateStoreId'");
            }
            resourceInputs["eTag"] = args ? args.eTag : undefined;
            resourceInputs["iconFileUris"] = args ? args.iconFileUris : undefined;
            resourceInputs["offerId"] = args ? args.offerId : undefined;
            resourceInputs["plans"] = args ? args.plans : undefined;
            resourceInputs["privateStoreId"] = args ? args.privateStoreId : undefined;
            resourceInputs["specificPlanIdsLimitation"] = args ? args.specificPlanIdsLimitation : undefined;
            resourceInputs["updateSuppressedDueIdempotence"] = args ? args.updateSuppressedDueIdempotence : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["offerDisplayName"] = undefined /*out*/;
            resourceInputs["publisherDisplayName"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uniqueOfferId"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["eTag"] = undefined /*out*/;
            resourceInputs["iconFileUris"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["offerDisplayName"] = undefined /*out*/;
            resourceInputs["plans"] = undefined /*out*/;
            resourceInputs["privateStoreId"] = undefined /*out*/;
            resourceInputs["publisherDisplayName"] = undefined /*out*/;
            resourceInputs["specificPlanIdsLimitation"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uniqueOfferId"] = undefined /*out*/;
            resourceInputs["updateSuppressedDueIdempotence"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:marketplace/v20200101:PrivateStoreOffer" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PrivateStoreOffer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PrivateStoreOffer resource.
 */
export interface PrivateStoreOfferArgs {
    /**
     * Identifier for purposes of race condition
     */
    eTag?: pulumi.Input<string>;
    /**
     * Icon File Uris
     */
    iconFileUris?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The offer ID to update or delete
     */
    offerId?: pulumi.Input<string>;
    /**
     * Offer plans
     */
    plans?: pulumi.Input<pulumi.Input<inputs.marketplace.PlanArgs>[]>;
    /**
     * The store ID - must use the tenant ID
     */
    privateStoreId: pulumi.Input<string>;
    /**
     * Plan ids limitation for this offer
     */
    specificPlanIdsLimitation?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicating whether the offer was not updated to db (true = not updated). If the allow list is identical to the existed one in db, the offer would not be updated.
     */
    updateSuppressedDueIdempotence?: pulumi.Input<boolean>;
}
