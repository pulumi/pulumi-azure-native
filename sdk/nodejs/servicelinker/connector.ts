// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Linker of source and target resource
 *
 * Uses Azure REST API version 2024-04-01. In version 2.x of the Azure Native provider, it used API version 2022-11-01-preview.
 *
 * Other available API versions: 2022-11-01-preview, 2023-04-01-preview, 2024-07-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native servicelinker [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:servicelinker:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }

    /**
     * The authentication type.
     */
    declare public readonly authInfo: pulumi.Output<outputs.servicelinker.AccessKeyInfoBaseResponse | outputs.servicelinker.EasyAuthMicrosoftEntraIDAuthInfoResponse | outputs.servicelinker.SecretAuthInfoResponse | outputs.servicelinker.ServicePrincipalCertificateAuthInfoResponse | outputs.servicelinker.ServicePrincipalSecretAuthInfoResponse | outputs.servicelinker.SystemAssignedIdentityAuthInfoResponse | outputs.servicelinker.UserAccountAuthInfoResponse | outputs.servicelinker.UserAssignedIdentityAuthInfoResponse | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The application client type
     */
    declare public readonly clientType: pulumi.Output<string | undefined>;
    /**
     * The connection information consumed by applications, including secrets, connection strings.
     */
    declare public readonly configurationInfo: pulumi.Output<outputs.servicelinker.ConfigurationInfoResponse | undefined>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The provisioning state. 
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * The network solution.
     */
    declare public readonly publicNetworkSolution: pulumi.Output<outputs.servicelinker.PublicNetworkSolutionResponse | undefined>;
    /**
     * connection scope in source service.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * An option to store secret value in secure place
     */
    declare public readonly secretStore: pulumi.Output<outputs.servicelinker.SecretStoreResponse | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.servicelinker.SystemDataResponse>;
    /**
     * The target service properties
     */
    declare public readonly targetService: pulumi.Output<outputs.servicelinker.AzureResourceResponse | outputs.servicelinker.ConfluentBootstrapServerResponse | outputs.servicelinker.ConfluentSchemaRegistryResponse | outputs.servicelinker.SelfHostedServerResponse | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The VNet solution.
     */
    declare public readonly vNetSolution: pulumi.Output<outputs.servicelinker.VNetSolutionResponse | undefined>;

    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authInfo"] = args?.authInfo;
            resourceInputs["clientType"] = args?.clientType;
            resourceInputs["configurationInfo"] = args?.configurationInfo;
            resourceInputs["connectorName"] = args?.connectorName;
            resourceInputs["location"] = args?.location;
            resourceInputs["publicNetworkSolution"] = args?.publicNetworkSolution;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["secretStore"] = args?.secretStore;
            resourceInputs["subscriptionId"] = args?.subscriptionId;
            resourceInputs["targetService"] = args?.targetService;
            resourceInputs["vNetSolution"] = args?.vNetSolution;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["authInfo"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["clientType"] = undefined /*out*/;
            resourceInputs["configurationInfo"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["publicNetworkSolution"] = undefined /*out*/;
            resourceInputs["scope"] = undefined /*out*/;
            resourceInputs["secretStore"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["targetService"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["vNetSolution"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:servicelinker/v20221101preview:Connector" }, { type: "azure-native:servicelinker/v20230401preview:Connector" }, { type: "azure-native:servicelinker/v20240401:Connector" }, { type: "azure-native:servicelinker/v20240701preview:Connector" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Connector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    /**
     * The authentication type.
     */
    authInfo?: pulumi.Input<inputs.servicelinker.AccessKeyInfoBaseArgs | inputs.servicelinker.EasyAuthMicrosoftEntraIDAuthInfoArgs | inputs.servicelinker.SecretAuthInfoArgs | inputs.servicelinker.ServicePrincipalCertificateAuthInfoArgs | inputs.servicelinker.ServicePrincipalSecretAuthInfoArgs | inputs.servicelinker.SystemAssignedIdentityAuthInfoArgs | inputs.servicelinker.UserAccountAuthInfoArgs | inputs.servicelinker.UserAssignedIdentityAuthInfoArgs>;
    /**
     * The application client type
     */
    clientType?: pulumi.Input<string | enums.servicelinker.ClientType>;
    /**
     * The connection information consumed by applications, including secrets, connection strings.
     */
    configurationInfo?: pulumi.Input<inputs.servicelinker.ConfigurationInfoArgs>;
    /**
     * The name of resource.
     */
    connectorName?: pulumi.Input<string>;
    /**
     * The name of Azure region.
     */
    location: pulumi.Input<string>;
    /**
     * The network solution.
     */
    publicNetworkSolution?: pulumi.Input<inputs.servicelinker.PublicNetworkSolutionArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * connection scope in source service.
     */
    scope?: pulumi.Input<string>;
    /**
     * An option to store secret value in secure place
     */
    secretStore?: pulumi.Input<inputs.servicelinker.SecretStoreArgs>;
    /**
     * The ID of the target subscription.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * The target service properties
     */
    targetService?: pulumi.Input<inputs.servicelinker.AzureResourceArgs | inputs.servicelinker.ConfluentBootstrapServerArgs | inputs.servicelinker.ConfluentSchemaRegistryArgs | inputs.servicelinker.SelfHostedServerArgs>;
    /**
     * The VNet solution.
     */
    vNetSolution?: pulumi.Input<inputs.servicelinker.VNetSolutionArgs>;
}
