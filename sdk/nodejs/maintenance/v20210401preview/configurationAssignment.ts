// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Configuration Assignment
 */
export class ConfigurationAssignment extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConfigurationAssignment {
        return new ConfigurationAssignment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:maintenance/v20210401preview:ConfigurationAssignment';

    /**
     * Returns true if the given object is an instance of ConfigurationAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationAssignment.__pulumiType;
    }

    /**
     * Location of the resource
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The maintenance configuration Id
     */
    public readonly maintenanceConfigurationId!: pulumi.Output<string | undefined>;
    /**
     * Name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The unique resourceId
     */
    public readonly resourceId!: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.maintenance.v20210401preview.SystemDataResponse>;
    /**
     * Type of the resource
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ConfigurationAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationAssignmentArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if ((!args || args.configurationAssignmentName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'configurationAssignmentName'");
            }
            if ((!args || args.providerName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'providerName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.resourceName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceName'");
            }
            if ((!args || args.resourceType === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resourceType'");
            }
            inputs["configurationAssignmentName"] = args ? args.configurationAssignmentName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maintenanceConfigurationId"] = args ? args.maintenanceConfigurationId : undefined;
            inputs["providerName"] = args ? args.providerName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
            inputs["resourceName"] = args ? args.resourceName : undefined;
            inputs["resourceType"] = args ? args.resourceType : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["location"] = undefined /*out*/;
            inputs["maintenanceConfigurationId"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["resourceId"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ConfigurationAssignment.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConfigurationAssignment resource.
 */
export interface ConfigurationAssignmentArgs {
    /**
     * Configuration assignment name
     */
    readonly configurationAssignmentName: pulumi.Input<string>;
    /**
     * Location of the resource
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The maintenance configuration Id
     */
    readonly maintenanceConfigurationId?: pulumi.Input<string>;
    /**
     * Resource provider name
     */
    readonly providerName: pulumi.Input<string>;
    /**
     * Resource group name
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The unique resourceId
     */
    readonly resourceId?: pulumi.Input<string>;
    /**
     * Resource identifier
     */
    readonly resourceName: pulumi.Input<string>;
    /**
     * Resource type
     */
    readonly resourceType: pulumi.Input<string>;
}
