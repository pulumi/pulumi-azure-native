// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Configuration Assignment
 *
 * Uses Azure REST API version 2023-10-01-preview. In version 2.x of the Azure Native provider, it used API version 2022-11-01-preview.
 *
 * Other available API versions: 2022-11-01-preview, 2023-04-01, 2023-09-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native maintenance [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class ConfigurationAssignment extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConfigurationAssignment {
        return new ConfigurationAssignment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:maintenance:ConfigurationAssignment';

    /**
     * Returns true if the given object is an instance of ConfigurationAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationAssignment.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * Properties of the configuration assignment
     */
    declare public readonly filter: pulumi.Output<outputs.maintenance.ConfigurationAssignmentFilterPropertiesResponse | undefined>;
    /**
     * Location of the resource
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The maintenance configuration Id
     */
    declare public readonly maintenanceConfigurationId: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The unique resourceId
     */
    declare public readonly resourceId: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.maintenance.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a ConfigurationAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationAssignmentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.providerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.resourceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if (args?.resourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["configurationAssignmentName"] = args?.configurationAssignmentName;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["location"] = args?.location;
            resourceInputs["maintenanceConfigurationId"] = args?.maintenanceConfigurationId;
            resourceInputs["providerName"] = args?.providerName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["resourceName"] = args?.resourceName;
            resourceInputs["resourceType"] = args?.resourceType;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["filter"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["maintenanceConfigurationId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:maintenance/v20210401preview:ConfigurationAssignment" }, { type: "azure-native:maintenance/v20210901preview:ConfigurationAssignment" }, { type: "azure-native:maintenance/v20220701preview:ConfigurationAssignment" }, { type: "azure-native:maintenance/v20221101preview:ConfigurationAssignment" }, { type: "azure-native:maintenance/v20230401:ConfigurationAssignment" }, { type: "azure-native:maintenance/v20230901preview:ConfigurationAssignment" }, { type: "azure-native:maintenance/v20231001preview:ConfigurationAssignment" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ConfigurationAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConfigurationAssignment resource.
 */
export interface ConfigurationAssignmentArgs {
    /**
     * The name of the ConfigurationAssignment
     */
    configurationAssignmentName?: pulumi.Input<string>;
    /**
     * Properties of the configuration assignment
     */
    filter?: pulumi.Input<inputs.maintenance.ConfigurationAssignmentFilterPropertiesArgs>;
    /**
     * Location of the resource
     */
    location?: pulumi.Input<string>;
    /**
     * The maintenance configuration Id
     */
    maintenanceConfigurationId?: pulumi.Input<string>;
    /**
     * Resource provider name
     */
    providerName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The unique resourceId
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Resource parent name
     */
    resourceName: pulumi.Input<string>;
    /**
     * Resource parent type
     */
    resourceType: pulumi.Input<string>;
}
