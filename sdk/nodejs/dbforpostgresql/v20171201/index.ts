// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetSingleServerArgs, GetSingleServerResult, GetSingleServerOutputArgs } from "./getSingleServer";
export const getSingleServer: typeof import("./getSingleServer").getSingleServer = null as any;
export const getSingleServerOutput: typeof import("./getSingleServer").getSingleServerOutput = null as any;
utilities.lazyLoad(exports, ["getSingleServer","getSingleServerOutput"], () => require("./getSingleServer"));

export { GetSingleServerDatabaseArgs, GetSingleServerDatabaseResult, GetSingleServerDatabaseOutputArgs } from "./getSingleServerDatabase";
export const getSingleServerDatabase: typeof import("./getSingleServerDatabase").getSingleServerDatabase = null as any;
export const getSingleServerDatabaseOutput: typeof import("./getSingleServerDatabase").getSingleServerDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getSingleServerDatabase","getSingleServerDatabaseOutput"], () => require("./getSingleServerDatabase"));

export { GetSingleServerFirewallRuleArgs, GetSingleServerFirewallRuleResult, GetSingleServerFirewallRuleOutputArgs } from "./getSingleServerFirewallRule";
export const getSingleServerFirewallRule: typeof import("./getSingleServerFirewallRule").getSingleServerFirewallRule = null as any;
export const getSingleServerFirewallRuleOutput: typeof import("./getSingleServerFirewallRule").getSingleServerFirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSingleServerFirewallRule","getSingleServerFirewallRuleOutput"], () => require("./getSingleServerFirewallRule"));

export { GetSingleServerServerAdministratorArgs, GetSingleServerServerAdministratorResult, GetSingleServerServerAdministratorOutputArgs } from "./getSingleServerServerAdministrator";
export const getSingleServerServerAdministrator: typeof import("./getSingleServerServerAdministrator").getSingleServerServerAdministrator = null as any;
export const getSingleServerServerAdministratorOutput: typeof import("./getSingleServerServerAdministrator").getSingleServerServerAdministratorOutput = null as any;
utilities.lazyLoad(exports, ["getSingleServerServerAdministrator","getSingleServerServerAdministratorOutput"], () => require("./getSingleServerServerAdministrator"));

export { GetSingleServerServerSecurityAlertPolicyArgs, GetSingleServerServerSecurityAlertPolicyResult, GetSingleServerServerSecurityAlertPolicyOutputArgs } from "./getSingleServerServerSecurityAlertPolicy";
export const getSingleServerServerSecurityAlertPolicy: typeof import("./getSingleServerServerSecurityAlertPolicy").getSingleServerServerSecurityAlertPolicy = null as any;
export const getSingleServerServerSecurityAlertPolicyOutput: typeof import("./getSingleServerServerSecurityAlertPolicy").getSingleServerServerSecurityAlertPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSingleServerServerSecurityAlertPolicy","getSingleServerServerSecurityAlertPolicyOutput"], () => require("./getSingleServerServerSecurityAlertPolicy"));

export { GetSingleServerVirtualNetworkRuleArgs, GetSingleServerVirtualNetworkRuleResult, GetSingleServerVirtualNetworkRuleOutputArgs } from "./getSingleServerVirtualNetworkRule";
export const getSingleServerVirtualNetworkRule: typeof import("./getSingleServerVirtualNetworkRule").getSingleServerVirtualNetworkRule = null as any;
export const getSingleServerVirtualNetworkRuleOutput: typeof import("./getSingleServerVirtualNetworkRule").getSingleServerVirtualNetworkRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSingleServerVirtualNetworkRule","getSingleServerVirtualNetworkRuleOutput"], () => require("./getSingleServerVirtualNetworkRule"));

export { SingleServerArgs } from "./singleServer";
export type SingleServer = import("./singleServer").SingleServer;
export const SingleServer: typeof import("./singleServer").SingleServer = null as any;
utilities.lazyLoad(exports, ["SingleServer"], () => require("./singleServer"));

export { SingleServerDatabaseArgs } from "./singleServerDatabase";
export type SingleServerDatabase = import("./singleServerDatabase").SingleServerDatabase;
export const SingleServerDatabase: typeof import("./singleServerDatabase").SingleServerDatabase = null as any;
utilities.lazyLoad(exports, ["SingleServerDatabase"], () => require("./singleServerDatabase"));

export { SingleServerFirewallRuleArgs } from "./singleServerFirewallRule";
export type SingleServerFirewallRule = import("./singleServerFirewallRule").SingleServerFirewallRule;
export const SingleServerFirewallRule: typeof import("./singleServerFirewallRule").SingleServerFirewallRule = null as any;
utilities.lazyLoad(exports, ["SingleServerFirewallRule"], () => require("./singleServerFirewallRule"));

export { SingleServerServerAdministratorArgs } from "./singleServerServerAdministrator";
export type SingleServerServerAdministrator = import("./singleServerServerAdministrator").SingleServerServerAdministrator;
export const SingleServerServerAdministrator: typeof import("./singleServerServerAdministrator").SingleServerServerAdministrator = null as any;
utilities.lazyLoad(exports, ["SingleServerServerAdministrator"], () => require("./singleServerServerAdministrator"));

export { SingleServerServerSecurityAlertPolicyArgs } from "./singleServerServerSecurityAlertPolicy";
export type SingleServerServerSecurityAlertPolicy = import("./singleServerServerSecurityAlertPolicy").SingleServerServerSecurityAlertPolicy;
export const SingleServerServerSecurityAlertPolicy: typeof import("./singleServerServerSecurityAlertPolicy").SingleServerServerSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["SingleServerServerSecurityAlertPolicy"], () => require("./singleServerServerSecurityAlertPolicy"));

export { SingleServerVirtualNetworkRuleArgs } from "./singleServerVirtualNetworkRule";
export type SingleServerVirtualNetworkRule = import("./singleServerVirtualNetworkRule").SingleServerVirtualNetworkRule;
export const SingleServerVirtualNetworkRule: typeof import("./singleServerVirtualNetworkRule").SingleServerVirtualNetworkRule = null as any;
utilities.lazyLoad(exports, ["SingleServerVirtualNetworkRule"], () => require("./singleServerVirtualNetworkRule"));


// Export enums:
export * from "../../types/enums/dbforpostgresql/v20171201";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:dbforpostgresql/v20171201:SingleServer":
                return new SingleServer(name, <any>undefined, { urn })
            case "azure-native:dbforpostgresql/v20171201:SingleServerDatabase":
                return new SingleServerDatabase(name, <any>undefined, { urn })
            case "azure-native:dbforpostgresql/v20171201:SingleServerFirewallRule":
                return new SingleServerFirewallRule(name, <any>undefined, { urn })
            case "azure-native:dbforpostgresql/v20171201:SingleServerServerAdministrator":
                return new SingleServerServerAdministrator(name, <any>undefined, { urn })
            case "azure-native:dbforpostgresql/v20171201:SingleServerServerSecurityAlertPolicy":
                return new SingleServerServerSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azure-native:dbforpostgresql/v20171201:SingleServerVirtualNetworkRule":
                return new SingleServerVirtualNetworkRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "dbforpostgresql/v20171201", _module)
