// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AttachedDatabaseConfigurationArgs } from "./attachedDatabaseConfiguration";
export type AttachedDatabaseConfiguration = import("./attachedDatabaseConfiguration").AttachedDatabaseConfiguration;
export const AttachedDatabaseConfiguration: typeof import("./attachedDatabaseConfiguration").AttachedDatabaseConfiguration = null as any;

export { ClusterArgs } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;

export { ClusterPrincipalAssignmentArgs } from "./clusterPrincipalAssignment";
export type ClusterPrincipalAssignment = import("./clusterPrincipalAssignment").ClusterPrincipalAssignment;
export const ClusterPrincipalAssignment: typeof import("./clusterPrincipalAssignment").ClusterPrincipalAssignment = null as any;

export { DataConnectionArgs } from "./dataConnection";
export type DataConnection = import("./dataConnection").DataConnection;
export const DataConnection: typeof import("./dataConnection").DataConnection = null as any;

export { DatabaseArgs } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;

export { DatabasePrincipalAssignmentArgs } from "./databasePrincipalAssignment";
export type DatabasePrincipalAssignment = import("./databasePrincipalAssignment").DatabasePrincipalAssignment;
export const DatabasePrincipalAssignment: typeof import("./databasePrincipalAssignment").DatabasePrincipalAssignment = null as any;

export { EventGridDataConnectionArgs } from "./eventGridDataConnection";
export type EventGridDataConnection = import("./eventGridDataConnection").EventGridDataConnection;
export const EventGridDataConnection: typeof import("./eventGridDataConnection").EventGridDataConnection = null as any;

export { EventHubConnectionArgs } from "./eventHubConnection";
export type EventHubConnection = import("./eventHubConnection").EventHubConnection;
export const EventHubConnection: typeof import("./eventHubConnection").EventHubConnection = null as any;

export { EventHubDataConnectionArgs } from "./eventHubDataConnection";
export type EventHubDataConnection = import("./eventHubDataConnection").EventHubDataConnection;
export const EventHubDataConnection: typeof import("./eventHubDataConnection").EventHubDataConnection = null as any;

export { GetAttachedDatabaseConfigurationArgs, GetAttachedDatabaseConfigurationResult, GetAttachedDatabaseConfigurationOutputArgs } from "./getAttachedDatabaseConfiguration";
export const getAttachedDatabaseConfiguration: typeof import("./getAttachedDatabaseConfiguration").getAttachedDatabaseConfiguration = null as any;
export const getAttachedDatabaseConfigurationOutput: typeof import("./getAttachedDatabaseConfiguration").getAttachedDatabaseConfigurationOutput = null as any;

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;

export { GetClusterPrincipalAssignmentArgs, GetClusterPrincipalAssignmentResult, GetClusterPrincipalAssignmentOutputArgs } from "./getClusterPrincipalAssignment";
export const getClusterPrincipalAssignment: typeof import("./getClusterPrincipalAssignment").getClusterPrincipalAssignment = null as any;
export const getClusterPrincipalAssignmentOutput: typeof import("./getClusterPrincipalAssignment").getClusterPrincipalAssignmentOutput = null as any;

export { GetDataConnectionArgs, GetDataConnectionResult, GetDataConnectionOutputArgs } from "./getDataConnection";
export const getDataConnection: typeof import("./getDataConnection").getDataConnection = null as any;
export const getDataConnectionOutput: typeof import("./getDataConnection").getDataConnectionOutput = null as any;

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;

export { GetDatabasePrincipalAssignmentArgs, GetDatabasePrincipalAssignmentResult, GetDatabasePrincipalAssignmentOutputArgs } from "./getDatabasePrincipalAssignment";
export const getDatabasePrincipalAssignment: typeof import("./getDatabasePrincipalAssignment").getDatabasePrincipalAssignment = null as any;
export const getDatabasePrincipalAssignmentOutput: typeof import("./getDatabasePrincipalAssignment").getDatabasePrincipalAssignmentOutput = null as any;

export { GetEventGridDataConnectionArgs, GetEventGridDataConnectionResult, GetEventGridDataConnectionOutputArgs } from "./getEventGridDataConnection";
export const getEventGridDataConnection: typeof import("./getEventGridDataConnection").getEventGridDataConnection = null as any;
export const getEventGridDataConnectionOutput: typeof import("./getEventGridDataConnection").getEventGridDataConnectionOutput = null as any;

export { GetEventHubConnectionArgs, GetEventHubConnectionResult, GetEventHubConnectionOutputArgs } from "./getEventHubConnection";
export const getEventHubConnection: typeof import("./getEventHubConnection").getEventHubConnection = null as any;
export const getEventHubConnectionOutput: typeof import("./getEventHubConnection").getEventHubConnectionOutput = null as any;

export { GetEventHubDataConnectionArgs, GetEventHubDataConnectionResult, GetEventHubDataConnectionOutputArgs } from "./getEventHubDataConnection";
export const getEventHubDataConnection: typeof import("./getEventHubDataConnection").getEventHubDataConnection = null as any;
export const getEventHubDataConnectionOutput: typeof import("./getEventHubDataConnection").getEventHubDataConnectionOutput = null as any;

export { GetIotHubDataConnectionArgs, GetIotHubDataConnectionResult, GetIotHubDataConnectionOutputArgs } from "./getIotHubDataConnection";
export const getIotHubDataConnection: typeof import("./getIotHubDataConnection").getIotHubDataConnection = null as any;
export const getIotHubDataConnectionOutput: typeof import("./getIotHubDataConnection").getIotHubDataConnectionOutput = null as any;

export { GetManagedPrivateEndpointArgs, GetManagedPrivateEndpointResult, GetManagedPrivateEndpointOutputArgs } from "./getManagedPrivateEndpoint";
export const getManagedPrivateEndpoint: typeof import("./getManagedPrivateEndpoint").getManagedPrivateEndpoint = null as any;
export const getManagedPrivateEndpointOutput: typeof import("./getManagedPrivateEndpoint").getManagedPrivateEndpointOutput = null as any;

export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;

export { GetReadOnlyFollowingDatabaseArgs, GetReadOnlyFollowingDatabaseResult, GetReadOnlyFollowingDatabaseOutputArgs } from "./getReadOnlyFollowingDatabase";
export const getReadOnlyFollowingDatabase: typeof import("./getReadOnlyFollowingDatabase").getReadOnlyFollowingDatabase = null as any;
export const getReadOnlyFollowingDatabaseOutput: typeof import("./getReadOnlyFollowingDatabase").getReadOnlyFollowingDatabaseOutput = null as any;

export { GetReadWriteDatabaseArgs, GetReadWriteDatabaseResult, GetReadWriteDatabaseOutputArgs } from "./getReadWriteDatabase";
export const getReadWriteDatabase: typeof import("./getReadWriteDatabase").getReadWriteDatabase = null as any;
export const getReadWriteDatabaseOutput: typeof import("./getReadWriteDatabase").getReadWriteDatabaseOutput = null as any;

export { GetScriptArgs, GetScriptResult, GetScriptOutputArgs } from "./getScript";
export const getScript: typeof import("./getScript").getScript = null as any;
export const getScriptOutput: typeof import("./getScript").getScriptOutput = null as any;

export { IotHubDataConnectionArgs } from "./iotHubDataConnection";
export type IotHubDataConnection = import("./iotHubDataConnection").IotHubDataConnection;
export const IotHubDataConnection: typeof import("./iotHubDataConnection").IotHubDataConnection = null as any;

export { ListClusterFollowerDatabasesArgs, ListClusterFollowerDatabasesResult, ListClusterFollowerDatabasesOutputArgs } from "./listClusterFollowerDatabases";
export const listClusterFollowerDatabases: typeof import("./listClusterFollowerDatabases").listClusterFollowerDatabases = null as any;
export const listClusterFollowerDatabasesOutput: typeof import("./listClusterFollowerDatabases").listClusterFollowerDatabasesOutput = null as any;

export { ListClusterLanguageExtensionsArgs, ListClusterLanguageExtensionsResult, ListClusterLanguageExtensionsOutputArgs } from "./listClusterLanguageExtensions";
export const listClusterLanguageExtensions: typeof import("./listClusterLanguageExtensions").listClusterLanguageExtensions = null as any;
export const listClusterLanguageExtensionsOutput: typeof import("./listClusterLanguageExtensions").listClusterLanguageExtensionsOutput = null as any;

export { ListDatabasePrincipalsArgs, ListDatabasePrincipalsResult, ListDatabasePrincipalsOutputArgs } from "./listDatabasePrincipals";
export const listDatabasePrincipals: typeof import("./listDatabasePrincipals").listDatabasePrincipals = null as any;
export const listDatabasePrincipalsOutput: typeof import("./listDatabasePrincipals").listDatabasePrincipalsOutput = null as any;

export { ManagedPrivateEndpointArgs } from "./managedPrivateEndpoint";
export type ManagedPrivateEndpoint = import("./managedPrivateEndpoint").ManagedPrivateEndpoint;
export const ManagedPrivateEndpoint: typeof import("./managedPrivateEndpoint").ManagedPrivateEndpoint = null as any;

export { PrivateEndpointConnectionArgs } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;

export { ReadOnlyFollowingDatabaseArgs } from "./readOnlyFollowingDatabase";
export type ReadOnlyFollowingDatabase = import("./readOnlyFollowingDatabase").ReadOnlyFollowingDatabase;
export const ReadOnlyFollowingDatabase: typeof import("./readOnlyFollowingDatabase").ReadOnlyFollowingDatabase = null as any;

export { ReadWriteDatabaseArgs } from "./readWriteDatabase";
export type ReadWriteDatabase = import("./readWriteDatabase").ReadWriteDatabase;
export const ReadWriteDatabase: typeof import("./readWriteDatabase").ReadWriteDatabase = null as any;

export { ScriptArgs } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;

utilities.lazyLoad(exports, ["AttachedDatabaseConfiguration"], () => require("./attachedDatabaseConfiguration"));
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
utilities.lazyLoad(exports, ["ClusterPrincipalAssignment"], () => require("./clusterPrincipalAssignment"));
utilities.lazyLoad(exports, ["DataConnection"], () => require("./dataConnection"));
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
utilities.lazyLoad(exports, ["DatabasePrincipalAssignment"], () => require("./databasePrincipalAssignment"));
utilities.lazyLoad(exports, ["EventGridDataConnection"], () => require("./eventGridDataConnection"));
utilities.lazyLoad(exports, ["EventHubConnection"], () => require("./eventHubConnection"));
utilities.lazyLoad(exports, ["EventHubDataConnection"], () => require("./eventHubDataConnection"));
utilities.lazyLoad(exports, ["getAttachedDatabaseConfiguration","getAttachedDatabaseConfigurationOutput"], () => require("./getAttachedDatabaseConfiguration"));
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));
utilities.lazyLoad(exports, ["getClusterPrincipalAssignment","getClusterPrincipalAssignmentOutput"], () => require("./getClusterPrincipalAssignment"));
utilities.lazyLoad(exports, ["getDataConnection","getDataConnectionOutput"], () => require("./getDataConnection"));
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));
utilities.lazyLoad(exports, ["getDatabasePrincipalAssignment","getDatabasePrincipalAssignmentOutput"], () => require("./getDatabasePrincipalAssignment"));
utilities.lazyLoad(exports, ["getEventGridDataConnection","getEventGridDataConnectionOutput"], () => require("./getEventGridDataConnection"));
utilities.lazyLoad(exports, ["getEventHubConnection","getEventHubConnectionOutput"], () => require("./getEventHubConnection"));
utilities.lazyLoad(exports, ["getEventHubDataConnection","getEventHubDataConnectionOutput"], () => require("./getEventHubDataConnection"));
utilities.lazyLoad(exports, ["getIotHubDataConnection","getIotHubDataConnectionOutput"], () => require("./getIotHubDataConnection"));
utilities.lazyLoad(exports, ["getManagedPrivateEndpoint","getManagedPrivateEndpointOutput"], () => require("./getManagedPrivateEndpoint"));
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));
utilities.lazyLoad(exports, ["getReadOnlyFollowingDatabase","getReadOnlyFollowingDatabaseOutput"], () => require("./getReadOnlyFollowingDatabase"));
utilities.lazyLoad(exports, ["getReadWriteDatabase","getReadWriteDatabaseOutput"], () => require("./getReadWriteDatabase"));
utilities.lazyLoad(exports, ["getScript","getScriptOutput"], () => require("./getScript"));
utilities.lazyLoad(exports, ["IotHubDataConnection"], () => require("./iotHubDataConnection"));
utilities.lazyLoad(exports, ["listClusterFollowerDatabases","listClusterFollowerDatabasesOutput"], () => require("./listClusterFollowerDatabases"));
utilities.lazyLoad(exports, ["listClusterLanguageExtensions","listClusterLanguageExtensionsOutput"], () => require("./listClusterLanguageExtensions"));
utilities.lazyLoad(exports, ["listDatabasePrincipals","listDatabasePrincipalsOutput"], () => require("./listDatabasePrincipals"));
utilities.lazyLoad(exports, ["ManagedPrivateEndpoint"], () => require("./managedPrivateEndpoint"));
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));
utilities.lazyLoad(exports, ["ReadOnlyFollowingDatabase"], () => require("./readOnlyFollowingDatabase"));
utilities.lazyLoad(exports, ["ReadWriteDatabase"], () => require("./readWriteDatabase"));
utilities.lazyLoad(exports, ["Script"], () => require("./script"));

// Export enums:
export * from "../types/enums/kusto";

// Export sub-modules:
import * as v20170907privatepreview from "./v20170907privatepreview";
import * as v20180907preview from "./v20180907preview";
import * as v20190121 from "./v20190121";
import * as v20190515 from "./v20190515";
import * as v20190907 from "./v20190907";
import * as v20191109 from "./v20191109";
import * as v20200215 from "./v20200215";
import * as v20200614 from "./v20200614";
import * as v20200918 from "./v20200918";
import * as v20210101 from "./v20210101";
import * as v20210827 from "./v20210827";
import * as v20220201 from "./v20220201";
import * as v20220707 from "./v20220707";

export {
    v20170907privatepreview,
    v20180907preview,
    v20190121,
    v20190515,
    v20190907,
    v20191109,
    v20200215,
    v20200614,
    v20200918,
    v20210101,
    v20210827,
    v20220201,
    v20220707,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:kusto:AttachedDatabaseConfiguration":
                return new AttachedDatabaseConfiguration(name, <any>undefined, { urn })
            case "azure-native:kusto:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "azure-native:kusto:ClusterPrincipalAssignment":
                return new ClusterPrincipalAssignment(name, <any>undefined, { urn })
            case "azure-native:kusto:DataConnection":
                return new DataConnection(name, <any>undefined, { urn })
            case "azure-native:kusto:Database":
                return new Database(name, <any>undefined, { urn })
            case "azure-native:kusto:DatabasePrincipalAssignment":
                return new DatabasePrincipalAssignment(name, <any>undefined, { urn })
            case "azure-native:kusto:EventGridDataConnection":
                return new EventGridDataConnection(name, <any>undefined, { urn })
            case "azure-native:kusto:EventHubConnection":
                return new EventHubConnection(name, <any>undefined, { urn })
            case "azure-native:kusto:EventHubDataConnection":
                return new EventHubDataConnection(name, <any>undefined, { urn })
            case "azure-native:kusto:IotHubDataConnection":
                return new IotHubDataConnection(name, <any>undefined, { urn })
            case "azure-native:kusto:ManagedPrivateEndpoint":
                return new ManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azure-native:kusto:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "azure-native:kusto:ReadOnlyFollowingDatabase":
                return new ReadOnlyFollowingDatabase(name, <any>undefined, { urn })
            case "azure-native:kusto:ReadWriteDatabase":
                return new ReadWriteDatabase(name, <any>undefined, { urn })
            case "azure-native:kusto:Script":
                return new Script(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "kusto", _module)
