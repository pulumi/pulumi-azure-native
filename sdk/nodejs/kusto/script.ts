// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Class representing a database script.
 * API Version: 2021-01-01.
 */
export class Script extends pulumi.CustomResource {
    /**
     * Get an existing Script resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Script {
        return new Script(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:kusto:Script';

    /**
     * Returns true if the given object is an instance of Script.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Script {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Script.__pulumiType;
    }

    /**
     * Flag that indicates whether to continue if one of the command fails.
     */
    public readonly continueOnErrors!: pulumi.Output<boolean | undefined>;
    /**
     * A unique string. If changed the script will be applied again.
     */
    public readonly forceUpdateTag!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The provisioned state of the resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The url to the KQL script blob file.
     */
    public readonly scriptUrl!: pulumi.Output<string>;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.kusto.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Script resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScriptArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scriptUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scriptUrl'");
            }
            if ((!args || args.scriptUrlSasToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scriptUrlSasToken'");
            }
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["continueOnErrors"] = (args ? args.continueOnErrors : undefined) ?? false;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["forceUpdateTag"] = args ? args.forceUpdateTag : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scriptName"] = args ? args.scriptName : undefined;
            inputs["scriptUrl"] = args ? args.scriptUrl : undefined;
            inputs["scriptUrlSasToken"] = args ? args.scriptUrlSasToken : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["continueOnErrors"] = undefined /*out*/;
            inputs["forceUpdateTag"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["scriptUrl"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:kusto:Script" }, { type: "azure-native:kusto/v20210101:Script" }, { type: "azure-nextgen:kusto/v20210101:Script" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Script.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Script resource.
 */
export interface ScriptArgs {
    /**
     * The name of the Kusto cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Flag that indicates whether to continue if one of the command fails.
     */
    continueOnErrors?: pulumi.Input<boolean>;
    /**
     * The name of the database in the Kusto cluster.
     */
    databaseName: pulumi.Input<string>;
    /**
     * A unique string. If changed the script will be applied again.
     */
    forceUpdateTag?: pulumi.Input<string>;
    /**
     * The name of the resource group containing the Kusto cluster.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the Kusto database script.
     */
    scriptName?: pulumi.Input<string>;
    /**
     * The url to the KQL script blob file.
     */
    scriptUrl: pulumi.Input<string>;
    /**
     * The SaS token.
     */
    scriptUrlSasToken: pulumi.Input<string>;
}
