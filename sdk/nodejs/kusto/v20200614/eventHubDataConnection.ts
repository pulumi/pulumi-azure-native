// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Class representing an event hub data connection.
 */
export class EventHubDataConnection extends pulumi.CustomResource {
    /**
     * Get an existing EventHubDataConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventHubDataConnection {
        return new EventHubDataConnection(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:kusto/v20200614:EventHubDataConnection';

    /**
     * Returns true if the given object is an instance of EventHubDataConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventHubDataConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventHubDataConnection.__pulumiType;
    }

    /**
     * The event hub messages compression type
     */
    public readonly compression!: pulumi.Output<string | undefined>;
    /**
     * The event hub consumer group.
     */
    public readonly consumerGroup!: pulumi.Output<string>;
    /**
     * The data format of the message. Optionally the data format can be added to each message.
     */
    public readonly dataFormat!: pulumi.Output<string | undefined>;
    /**
     * The resource ID of the event hub to be used to create a data connection.
     */
    public readonly eventHubResourceId!: pulumi.Output<string>;
    /**
     * System properties of the event hub
     */
    public readonly eventSystemProperties!: pulumi.Output<string[] | undefined>;
    /**
     * Kind of the endpoint for the data connection
     * Expected value is 'EventHub'.
     */
    public readonly kind!: pulumi.Output<"EventHub">;
    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
     */
    public readonly mappingRuleName!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The table where the data should be ingested. Optionally the table information can be added to each message.
     */
    public readonly tableName!: pulumi.Output<string | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a EventHubDataConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventHubDataConnectionArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.consumerGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerGroup'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.eventHubResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventHubResourceId'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["compression"] = args ? args.compression : undefined;
            inputs["consumerGroup"] = args ? args.consumerGroup : undefined;
            inputs["dataConnectionName"] = args ? args.dataConnectionName : undefined;
            inputs["dataFormat"] = args ? args.dataFormat : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["eventHubResourceId"] = args ? args.eventHubResourceId : undefined;
            inputs["eventSystemProperties"] = args ? args.eventSystemProperties : undefined;
            inputs["kind"] = "EventHub";
            inputs["location"] = args ? args.location : undefined;
            inputs["mappingRuleName"] = args ? args.mappingRuleName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tableName"] = args ? args.tableName : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["compression"] = undefined /*out*/;
            inputs["consumerGroup"] = undefined /*out*/;
            inputs["dataFormat"] = undefined /*out*/;
            inputs["eventHubResourceId"] = undefined /*out*/;
            inputs["eventSystemProperties"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["mappingRuleName"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["tableName"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:kusto/v20200614:EventHubDataConnection" }, { type: "azure-native:kusto:EventHubDataConnection" }, { type: "azure-nextgen:kusto:EventHubDataConnection" }, { type: "azure-native:kusto/v20190121:EventHubDataConnection" }, { type: "azure-nextgen:kusto/v20190121:EventHubDataConnection" }, { type: "azure-native:kusto/v20190515:EventHubDataConnection" }, { type: "azure-nextgen:kusto/v20190515:EventHubDataConnection" }, { type: "azure-native:kusto/v20190907:EventHubDataConnection" }, { type: "azure-nextgen:kusto/v20190907:EventHubDataConnection" }, { type: "azure-native:kusto/v20191109:EventHubDataConnection" }, { type: "azure-nextgen:kusto/v20191109:EventHubDataConnection" }, { type: "azure-native:kusto/v20200215:EventHubDataConnection" }, { type: "azure-nextgen:kusto/v20200215:EventHubDataConnection" }, { type: "azure-native:kusto/v20200918:EventHubDataConnection" }, { type: "azure-nextgen:kusto/v20200918:EventHubDataConnection" }, { type: "azure-native:kusto/v20210101:EventHubDataConnection" }, { type: "azure-nextgen:kusto/v20210101:EventHubDataConnection" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(EventHubDataConnection.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a EventHubDataConnection resource.
 */
export interface EventHubDataConnectionArgs {
    /**
     * The name of the Kusto cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The event hub messages compression type
     */
    compression?: pulumi.Input<string | enums.kusto.v20200614.Compression>;
    /**
     * The event hub consumer group.
     */
    consumerGroup: pulumi.Input<string>;
    /**
     * The name of the data connection.
     */
    dataConnectionName?: pulumi.Input<string>;
    /**
     * The data format of the message. Optionally the data format can be added to each message.
     */
    dataFormat?: pulumi.Input<string | enums.kusto.v20200614.EventHubDataFormat>;
    /**
     * The name of the database in the Kusto cluster.
     */
    databaseName: pulumi.Input<string>;
    /**
     * The resource ID of the event hub to be used to create a data connection.
     */
    eventHubResourceId: pulumi.Input<string>;
    /**
     * System properties of the event hub
     */
    eventSystemProperties?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind of the endpoint for the data connection
     * Expected value is 'EventHub'.
     */
    kind: pulumi.Input<"EventHub">;
    /**
     * Resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
     */
    mappingRuleName?: pulumi.Input<string>;
    /**
     * The name of the resource group containing the Kusto cluster.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The table where the data should be ingested. Optionally the table information can be added to each message.
     */
    tableName?: pulumi.Input<string>;
}
