// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AccessControlRecordArgs } from "./accessControlRecord";
export type AccessControlRecord = import("./accessControlRecord").AccessControlRecord;
export const AccessControlRecord: typeof import("./accessControlRecord").AccessControlRecord = null as any;
utilities.lazyLoad(exports, ["AccessControlRecord"], () => require("./accessControlRecord"));

export { BackupScheduleGroupArgs } from "./backupScheduleGroup";
export type BackupScheduleGroup = import("./backupScheduleGroup").BackupScheduleGroup;
export const BackupScheduleGroup: typeof import("./backupScheduleGroup").BackupScheduleGroup = null as any;
utilities.lazyLoad(exports, ["BackupScheduleGroup"], () => require("./backupScheduleGroup"));

export { ChapSettingArgs } from "./chapSetting";
export type ChapSetting = import("./chapSetting").ChapSetting;
export const ChapSetting: typeof import("./chapSetting").ChapSetting = null as any;
utilities.lazyLoad(exports, ["ChapSetting"], () => require("./chapSetting"));

export { FileServerArgs } from "./fileServer";
export type FileServer = import("./fileServer").FileServer;
export const FileServer: typeof import("./fileServer").FileServer = null as any;
utilities.lazyLoad(exports, ["FileServer"], () => require("./fileServer"));

export { FileShareArgs } from "./fileShare";
export type FileShare = import("./fileShare").FileShare;
export const FileShare: typeof import("./fileShare").FileShare = null as any;
utilities.lazyLoad(exports, ["FileShare"], () => require("./fileShare"));

export { GetAccessControlRecordArgs, GetAccessControlRecordResult, GetAccessControlRecordOutputArgs } from "./getAccessControlRecord";
export const getAccessControlRecord: typeof import("./getAccessControlRecord").getAccessControlRecord = null as any;
export const getAccessControlRecordOutput: typeof import("./getAccessControlRecord").getAccessControlRecordOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlRecord","getAccessControlRecordOutput"], () => require("./getAccessControlRecord"));

export { GetBackupScheduleGroupArgs, GetBackupScheduleGroupResult, GetBackupScheduleGroupOutputArgs } from "./getBackupScheduleGroup";
export const getBackupScheduleGroup: typeof import("./getBackupScheduleGroup").getBackupScheduleGroup = null as any;
export const getBackupScheduleGroupOutput: typeof import("./getBackupScheduleGroup").getBackupScheduleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getBackupScheduleGroup","getBackupScheduleGroupOutput"], () => require("./getBackupScheduleGroup"));

export { GetChapSettingArgs, GetChapSettingResult, GetChapSettingOutputArgs } from "./getChapSetting";
export const getChapSetting: typeof import("./getChapSetting").getChapSetting = null as any;
export const getChapSettingOutput: typeof import("./getChapSetting").getChapSettingOutput = null as any;
utilities.lazyLoad(exports, ["getChapSetting","getChapSettingOutput"], () => require("./getChapSetting"));

export { GetFileServerArgs, GetFileServerResult, GetFileServerOutputArgs } from "./getFileServer";
export const getFileServer: typeof import("./getFileServer").getFileServer = null as any;
export const getFileServerOutput: typeof import("./getFileServer").getFileServerOutput = null as any;
utilities.lazyLoad(exports, ["getFileServer","getFileServerOutput"], () => require("./getFileServer"));

export { GetFileShareArgs, GetFileShareResult, GetFileShareOutputArgs } from "./getFileShare";
export const getFileShare: typeof import("./getFileShare").getFileShare = null as any;
export const getFileShareOutput: typeof import("./getFileShare").getFileShareOutput = null as any;
utilities.lazyLoad(exports, ["getFileShare","getFileShareOutput"], () => require("./getFileShare"));

export { GetIscsiDiskArgs, GetIscsiDiskResult, GetIscsiDiskOutputArgs } from "./getIscsiDisk";
export const getIscsiDisk: typeof import("./getIscsiDisk").getIscsiDisk = null as any;
export const getIscsiDiskOutput: typeof import("./getIscsiDisk").getIscsiDiskOutput = null as any;
utilities.lazyLoad(exports, ["getIscsiDisk","getIscsiDiskOutput"], () => require("./getIscsiDisk"));

export { GetIscsiServerArgs, GetIscsiServerResult, GetIscsiServerOutputArgs } from "./getIscsiServer";
export const getIscsiServer: typeof import("./getIscsiServer").getIscsiServer = null as any;
export const getIscsiServerOutput: typeof import("./getIscsiServer").getIscsiServerOutput = null as any;
utilities.lazyLoad(exports, ["getIscsiServer","getIscsiServerOutput"], () => require("./getIscsiServer"));

export { GetManagerArgs, GetManagerResult, GetManagerOutputArgs } from "./getManager";
export const getManager: typeof import("./getManager").getManager = null as any;
export const getManagerOutput: typeof import("./getManager").getManagerOutput = null as any;
utilities.lazyLoad(exports, ["getManager","getManagerOutput"], () => require("./getManager"));

export { GetManagerEncryptionKeyArgs, GetManagerEncryptionKeyResult, GetManagerEncryptionKeyOutputArgs } from "./getManagerEncryptionKey";
export const getManagerEncryptionKey: typeof import("./getManagerEncryptionKey").getManagerEncryptionKey = null as any;
export const getManagerEncryptionKeyOutput: typeof import("./getManagerEncryptionKey").getManagerEncryptionKeyOutput = null as any;
utilities.lazyLoad(exports, ["getManagerEncryptionKey","getManagerEncryptionKeyOutput"], () => require("./getManagerEncryptionKey"));

export { GetManagerExtendedInfoArgs, GetManagerExtendedInfoResult, GetManagerExtendedInfoOutputArgs } from "./getManagerExtendedInfo";
export const getManagerExtendedInfo: typeof import("./getManagerExtendedInfo").getManagerExtendedInfo = null as any;
export const getManagerExtendedInfoOutput: typeof import("./getManagerExtendedInfo").getManagerExtendedInfoOutput = null as any;
utilities.lazyLoad(exports, ["getManagerExtendedInfo","getManagerExtendedInfoOutput"], () => require("./getManagerExtendedInfo"));

export { GetStorageAccountCredentialArgs, GetStorageAccountCredentialResult, GetStorageAccountCredentialOutputArgs } from "./getStorageAccountCredential";
export const getStorageAccountCredential: typeof import("./getStorageAccountCredential").getStorageAccountCredential = null as any;
export const getStorageAccountCredentialOutput: typeof import("./getStorageAccountCredential").getStorageAccountCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getStorageAccountCredential","getStorageAccountCredentialOutput"], () => require("./getStorageAccountCredential"));

export { GetStorageDomainArgs, GetStorageDomainResult, GetStorageDomainOutputArgs } from "./getStorageDomain";
export const getStorageDomain: typeof import("./getStorageDomain").getStorageDomain = null as any;
export const getStorageDomainOutput: typeof import("./getStorageDomain").getStorageDomainOutput = null as any;
utilities.lazyLoad(exports, ["getStorageDomain","getStorageDomainOutput"], () => require("./getStorageDomain"));

export { IscsiDiskArgs } from "./iscsiDisk";
export type IscsiDisk = import("./iscsiDisk").IscsiDisk;
export const IscsiDisk: typeof import("./iscsiDisk").IscsiDisk = null as any;
utilities.lazyLoad(exports, ["IscsiDisk"], () => require("./iscsiDisk"));

export { IscsiServerArgs } from "./iscsiServer";
export type IscsiServer = import("./iscsiServer").IscsiServer;
export const IscsiServer: typeof import("./iscsiServer").IscsiServer = null as any;
utilities.lazyLoad(exports, ["IscsiServer"], () => require("./iscsiServer"));

export { ManagerArgs } from "./manager";
export type Manager = import("./manager").Manager;
export const Manager: typeof import("./manager").Manager = null as any;
utilities.lazyLoad(exports, ["Manager"], () => require("./manager"));

export { ManagerExtendedInfoArgs } from "./managerExtendedInfo";
export type ManagerExtendedInfo = import("./managerExtendedInfo").ManagerExtendedInfo;
export const ManagerExtendedInfo: typeof import("./managerExtendedInfo").ManagerExtendedInfo = null as any;
utilities.lazyLoad(exports, ["ManagerExtendedInfo"], () => require("./managerExtendedInfo"));

export { StorageAccountCredentialArgs } from "./storageAccountCredential";
export type StorageAccountCredential = import("./storageAccountCredential").StorageAccountCredential;
export const StorageAccountCredential: typeof import("./storageAccountCredential").StorageAccountCredential = null as any;
utilities.lazyLoad(exports, ["StorageAccountCredential"], () => require("./storageAccountCredential"));

export { StorageDomainArgs } from "./storageDomain";
export type StorageDomain = import("./storageDomain").StorageDomain;
export const StorageDomain: typeof import("./storageDomain").StorageDomain = null as any;
utilities.lazyLoad(exports, ["StorageDomain"], () => require("./storageDomain"));


// Export enums:
export * from "../../types/enums/storsimple/v20161001";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:storsimple/v20161001:AccessControlRecord":
                return new AccessControlRecord(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:BackupScheduleGroup":
                return new BackupScheduleGroup(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:ChapSetting":
                return new ChapSetting(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:FileServer":
                return new FileServer(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:FileShare":
                return new FileShare(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:IscsiDisk":
                return new IscsiDisk(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:IscsiServer":
                return new IscsiServer(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:Manager":
                return new Manager(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:ManagerExtendedInfo":
                return new ManagerExtendedInfo(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:StorageAccountCredential":
                return new StorageAccountCredential(name, <any>undefined, { urn })
            case "azure-native:storsimple/v20161001:StorageDomain":
                return new StorageDomain(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "storsimple/v20161001", _module)
