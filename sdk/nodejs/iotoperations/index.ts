// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AkriConnectorArgs } from "./akriConnector";
export type AkriConnector = import("./akriConnector").AkriConnector;
export const AkriConnector: typeof import("./akriConnector").AkriConnector = null as any;
utilities.lazyLoad(exports, ["AkriConnector"], () => require("./akriConnector"));

export { AkriConnectorTemplateArgs } from "./akriConnectorTemplate";
export type AkriConnectorTemplate = import("./akriConnectorTemplate").AkriConnectorTemplate;
export const AkriConnectorTemplate: typeof import("./akriConnectorTemplate").AkriConnectorTemplate = null as any;
utilities.lazyLoad(exports, ["AkriConnectorTemplate"], () => require("./akriConnectorTemplate"));

export { BrokerArgs } from "./broker";
export type Broker = import("./broker").Broker;
export const Broker: typeof import("./broker").Broker = null as any;
utilities.lazyLoad(exports, ["Broker"], () => require("./broker"));

export { BrokerAuthenticationArgs } from "./brokerAuthentication";
export type BrokerAuthentication = import("./brokerAuthentication").BrokerAuthentication;
export const BrokerAuthentication: typeof import("./brokerAuthentication").BrokerAuthentication = null as any;
utilities.lazyLoad(exports, ["BrokerAuthentication"], () => require("./brokerAuthentication"));

export { BrokerAuthorizationArgs } from "./brokerAuthorization";
export type BrokerAuthorization = import("./brokerAuthorization").BrokerAuthorization;
export const BrokerAuthorization: typeof import("./brokerAuthorization").BrokerAuthorization = null as any;
utilities.lazyLoad(exports, ["BrokerAuthorization"], () => require("./brokerAuthorization"));

export { BrokerListenerArgs } from "./brokerListener";
export type BrokerListener = import("./brokerListener").BrokerListener;
export const BrokerListener: typeof import("./brokerListener").BrokerListener = null as any;
utilities.lazyLoad(exports, ["BrokerListener"], () => require("./brokerListener"));

export { DataflowArgs } from "./dataflow";
export type Dataflow = import("./dataflow").Dataflow;
export const Dataflow: typeof import("./dataflow").Dataflow = null as any;
utilities.lazyLoad(exports, ["Dataflow"], () => require("./dataflow"));

export { DataflowEndpointArgs } from "./dataflowEndpoint";
export type DataflowEndpoint = import("./dataflowEndpoint").DataflowEndpoint;
export const DataflowEndpoint: typeof import("./dataflowEndpoint").DataflowEndpoint = null as any;
utilities.lazyLoad(exports, ["DataflowEndpoint"], () => require("./dataflowEndpoint"));

export { DataflowGraphArgs } from "./dataflowGraph";
export type DataflowGraph = import("./dataflowGraph").DataflowGraph;
export const DataflowGraph: typeof import("./dataflowGraph").DataflowGraph = null as any;
utilities.lazyLoad(exports, ["DataflowGraph"], () => require("./dataflowGraph"));

export { DataflowProfileArgs } from "./dataflowProfile";
export type DataflowProfile = import("./dataflowProfile").DataflowProfile;
export const DataflowProfile: typeof import("./dataflowProfile").DataflowProfile = null as any;
utilities.lazyLoad(exports, ["DataflowProfile"], () => require("./dataflowProfile"));

export { GetAkriConnectorArgs, GetAkriConnectorResult, GetAkriConnectorOutputArgs } from "./getAkriConnector";
export const getAkriConnector: typeof import("./getAkriConnector").getAkriConnector = null as any;
export const getAkriConnectorOutput: typeof import("./getAkriConnector").getAkriConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getAkriConnector","getAkriConnectorOutput"], () => require("./getAkriConnector"));

export { GetAkriConnectorTemplateArgs, GetAkriConnectorTemplateResult, GetAkriConnectorTemplateOutputArgs } from "./getAkriConnectorTemplate";
export const getAkriConnectorTemplate: typeof import("./getAkriConnectorTemplate").getAkriConnectorTemplate = null as any;
export const getAkriConnectorTemplateOutput: typeof import("./getAkriConnectorTemplate").getAkriConnectorTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getAkriConnectorTemplate","getAkriConnectorTemplateOutput"], () => require("./getAkriConnectorTemplate"));

export { GetBrokerArgs, GetBrokerResult, GetBrokerOutputArgs } from "./getBroker";
export const getBroker: typeof import("./getBroker").getBroker = null as any;
export const getBrokerOutput: typeof import("./getBroker").getBrokerOutput = null as any;
utilities.lazyLoad(exports, ["getBroker","getBrokerOutput"], () => require("./getBroker"));

export { GetBrokerAuthenticationArgs, GetBrokerAuthenticationResult, GetBrokerAuthenticationOutputArgs } from "./getBrokerAuthentication";
export const getBrokerAuthentication: typeof import("./getBrokerAuthentication").getBrokerAuthentication = null as any;
export const getBrokerAuthenticationOutput: typeof import("./getBrokerAuthentication").getBrokerAuthenticationOutput = null as any;
utilities.lazyLoad(exports, ["getBrokerAuthentication","getBrokerAuthenticationOutput"], () => require("./getBrokerAuthentication"));

export { GetBrokerAuthorizationArgs, GetBrokerAuthorizationResult, GetBrokerAuthorizationOutputArgs } from "./getBrokerAuthorization";
export const getBrokerAuthorization: typeof import("./getBrokerAuthorization").getBrokerAuthorization = null as any;
export const getBrokerAuthorizationOutput: typeof import("./getBrokerAuthorization").getBrokerAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getBrokerAuthorization","getBrokerAuthorizationOutput"], () => require("./getBrokerAuthorization"));

export { GetBrokerListenerArgs, GetBrokerListenerResult, GetBrokerListenerOutputArgs } from "./getBrokerListener";
export const getBrokerListener: typeof import("./getBrokerListener").getBrokerListener = null as any;
export const getBrokerListenerOutput: typeof import("./getBrokerListener").getBrokerListenerOutput = null as any;
utilities.lazyLoad(exports, ["getBrokerListener","getBrokerListenerOutput"], () => require("./getBrokerListener"));

export { GetDataflowArgs, GetDataflowResult, GetDataflowOutputArgs } from "./getDataflow";
export const getDataflow: typeof import("./getDataflow").getDataflow = null as any;
export const getDataflowOutput: typeof import("./getDataflow").getDataflowOutput = null as any;
utilities.lazyLoad(exports, ["getDataflow","getDataflowOutput"], () => require("./getDataflow"));

export { GetDataflowEndpointArgs, GetDataflowEndpointResult, GetDataflowEndpointOutputArgs } from "./getDataflowEndpoint";
export const getDataflowEndpoint: typeof import("./getDataflowEndpoint").getDataflowEndpoint = null as any;
export const getDataflowEndpointOutput: typeof import("./getDataflowEndpoint").getDataflowEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowEndpoint","getDataflowEndpointOutput"], () => require("./getDataflowEndpoint"));

export { GetDataflowGraphArgs, GetDataflowGraphResult, GetDataflowGraphOutputArgs } from "./getDataflowGraph";
export const getDataflowGraph: typeof import("./getDataflowGraph").getDataflowGraph = null as any;
export const getDataflowGraphOutput: typeof import("./getDataflowGraph").getDataflowGraphOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowGraph","getDataflowGraphOutput"], () => require("./getDataflowGraph"));

export { GetDataflowProfileArgs, GetDataflowProfileResult, GetDataflowProfileOutputArgs } from "./getDataflowProfile";
export const getDataflowProfile: typeof import("./getDataflowProfile").getDataflowProfile = null as any;
export const getDataflowProfileOutput: typeof import("./getDataflowProfile").getDataflowProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowProfile","getDataflowProfileOutput"], () => require("./getDataflowProfile"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetRegistryEndpointArgs, GetRegistryEndpointResult, GetRegistryEndpointOutputArgs } from "./getRegistryEndpoint";
export const getRegistryEndpoint: typeof import("./getRegistryEndpoint").getRegistryEndpoint = null as any;
export const getRegistryEndpointOutput: typeof import("./getRegistryEndpoint").getRegistryEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryEndpoint","getRegistryEndpointOutput"], () => require("./getRegistryEndpoint"));

export { InstanceArgs } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { RegistryEndpointArgs } from "./registryEndpoint";
export type RegistryEndpoint = import("./registryEndpoint").RegistryEndpoint;
export const RegistryEndpoint: typeof import("./registryEndpoint").RegistryEndpoint = null as any;
utilities.lazyLoad(exports, ["RegistryEndpoint"], () => require("./registryEndpoint"));


// Export enums:
export * from "../types/enums/iotoperations";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:iotoperations:AkriConnector":
                return new AkriConnector(name, <any>undefined, { urn })
            case "azure-native:iotoperations:AkriConnectorTemplate":
                return new AkriConnectorTemplate(name, <any>undefined, { urn })
            case "azure-native:iotoperations:Broker":
                return new Broker(name, <any>undefined, { urn })
            case "azure-native:iotoperations:BrokerAuthentication":
                return new BrokerAuthentication(name, <any>undefined, { urn })
            case "azure-native:iotoperations:BrokerAuthorization":
                return new BrokerAuthorization(name, <any>undefined, { urn })
            case "azure-native:iotoperations:BrokerListener":
                return new BrokerListener(name, <any>undefined, { urn })
            case "azure-native:iotoperations:Dataflow":
                return new Dataflow(name, <any>undefined, { urn })
            case "azure-native:iotoperations:DataflowEndpoint":
                return new DataflowEndpoint(name, <any>undefined, { urn })
            case "azure-native:iotoperations:DataflowGraph":
                return new DataflowGraph(name, <any>undefined, { urn })
            case "azure-native:iotoperations:DataflowProfile":
                return new DataflowProfile(name, <any>undefined, { urn })
            case "azure-native:iotoperations:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "azure-native:iotoperations:RegistryEndpoint":
                return new RegistryEndpoint(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "iotoperations", _module)
