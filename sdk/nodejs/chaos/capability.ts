// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Model that represents a Capability resource.
 *
 * Uses Azure REST API version 2024-03-22-preview. In version 2.x of the Azure Native provider, it used API version 2023-04-15-preview.
 *
 * Other available API versions: 2023-04-15-preview, 2023-09-01-preview, 2023-10-27-preview, 2023-11-01, 2024-01-01, 2024-11-01-preview, 2025-01-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native chaos [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class Capability extends pulumi.CustomResource {
    /**
     * Get an existing Capability resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Capability {
        return new Capability(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:chaos:Capability';

    /**
     * Returns true if the given object is an instance of Capability.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Capability {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Capability.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The properties of a capability resource.
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.chaos.CapabilityPropertiesResponse>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.chaos.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Capability resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CapabilityArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.parentProviderNamespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentProviderNamespace'");
            }
            if ((!args || args.parentResourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentResourceName'");
            }
            if ((!args || args.parentResourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentResourceType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.targetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetName'");
            }
            resourceInputs["capabilityName"] = args ? args.capabilityName : undefined;
            resourceInputs["parentProviderNamespace"] = args ? args.parentProviderNamespace : undefined;
            resourceInputs["parentResourceName"] = args ? args.parentResourceName : undefined;
            resourceInputs["parentResourceType"] = args ? args.parentResourceType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:chaos/v20230415preview:Capability" }, { type: "azure-native:chaos/v20230901preview:Capability" }, { type: "azure-native:chaos/v20231027preview:Capability" }, { type: "azure-native:chaos/v20231101:Capability" }, { type: "azure-native:chaos/v20240101:Capability" }, { type: "azure-native:chaos/v20240322preview:Capability" }, { type: "azure-native:chaos/v20241101preview:Capability" }, { type: "azure-native_chaos_v20210915preview:chaos:Capability" }, { type: "azure-native_chaos_v20220701preview:chaos:Capability" }, { type: "azure-native_chaos_v20221001preview:chaos:Capability" }, { type: "azure-native_chaos_v20230401preview:chaos:Capability" }, { type: "azure-native_chaos_v20230415preview:chaos:Capability" }, { type: "azure-native_chaos_v20230901preview:chaos:Capability" }, { type: "azure-native_chaos_v20231027preview:chaos:Capability" }, { type: "azure-native_chaos_v20231101:chaos:Capability" }, { type: "azure-native_chaos_v20240101:chaos:Capability" }, { type: "azure-native_chaos_v20240322preview:chaos:Capability" }, { type: "azure-native_chaos_v20241101preview:chaos:Capability" }, { type: "azure-native_chaos_v20250101:chaos:Capability" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Capability.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Capability resource.
 */
export interface CapabilityArgs {
    /**
     * String that represents a Capability resource name.
     */
    capabilityName?: pulumi.Input<string>;
    /**
     * String that represents a resource provider namespace.
     */
    parentProviderNamespace: pulumi.Input<string>;
    /**
     * String that represents a resource name.
     */
    parentResourceName: pulumi.Input<string>;
    /**
     * String that represents a resource type.
     */
    parentResourceType: pulumi.Input<string>;
    /**
     * String that represents an Azure resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * String that represents a Target resource name.
     */
    targetName: pulumi.Input<string>;
}
