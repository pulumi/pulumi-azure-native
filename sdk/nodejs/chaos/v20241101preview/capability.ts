// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Model that represents a Capability resource.
 */
export class Capability extends pulumi.CustomResource {
    /**
     * Get an existing Capability resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Capability {
        return new Capability(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:chaos/v20241101preview:Capability';

    /**
     * Returns true if the given object is an instance of Capability.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Capability {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Capability.__pulumiType;
    }

    /**
     * Localized string of the description.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * URL to retrieve JSON schema of the Capability parameters.
     */
    public /*out*/ readonly parametersSchema!: pulumi.Output<string>;
    /**
     * Resource provisioning state. Not currently in use because resource is created synchronously.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * String of the Publisher that this Capability extends.
     */
    public /*out*/ readonly publisher!: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.chaos.v20241101preview.SystemDataResponse>;
    /**
     * String of the Target Type that this Capability extends.
     */
    public /*out*/ readonly targetType!: pulumi.Output<string>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * String of the URN for this Capability Type.
     */
    public /*out*/ readonly urn!: pulumi.Output<string>;

    /**
     * Create a Capability resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CapabilityArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.parentProviderNamespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentProviderNamespace'");
            }
            if ((!args || args.parentResourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentResourceName'");
            }
            if ((!args || args.parentResourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentResourceType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.targetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetName'");
            }
            resourceInputs["capabilityName"] = args ? args.capabilityName : undefined;
            resourceInputs["parentProviderNamespace"] = args ? args.parentProviderNamespace : undefined;
            resourceInputs["parentResourceName"] = args ? args.parentResourceName : undefined;
            resourceInputs["parentResourceType"] = args ? args.parentResourceType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parametersSchema"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["publisher"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["targetType"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["urn"] = undefined /*out*/;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parametersSchema"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["publisher"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["targetType"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["urn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:chaos/v20210915preview:Capability" }, { type: "azure-native:chaos/v20220701preview:Capability" }, { type: "azure-native:chaos/v20221001preview:Capability" }, { type: "azure-native:chaos/v20230401preview:Capability" }, { type: "azure-native:chaos/v20230415preview:Capability" }, { type: "azure-native:chaos/v20230901preview:Capability" }, { type: "azure-native:chaos/v20231027preview:Capability" }, { type: "azure-native:chaos/v20231101:Capability" }, { type: "azure-native:chaos/v20240101:Capability" }, { type: "azure-native:chaos/v20240322preview:Capability" }, { type: "azure-native:chaos:Capability" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Capability.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Capability resource.
 */
export interface CapabilityArgs {
    /**
     * String that represents a Capability resource name.
     */
    capabilityName?: pulumi.Input<string>;
    /**
     * The parent resource provider namespace.
     */
    parentProviderNamespace: pulumi.Input<string>;
    /**
     * The parent resource name.
     */
    parentResourceName: pulumi.Input<string>;
    /**
     * The parent resource type.
     */
    parentResourceType: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * String that represents a Target resource name.
     */
    targetName: pulumi.Input<string>;
}
