// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets virtualharddisks by resource name
 */
export function getvirtualharddiskRetrieve(args: GetvirtualharddiskRetrieveArgs, opts?: pulumi.InvokeOptions): Promise<GetvirtualharddiskRetrieveResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:azurestackhci/v20210901preview:getvirtualharddiskRetrieve", {
        "resourceGroupName": args.resourceGroupName,
        "virtualharddisksName": args.virtualharddisksName,
    }, opts);
}

export interface GetvirtualharddiskRetrieveArgs {
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
    virtualharddisksName: string;
}

/**
 * The virtual hard disk resource definition.
 */
export interface GetvirtualharddiskRetrieveResult {
    readonly blockSizeBytes?: number;
    /**
     * Storage ContainerID of the storage container to be used for VHD
     */
    readonly containerId?: string;
    /**
     * The format of the actual VHD file [vhd, vhdx]
     */
    readonly diskFileFormat?: string;
    /**
     * diskSizeBytes - size of the disk in GB
     */
    readonly diskSizeBytes?: number;
    /**
     * Boolean for enabling dynamic sizing on the virtual hard disk
     */
    readonly dynamic?: boolean;
    /**
     * The extendedLocation of the resource.
     */
    readonly extendedLocation?: outputs.azurestackhci.v20210901preview.ExtendedLocationResponse;
    /**
     * The hypervisor generation of the Virtual Machine [V1, V2]
     */
    readonly hyperVGeneration?: string;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * The geo-location where the resource lives
     */
    readonly location: string;
    readonly logicalSectorBytes?: number;
    /**
     * The name of the resource
     */
    readonly name: string;
    readonly physicalSectorBytes?: number;
    readonly provisioningState: string;
    /**
     * name of the object to be used in moc
     */
    readonly resourceName?: string;
    /**
     * VirtualHardDiskStatus defines the observed state of virtualharddisks
     */
    readonly status: outputs.azurestackhci.v20210901preview.VirtualHardDiskStatusResponse;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     */
    readonly systemData: outputs.azurestackhci.v20210901preview.SystemDataResponse;
    /**
     * Resource tags.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
/**
 * Gets virtualharddisks by resource name
 */
export function getvirtualharddiskRetrieveOutput(args: GetvirtualharddiskRetrieveOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetvirtualharddiskRetrieveResult> {
    return pulumi.output(args).apply((a: any) => getvirtualharddiskRetrieve(a, opts))
}

export interface GetvirtualharddiskRetrieveOutputArgs {
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    virtualharddisksName: pulumi.Input<string>;
}
