// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

export function getJob(args: GetJobArgs, opts?: pulumi.InvokeOptions): Promise<GetJobResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("azure-nextgen:batchai/latest:getJob", {
        "experimentName": args.experimentName,
        "jobName": args.jobName,
        "resourceGroupName": args.resourceGroupName,
        "workspaceName": args.workspaceName,
    }, opts);
}

export interface GetJobArgs {
    /**
     * The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
     */
    readonly experimentName: string;
    /**
     * The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
     */
    readonly jobName: string;
    /**
     * Name of the resource group to which the resource belongs.
     */
    readonly resourceGroupName: string;
    /**
     * The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
     */
    readonly workspaceName: string;
}

/**
 * Information about a Job.
 */
export interface GetJobResult {
    /**
     * Caffe2 job settings.
     */
    readonly caffe2Settings?: outputs.batchai.latest.Caffe2SettingsResponse;
    /**
     * Caffe job settings.
     */
    readonly caffeSettings?: outputs.batchai.latest.CaffeSettingsResponse;
    /**
     * Chainer job settings.
     */
    readonly chainerSettings?: outputs.batchai.latest.ChainerSettingsResponse;
    /**
     * Resource ID of the cluster associated with the job.
     */
    readonly cluster?: outputs.batchai.latest.ResourceIdResponse;
    /**
     * CNTK (aka Microsoft Cognitive Toolkit) job settings.
     */
    readonly cntkSettings?: outputs.batchai.latest.CNTKsettingsResponse;
    /**
     * Constraints associated with the Job.
     */
    readonly constraints?: outputs.batchai.latest.JobPropertiesResponseConstraints;
    /**
     * If the container was downloaded as part of cluster setup then the same container image will be used. If not provided, the job will run on the VM.
     */
    readonly containerSettings?: outputs.batchai.latest.ContainerSettingsResponse;
    /**
     * The creation time of the job.
     */
    readonly creationTime: string;
    /**
     * Custom MPI job settings.
     */
    readonly customMpiSettings?: outputs.batchai.latest.CustomMpiSettingsResponse;
    /**
     * Custom tool kit job settings.
     */
    readonly customToolkitSettings?: outputs.batchai.latest.CustomToolkitSettingsResponse;
    /**
     * A collection of user defined environment variables to be setup for the job.
     */
    readonly environmentVariables?: outputs.batchai.latest.EnvironmentVariableResponse[];
    /**
     * Information about the execution of a job.
     */
    readonly executionInfo?: outputs.batchai.latest.JobPropertiesResponseExecutionInfo;
    /**
     * The current state of the job. Possible values are: queued - The job is queued and able to run. A job enters this state when it is created, or when it is awaiting a retry after a failed run. running - The job is running on a compute cluster. This includes job-level preparation such as downloading resource files or set up container specified on the job - it does not necessarily mean that the job command line has started executing. terminating - The job is terminated by the user, the terminate operation is in progress. succeeded - The job has completed running successfully and exited with exit code 0. failed - The job has finished unsuccessfully (failed with a non-zero exit code) and has exhausted its retry limit. A job is also marked as failed if an error occurred launching the job.
     */
    readonly executionState: string;
    /**
     * The time at which the job entered its current execution state.
     */
    readonly executionStateTransitionTime: string;
    /**
     * Specifies the settings for Horovod job.
     */
    readonly horovodSettings?: outputs.batchai.latest.HorovodSettingsResponse;
    /**
     * A list of input directories for the job.
     */
    readonly inputDirectories?: outputs.batchai.latest.InputDirectoryResponse[];
    /**
     * A segment of job's output directories path created by Batch AI. Batch AI creates job's output directories under an unique path to avoid conflicts between jobs. This value contains a path segment generated by Batch AI to make the path unique and can be used to find the output directory on the node or mounted filesystem.
     */
    readonly jobOutputDirectoryPathSegment: string;
    /**
     * The specified actions will run on all the nodes that are part of the job
     */
    readonly jobPreparation?: outputs.batchai.latest.JobPreparationResponse;
    /**
     * Collection of mount volumes available to the job during execution. These volumes are mounted before the job execution and unmounted after the job completion. The volumes are mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
     */
    readonly mountVolumes?: outputs.batchai.latest.MountVolumesResponse;
    /**
     * The name of the resource.
     */
    readonly name: string;
    /**
     * The job will be gang scheduled on that many compute nodes
     */
    readonly nodeCount?: number;
    /**
     * A list of output directories for the job.
     */
    readonly outputDirectories?: outputs.batchai.latest.OutputDirectoryResponse[];
    /**
     * The provisioned state of the Batch AI job
     */
    readonly provisioningState: string;
    /**
     * The time at which the job entered its current provisioning state.
     */
    readonly provisioningStateTransitionTime: string;
    /**
     * pyTorch job settings.
     */
    readonly pyTorchSettings?: outputs.batchai.latest.PyTorchSettingsResponse;
    /**
     * Scheduling priority associated with the job.
     */
    readonly schedulingPriority?: string;
    /**
     * A collection of user defined environment variables with secret values to be setup for the job. Server will never report values of these variables back.
     */
    readonly secrets?: outputs.batchai.latest.EnvironmentVariableWithSecretValueResponse[];
    /**
     * The path where the Batch AI service stores stdout, stderror and execution log of the job.
     */
    readonly stdOutErrPathPrefix?: string;
    /**
     * TensorFlow job settings.
     */
    readonly tensorFlowSettings?: outputs.batchai.latest.TensorFlowSettingsResponse;
    /**
     * Possible values are: cntk, tensorflow, caffe, caffe2, chainer, pytorch, custom, custommpi, horovod.
     */
    readonly toolType?: string;
    /**
     * The type of the resource.
     */
    readonly type: string;
}
