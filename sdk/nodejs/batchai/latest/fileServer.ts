// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * File Server information.
 */
export class FileServer extends pulumi.CustomResource {
    /**
     * Get an existing FileServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FileServer {
        return new FileServer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:batchai/latest:FileServer';

    /**
     * Returns true if the given object is an instance of FileServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileServer.__pulumiType;
    }

    /**
     * Time when the FileServer was created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * Information about disks attached to File Server VM.
     */
    public readonly dataDisks!: pulumi.Output<outputs.batchai.latest.DataDisksResponse | undefined>;
    /**
     * File Server mount settings.
     */
    public /*out*/ readonly mountSettings!: pulumi.Output<outputs.batchai.latest.MountSettingsResponse>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Provisioning state of the File Server. Possible values: creating - The File Server is getting created; updating - The File Server creation has been accepted and it is getting updated; deleting - The user has requested that the File Server be deleted, and it is in the process of being deleted; failed - The File Server creation has failed with the specified error code. Details about the error code are specified in the message field; succeeded - The File Server creation has succeeded.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Time when the provisioning state was changed.
     */
    public /*out*/ readonly provisioningStateTransitionTime!: pulumi.Output<string>;
    /**
     * SSH configuration for accessing the File Server node.
     */
    public readonly sshConfiguration!: pulumi.Output<outputs.batchai.latest.SshConfigurationResponse | undefined>;
    /**
     * File Server virtual network subnet resource ID.
     */
    public readonly subnet!: pulumi.Output<outputs.batchai.latest.ResourceIdResponse | undefined>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * VM size of the File Server.
     */
    public readonly vmSize!: pulumi.Output<string | undefined>;

    /**
     * Create a FileServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileServerArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.dataDisks === undefined) {
                throw new Error("Missing required property 'dataDisks'");
            }
            if (!args || args.fileServerName === undefined) {
                throw new Error("Missing required property 'fileServerName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sshConfiguration === undefined) {
                throw new Error("Missing required property 'sshConfiguration'");
            }
            if (!args || args.vmSize === undefined) {
                throw new Error("Missing required property 'vmSize'");
            }
            if (!args || args.workspaceName === undefined) {
                throw new Error("Missing required property 'workspaceName'");
            }
            inputs["dataDisks"] = args ? args.dataDisks : undefined;
            inputs["fileServerName"] = args ? args.fileServerName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sshConfiguration"] = args ? args.sshConfiguration : undefined;
            inputs["subnet"] = args ? args.subnet : undefined;
            inputs["vmSize"] = args ? args.vmSize : undefined;
            inputs["workspaceName"] = args ? args.workspaceName : undefined;
            inputs["creationTime"] = undefined /*out*/;
            inputs["mountSettings"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["provisioningStateTransitionTime"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["creationTime"] = undefined /*out*/;
            inputs["dataDisks"] = undefined /*out*/;
            inputs["mountSettings"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["provisioningStateTransitionTime"] = undefined /*out*/;
            inputs["sshConfiguration"] = undefined /*out*/;
            inputs["subnet"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["vmSize"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:batchai/v20180501:FileServer" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(FileServer.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a FileServer resource.
 */
export interface FileServerArgs {
    /**
     * Settings for the data disks which will be created for the File Server.
     */
    readonly dataDisks: pulumi.Input<inputs.batchai.latest.DataDisks>;
    /**
     * The name of the file server within the specified resource group. File server names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
     */
    readonly fileServerName: pulumi.Input<string>;
    /**
     * Name of the resource group to which the resource belongs.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * SSH configuration for the File Server node.
     */
    readonly sshConfiguration: pulumi.Input<inputs.batchai.latest.SshConfiguration>;
    /**
     * Identifier of an existing virtual network subnet to put the File Server in. If not provided, a new virtual network and subnet will be created.
     */
    readonly subnet?: pulumi.Input<inputs.batchai.latest.ResourceId>;
    /**
     * The size of the virtual machine for the File Server. For information about available VM sizes from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
     */
    readonly vmSize: pulumi.Input<string>;
    /**
     * The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
     */
    readonly workspaceName: pulumi.Input<string>;
}
