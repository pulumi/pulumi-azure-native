// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * A class represent a SignalR service resource.
 *
 * @deprecated Version 2018-10-01 will be removed in v2 of the provider.
 */
export class SignalR extends pulumi.CustomResource {
    /**
     * Get an existing SignalR resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SignalR {
        pulumi.log.warn("SignalR is deprecated: Version 2018-10-01 will be removed in v2 of the provider.")
        return new SignalR(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:signalrservice/v20181001:SignalR';

    /**
     * Returns true if the given object is an instance of SignalR.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SignalR {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SignalR.__pulumiType;
    }

    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     */
    public /*out*/ readonly cors!: pulumi.Output<outputs.signalrservice.v20181001.SignalRCorsSettingsResponse | undefined>;
    /**
     * The publicly accessible IP of the SignalR service.
     */
    public /*out*/ readonly externalIP!: pulumi.Output<string>;
    /**
     * List of SignalR featureFlags. e.g. ServiceMode.
     * 
     * FeatureFlags that are not included in the parameters for the update operation will not be modified.
     * And the response will only include featureFlags that are explicitly set. 
     * When a featureFlag is not explicitly set, SignalR service will use its globally default value. 
     * But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
     */
    public /*out*/ readonly features!: pulumi.Output<outputs.signalrservice.v20181001.SignalRFeatureResponse[] | undefined>;
    /**
     * FQDN of the SignalR service instance. Format: xxx.service.signalr.net
     */
    public /*out*/ readonly hostName!: pulumi.Output<string>;
    /**
     * Prefix for the hostName of the SignalR service. Retained for future use.
     * The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.
     */
    public /*out*/ readonly hostNamePrefix!: pulumi.Output<string | undefined>;
    /**
     * The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Provisioning state of the resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The publicly accessible port of the SignalR service which is designed for browser/client side usage.
     */
    public /*out*/ readonly publicPort!: pulumi.Output<number>;
    /**
     * The publicly accessible port of the SignalR service which is designed for customer server side usage.
     */
    public /*out*/ readonly serverPort!: pulumi.Output<number>;
    /**
     * SKU of the service.
     */
    public readonly sku!: pulumi.Output<outputs.signalrservice.v20181001.ResourceSkuResponse | undefined>;
    /**
     * Tags of the service which is a list of key value pairs that describe the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the service - e.g. "Microsoft.SignalRService/SignalR"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Version of the SignalR resource. Probably you need the same or higher version of client SDKs.
     */
    public /*out*/ readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a SignalR resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2018-10-01 will be removed in v2 of the provider. */
    constructor(name: string, args: SignalRArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("SignalR is deprecated: Version 2018-10-01 will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cors"] = undefined /*out*/;
            resourceInputs["externalIP"] = undefined /*out*/;
            resourceInputs["features"] = undefined /*out*/;
            resourceInputs["hostName"] = undefined /*out*/;
            resourceInputs["hostNamePrefix"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["publicPort"] = undefined /*out*/;
            resourceInputs["serverPort"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        } else {
            resourceInputs["cors"] = undefined /*out*/;
            resourceInputs["externalIP"] = undefined /*out*/;
            resourceInputs["features"] = undefined /*out*/;
            resourceInputs["hostName"] = undefined /*out*/;
            resourceInputs["hostNamePrefix"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["publicPort"] = undefined /*out*/;
            resourceInputs["serverPort"] = undefined /*out*/;
            resourceInputs["sku"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:signalrservice:SignalR" }, { type: "azure-native:signalrservice/v20180301preview:SignalR" }, { type: "azure-native:signalrservice/v20200501:SignalR" }, { type: "azure-native:signalrservice/v20200701preview:SignalR" }, { type: "azure-native:signalrservice/v20210401preview:SignalR" }, { type: "azure-native:signalrservice/v20210601preview:SignalR" }, { type: "azure-native:signalrservice/v20210901preview:SignalR" }, { type: "azure-native:signalrservice/v20211001:SignalR" }, { type: "azure-native:signalrservice/v20220201:SignalR" }, { type: "azure-native:signalrservice/v20220801preview:SignalR" }, { type: "azure-native:signalrservice/v20230201:SignalR" }, { type: "azure-native:signalrservice/v20230301preview:SignalR" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SignalR.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SignalR resource.
 */
export interface SignalRArgs {
    /**
     * Azure GEO region: e.g. West US | East US | North Central US | South Central US | West Europe | North Europe | East Asia | Southeast Asia | etc. 
     * The geo region of a resource never changes after it is created.
     */
    location?: pulumi.Input<string>;
    /**
     * Settings used to provision or configure the resource
     */
    properties?: pulumi.Input<inputs.signalrservice.v20181001.SignalRCreateOrUpdatePropertiesArgs>;
    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the SignalR resource.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The billing information of the resource.(e.g. basic vs. standard)
     */
    sku?: pulumi.Input<inputs.signalrservice.v20181001.ResourceSkuArgs>;
    /**
     * A list of key value pairs that describe the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
