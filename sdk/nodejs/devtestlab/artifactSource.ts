// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Properties of an artifact source.
 *
 * Uses Azure REST API version 2018-09-15. In version 2.x of the Azure Native provider, it used API version 2018-09-15.
 */
export class ArtifactSource extends pulumi.CustomResource {
    /**
     * Get an existing ArtifactSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ArtifactSource {
        return new ArtifactSource(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:devtestlab:ArtifactSource';

    /**
     * Returns true if the given object is an instance of ArtifactSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArtifactSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArtifactSource.__pulumiType;
    }

    /**
     * The folder containing Azure Resource Manager templates.
     */
    declare public readonly armTemplateFolderPath: pulumi.Output<string | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The artifact source's branch reference.
     */
    declare public readonly branchRef: pulumi.Output<string | undefined>;
    /**
     * The artifact source's creation date.
     */
    declare public /*out*/ readonly createdDate: pulumi.Output<string>;
    /**
     * The artifact source's display name.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The folder containing artifacts.
     */
    declare public readonly folderPath: pulumi.Output<string | undefined>;
    /**
     * The location of the resource.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The provisioning status of the resource.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * The security token to authenticate to the artifact source.
     */
    declare public readonly securityToken: pulumi.Output<string | undefined>;
    /**
     * The artifact source's type.
     */
    declare public readonly sourceType: pulumi.Output<string | undefined>;
    /**
     * Indicates if the artifact source is enabled (values: Enabled, Disabled).
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * The tags of the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The unique immutable identifier of a resource (Guid).
     */
    declare public /*out*/ readonly uniqueIdentifier: pulumi.Output<string>;
    /**
     * The artifact source's URI.
     */
    declare public readonly uri: pulumi.Output<string | undefined>;

    /**
     * Create a ArtifactSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArtifactSourceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.labName === undefined && !opts.urn) {
                throw new Error("Missing required property 'labName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["armTemplateFolderPath"] = args?.armTemplateFolderPath;
            resourceInputs["branchRef"] = args?.branchRef;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["folderPath"] = args?.folderPath;
            resourceInputs["labName"] = args?.labName;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["securityToken"] = args?.securityToken;
            resourceInputs["sourceType"] = args?.sourceType;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["uri"] = args?.uri;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uniqueIdentifier"] = undefined /*out*/;
        } else {
            resourceInputs["armTemplateFolderPath"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["branchRef"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["folderPath"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["securityToken"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uniqueIdentifier"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:devtestlab/v20150521preview:ArtifactSource" }, { type: "azure-native:devtestlab/v20160515:ArtifactSource" }, { type: "azure-native:devtestlab/v20180915:ArtifactSource" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ArtifactSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ArtifactSource resource.
 */
export interface ArtifactSourceArgs {
    /**
     * The folder containing Azure Resource Manager templates.
     */
    armTemplateFolderPath?: pulumi.Input<string>;
    /**
     * The artifact source's branch reference.
     */
    branchRef?: pulumi.Input<string>;
    /**
     * The artifact source's display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The folder containing artifacts.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The name of the lab.
     */
    labName: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the ArtifactSource
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The security token to authenticate to the artifact source.
     */
    securityToken?: pulumi.Input<string>;
    /**
     * The artifact source's type.
     */
    sourceType?: pulumi.Input<string | enums.devtestlab.SourceControlType>;
    /**
     * Indicates if the artifact source is enabled (values: Enabled, Disabled).
     */
    status?: pulumi.Input<string | enums.devtestlab.EnableStatus>;
    /**
     * The tags of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The artifact source's URI.
     */
    uri?: pulumi.Input<string>;
}
