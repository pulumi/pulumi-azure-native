// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * A custom image.
 *
 * Uses Azure REST API version 2018-09-15. In version 2.x of the Azure Native provider, it used API version 2018-09-15.
 */
export class CustomImage extends pulumi.CustomResource {
    /**
     * Get an existing CustomImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CustomImage {
        return new CustomImage(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:devtestlab:CustomImage';

    /**
     * Returns true if the given object is an instance of CustomImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomImage.__pulumiType;
    }

    /**
     * The author of the custom image.
     */
    declare public readonly author: pulumi.Output<string | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The creation date of the custom image.
     */
    declare public /*out*/ readonly creationDate: pulumi.Output<string>;
    /**
     * Storage information about the plan related to this custom image
     */
    declare public readonly customImagePlan: pulumi.Output<outputs.devtestlab.CustomImagePropertiesFromPlanResponse | undefined>;
    /**
     * Storage information about the data disks present in the custom image
     */
    declare public readonly dataDiskStorageInfo: pulumi.Output<outputs.devtestlab.DataDiskStorageTypeInfoResponse[] | undefined>;
    /**
     * The description of the custom image.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
     */
    declare public readonly isPlanAuthorized: pulumi.Output<boolean | undefined>;
    /**
     * The location of the resource.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The Managed Image Id backing the custom image.
     */
    declare public readonly managedImageId: pulumi.Output<string | undefined>;
    /**
     * The Managed Snapshot Id backing the custom image.
     */
    declare public readonly managedSnapshotId: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The provisioning status of the resource.
     */
    declare public /*out*/ readonly provisioningState: pulumi.Output<string>;
    /**
     * The tags of the resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The unique immutable identifier of a resource (Guid).
     */
    declare public /*out*/ readonly uniqueIdentifier: pulumi.Output<string>;
    /**
     * The VHD from which the image is to be created.
     */
    declare public readonly vhd: pulumi.Output<outputs.devtestlab.CustomImagePropertiesCustomResponse | undefined>;
    /**
     * The virtual machine from which the image is to be created.
     */
    declare public readonly vm: pulumi.Output<outputs.devtestlab.CustomImagePropertiesFromVmResponse | undefined>;

    /**
     * Create a CustomImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomImageArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.labName === undefined && !opts.urn) {
                throw new Error("Missing required property 'labName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["author"] = args?.author;
            resourceInputs["customImagePlan"] = args?.customImagePlan;
            resourceInputs["dataDiskStorageInfo"] = args?.dataDiskStorageInfo;
            resourceInputs["description"] = args?.description;
            resourceInputs["isPlanAuthorized"] = args?.isPlanAuthorized;
            resourceInputs["labName"] = args?.labName;
            resourceInputs["location"] = args?.location;
            resourceInputs["managedImageId"] = args?.managedImageId;
            resourceInputs["managedSnapshotId"] = args?.managedSnapshotId;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vhd"] = args?.vhd;
            resourceInputs["vm"] = args?.vm;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uniqueIdentifier"] = undefined /*out*/;
        } else {
            resourceInputs["author"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["customImagePlan"] = undefined /*out*/;
            resourceInputs["dataDiskStorageInfo"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["isPlanAuthorized"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["managedImageId"] = undefined /*out*/;
            resourceInputs["managedSnapshotId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uniqueIdentifier"] = undefined /*out*/;
            resourceInputs["vhd"] = undefined /*out*/;
            resourceInputs["vm"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:devtestlab/v20150521preview:CustomImage" }, { type: "azure-native:devtestlab/v20160515:CustomImage" }, { type: "azure-native:devtestlab/v20180915:CustomImage" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(CustomImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CustomImage resource.
 */
export interface CustomImageArgs {
    /**
     * The author of the custom image.
     */
    author?: pulumi.Input<string>;
    /**
     * Storage information about the plan related to this custom image
     */
    customImagePlan?: pulumi.Input<inputs.devtestlab.CustomImagePropertiesFromPlanArgs>;
    /**
     * Storage information about the data disks present in the custom image
     */
    dataDiskStorageInfo?: pulumi.Input<pulumi.Input<inputs.devtestlab.DataDiskStorageTypeInfoArgs>[]>;
    /**
     * The description of the custom image.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
     */
    isPlanAuthorized?: pulumi.Input<boolean>;
    /**
     * The name of the lab.
     */
    labName: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The Managed Image Id backing the custom image.
     */
    managedImageId?: pulumi.Input<string>;
    /**
     * The Managed Snapshot Id backing the custom image.
     */
    managedSnapshotId?: pulumi.Input<string>;
    /**
     * The name of the CustomImage
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The tags of the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VHD from which the image is to be created.
     */
    vhd?: pulumi.Input<inputs.devtestlab.CustomImagePropertiesCustomArgs>;
    /**
     * The virtual machine from which the image is to be created.
     */
    vm?: pulumi.Input<inputs.devtestlab.CustomImagePropertiesFromVmArgs>;
}
