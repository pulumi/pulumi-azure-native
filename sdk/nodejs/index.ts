// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as aad from "./aad";
import * as aadiam from "./aadiam";
import * as addons from "./addons";
import * as advisor from "./advisor";
import * as agfoodplatform from "./agfoodplatform";
import * as agricultureplatform from "./agricultureplatform";
import * as alertsmanagement from "./alertsmanagement";
import * as analysisservices from "./analysisservices";
import * as apicenter from "./apicenter";
import * as apimanagement from "./apimanagement";
import * as app from "./app";
import * as appcomplianceautomation from "./appcomplianceautomation";
import * as appconfiguration from "./appconfiguration";
import * as applicationinsights from "./applicationinsights";
import * as appplatform from "./appplatform";
import * as attestation from "./attestation";
import * as authorization from "./authorization";
import * as automanage from "./automanage";
import * as automation from "./automation";
import * as avs from "./avs";
import * as awsconnector from "./awsconnector";
import * as azureactivedirectory from "./azureactivedirectory";
import * as azurearcdata from "./azurearcdata";
import * as azuredata from "./azuredata";
import * as azuredatatransfer from "./azuredatatransfer";
import * as azurefleet from "./azurefleet";
import * as azurelargeinstance from "./azurelargeinstance";
import * as azureplaywrightservice from "./azureplaywrightservice";
import * as azuresphere from "./azuresphere";
import * as azurestack from "./azurestack";
import * as azurestackhci from "./azurestackhci";
import * as baremetalinfrastructure from "./baremetalinfrastructure";
import * as batch from "./batch";
import * as billing from "./billing";
import * as billingbenefits from "./billingbenefits";
import * as blueprint from "./blueprint";
import * as botservice from "./botservice";
import * as cdn from "./cdn";
import * as certificateregistration from "./certificateregistration";
import * as changeanalysis from "./changeanalysis";
import * as chaos from "./chaos";
import * as cloudhealth from "./cloudhealth";
import * as cloudngfw from "./cloudngfw";
import * as codesigning from "./codesigning";
import * as cognitiveservices from "./cognitiveservices";
import * as communication from "./communication";
import * as community from "./community";
import * as compute from "./compute";
import * as computeschedule from "./computeschedule";
import * as confidentialledger from "./confidentialledger";
import * as config from "./config";
import * as confluent from "./confluent";
import * as connectedcache from "./connectedcache";
import * as connectedvmwarevsphere from "./connectedvmwarevsphere";
import * as consumption from "./consumption";
import * as containerinstance from "./containerinstance";
import * as containerregistry from "./containerregistry";
import * as containerservice from "./containerservice";
import * as containerstorage from "./containerstorage";
import * as contoso from "./contoso";
import * as cosmosdb from "./cosmosdb";
import * as costmanagement from "./costmanagement";
import * as customerinsights from "./customerinsights";
import * as customproviders from "./customproviders";
import * as dashboard from "./dashboard";
import * as databasefleetmanager from "./databasefleetmanager";
import * as databasewatcher from "./databasewatcher";
import * as databox from "./databox";
import * as databoxedge from "./databoxedge";
import * as databricks from "./databricks";
import * as datacatalog from "./datacatalog";
import * as datadog from "./datadog";
import * as datafactory from "./datafactory";
import * as datalakeanalytics from "./datalakeanalytics";
import * as datalakestore from "./datalakestore";
import * as datamigration from "./datamigration";
import * as dataprotection from "./dataprotection";
import * as datareplication from "./datareplication";
import * as datashare from "./datashare";
import * as dbformariadb from "./dbformariadb";
import * as dbformysql from "./dbformysql";
import * as dbforpostgresql from "./dbforpostgresql";
import * as delegatednetwork from "./delegatednetwork";
import * as dependencymap from "./dependencymap";
import * as desktopvirtualization from "./desktopvirtualization";
import * as devcenter from "./devcenter";
import * as devhub from "./devhub";
import * as deviceprovisioningservices from "./deviceprovisioningservices";
import * as deviceregistry from "./deviceregistry";
import * as deviceupdate from "./deviceupdate";
import * as devopsinfrastructure from "./devopsinfrastructure";
import * as devspaces from "./devspaces";
import * as devtestlab from "./devtestlab";
import * as digitaltwins from "./digitaltwins";
import * as dns from "./dns";
import * as dnsresolver from "./dnsresolver";
import * as domainregistration from "./domainregistration";
import * as durabletask from "./durabletask";
import * as dynamics365fraudprotection from "./dynamics365fraudprotection";
import * as easm from "./easm";
import * as edge from "./edge";
import * as edgemarketplace from "./edgemarketplace";
import * as edgeorder from "./edgeorder";
import * as education from "./education";
import * as elastic from "./elastic";
import * as elasticsan from "./elasticsan";
import * as engagementfabric from "./engagementfabric";
import * as enterpriseknowledgegraph from "./enterpriseknowledgegraph";
import * as eventgrid from "./eventgrid";
import * as eventhub from "./eventhub";
import * as extendedlocation from "./extendedlocation";
import * as fabric from "./fabric";
import * as features from "./features";
import * as fileshares from "./fileshares";
import * as fluidrelay from "./fluidrelay";
import * as frontdoor from "./frontdoor";
import * as graphservices from "./graphservices";
import * as guestconfiguration from "./guestconfiguration";
import * as hardwaresecuritymodules from "./hardwaresecuritymodules";
import * as hdinsight from "./hdinsight";
import * as healthbot from "./healthbot";
import * as healthcareapis from "./healthcareapis";
import * as healthdataaiservices from "./healthdataaiservices";
import * as hybridcloud from "./hybridcloud";
import * as hybridcompute from "./hybridcompute";
import * as hybridconnectivity from "./hybridconnectivity";
import * as hybridcontainerservice from "./hybridcontainerservice";
import * as hybridnetwork from "./hybridnetwork";
import * as impact from "./impact";
import * as importexport from "./importexport";
import * as integrationspaces from "./integrationspaces";
import * as intune from "./intune";
import * as iotcentral from "./iotcentral";
import * as iotfirmwaredefense from "./iotfirmwaredefense";
import * as iothub from "./iothub";
import * as iotoperations from "./iotoperations";
import * as iotoperationsdataprocessor from "./iotoperationsdataprocessor";
import * as iotoperationsmq from "./iotoperationsmq";
import * as iotoperationsorchestrator from "./iotoperationsorchestrator";
import * as keyvault from "./keyvault";
import * as kubernetes from "./kubernetes";
import * as kubernetesconfiguration from "./kubernetesconfiguration";
import * as kubernetesruntime from "./kubernetesruntime";
import * as kusto from "./kusto";
import * as labservices from "./labservices";
import * as loadtestservice from "./loadtestservice";
import * as logic from "./logic";
import * as m365securityandcompliance from "./m365securityandcompliance";
import * as machinelearning from "./machinelearning";
import * as machinelearningservices from "./machinelearningservices";
import * as maintenance from "./maintenance";
import * as managedidentity from "./managedidentity";
import * as managednetwork from "./managednetwork";
import * as managednetworkfabric from "./managednetworkfabric";
import * as managedservices from "./managedservices";
import * as management from "./management";
import * as managementpartner from "./managementpartner";
import * as manufacturingplatform from "./manufacturingplatform";
import * as maps from "./maps";
import * as marketplace from "./marketplace";
import * as migrate from "./migrate";
import * as mission from "./mission";
import * as mixedreality from "./mixedreality";
import * as mobilenetwork from "./mobilenetwork";
import * as mongocluster from "./mongocluster";
import * as monitor from "./monitor";
import * as mysqldiscovery from "./mysqldiscovery";
import * as netapp from "./netapp";
import * as network from "./network";
import * as networkcloud from "./networkcloud";
import * as networkfunction from "./networkfunction";
import * as notificationhubs from "./notificationhubs";
import * as offazure from "./offazure";
import * as offazurespringboot from "./offazurespringboot";
import * as onlineexperimentation from "./onlineexperimentation";
import * as openenergyplatform from "./openenergyplatform";
import * as operationalinsights from "./operationalinsights";
import * as operationsmanagement from "./operationsmanagement";
import * as orbital from "./orbital";
import * as peering from "./peering";
import * as policyinsights from "./policyinsights";
import * as portal from "./portal";
import * as portalservices from "./portalservices";
import * as powerbi from "./powerbi";
import * as powerbidedicated from "./powerbidedicated";
import * as powerplatform from "./powerplatform";
import * as privatedns from "./privatedns";
import * as professionalservice from "./professionalservice";
import * as programmableconnectivity from "./programmableconnectivity";
import * as providerhub from "./providerhub";
import * as purview from "./purview";
import * as quantum from "./quantum";
import * as quota from "./quota";
import * as recommendationsservice from "./recommendationsservice";
import * as recoveryservices from "./recoveryservices";
import * as redhatopenshift from "./redhatopenshift";
import * as redis from "./redis";
import * as redisenterprise from "./redisenterprise";
import * as relationships from "./relationships";
import * as relay from "./relay";
import * as resourceconnector from "./resourceconnector";
import * as resourcegraph from "./resourcegraph";
import * as resourcehealth from "./resourcehealth";
import * as resources from "./resources";
import * as saas from "./saas";
import * as scheduler from "./scheduler";
import * as scom from "./scom";
import * as scvmm from "./scvmm";
import * as search from "./search";
import * as secretsynccontroller from "./secretsynccontroller";
import * as security from "./security";
import * as securityandcompliance from "./securityandcompliance";
import * as securityinsights from "./securityinsights";
import * as serialconsole from "./serialconsole";
import * as servicebus from "./servicebus";
import * as servicefabric from "./servicefabric";
import * as servicefabricmesh from "./servicefabricmesh";
import * as servicelinker from "./servicelinker";
import * as servicenetworking from "./servicenetworking";
import * as signalrservice from "./signalrservice";
import * as softwareplan from "./softwareplan";
import * as solutions from "./solutions";
import * as sovereign from "./sovereign";
import * as sql from "./sql";
import * as sqlvirtualmachine from "./sqlvirtualmachine";
import * as standbypool from "./standbypool";
import * as storage from "./storage";
import * as storageactions from "./storageactions";
import * as storagecache from "./storagecache";
import * as storagediscovery from "./storagediscovery";
import * as storagemover from "./storagemover";
import * as storagepool from "./storagepool";
import * as storagesync from "./storagesync";
import * as streamanalytics from "./streamanalytics";
import * as subscription from "./subscription";
import * as synapse from "./synapse";
import * as syntex from "./syntex";
import * as testbase from "./testbase";
import * as timeseriesinsights from "./timeseriesinsights";
import * as trafficmanager from "./trafficmanager";
import * as types from "./types";
import * as verifiedid from "./verifiedid";
import * as videoindexer from "./videoindexer";
import * as virtualmachineimages from "./virtualmachineimages";
import * as vmwarecloudsimple from "./vmwarecloudsimple";
import * as voiceservices from "./voiceservices";
import * as web from "./web";
import * as webpubsub from "./webpubsub";
import * as weightsandbiases from "./weightsandbiases";
import * as widget from "./widget";
import * as windowsesu from "./windowsesu";
import * as windowsiot from "./windowsiot";
import * as workloads from "./workloads";

export {
    aad,
    aadiam,
    addons,
    advisor,
    agfoodplatform,
    agricultureplatform,
    alertsmanagement,
    analysisservices,
    apicenter,
    apimanagement,
    app,
    appcomplianceautomation,
    appconfiguration,
    applicationinsights,
    appplatform,
    attestation,
    authorization,
    automanage,
    automation,
    avs,
    awsconnector,
    azureactivedirectory,
    azurearcdata,
    azuredata,
    azuredatatransfer,
    azurefleet,
    azurelargeinstance,
    azureplaywrightservice,
    azuresphere,
    azurestack,
    azurestackhci,
    baremetalinfrastructure,
    batch,
    billing,
    billingbenefits,
    blueprint,
    botservice,
    cdn,
    certificateregistration,
    changeanalysis,
    chaos,
    cloudhealth,
    cloudngfw,
    codesigning,
    cognitiveservices,
    communication,
    community,
    compute,
    computeschedule,
    confidentialledger,
    config,
    confluent,
    connectedcache,
    connectedvmwarevsphere,
    consumption,
    containerinstance,
    containerregistry,
    containerservice,
    containerstorage,
    contoso,
    cosmosdb,
    costmanagement,
    customerinsights,
    customproviders,
    dashboard,
    databasefleetmanager,
    databasewatcher,
    databox,
    databoxedge,
    databricks,
    datacatalog,
    datadog,
    datafactory,
    datalakeanalytics,
    datalakestore,
    datamigration,
    dataprotection,
    datareplication,
    datashare,
    dbformariadb,
    dbformysql,
    dbforpostgresql,
    delegatednetwork,
    dependencymap,
    desktopvirtualization,
    devcenter,
    devhub,
    deviceprovisioningservices,
    deviceregistry,
    deviceupdate,
    devopsinfrastructure,
    devspaces,
    devtestlab,
    digitaltwins,
    dns,
    dnsresolver,
    domainregistration,
    durabletask,
    dynamics365fraudprotection,
    easm,
    edge,
    edgemarketplace,
    edgeorder,
    education,
    elastic,
    elasticsan,
    engagementfabric,
    enterpriseknowledgegraph,
    eventgrid,
    eventhub,
    extendedlocation,
    fabric,
    features,
    fileshares,
    fluidrelay,
    frontdoor,
    graphservices,
    guestconfiguration,
    hardwaresecuritymodules,
    hdinsight,
    healthbot,
    healthcareapis,
    healthdataaiservices,
    hybridcloud,
    hybridcompute,
    hybridconnectivity,
    hybridcontainerservice,
    hybridnetwork,
    impact,
    importexport,
    integrationspaces,
    intune,
    iotcentral,
    iotfirmwaredefense,
    iothub,
    iotoperations,
    iotoperationsdataprocessor,
    iotoperationsmq,
    iotoperationsorchestrator,
    keyvault,
    kubernetes,
    kubernetesconfiguration,
    kubernetesruntime,
    kusto,
    labservices,
    loadtestservice,
    logic,
    m365securityandcompliance,
    machinelearning,
    machinelearningservices,
    maintenance,
    managedidentity,
    managednetwork,
    managednetworkfabric,
    managedservices,
    management,
    managementpartner,
    manufacturingplatform,
    maps,
    marketplace,
    migrate,
    mission,
    mixedreality,
    mobilenetwork,
    mongocluster,
    monitor,
    mysqldiscovery,
    netapp,
    network,
    networkcloud,
    networkfunction,
    notificationhubs,
    offazure,
    offazurespringboot,
    onlineexperimentation,
    openenergyplatform,
    operationalinsights,
    operationsmanagement,
    orbital,
    peering,
    policyinsights,
    portal,
    portalservices,
    powerbi,
    powerbidedicated,
    powerplatform,
    privatedns,
    professionalservice,
    programmableconnectivity,
    providerhub,
    purview,
    quantum,
    quota,
    recommendationsservice,
    recoveryservices,
    redhatopenshift,
    redis,
    redisenterprise,
    relationships,
    relay,
    resourceconnector,
    resourcegraph,
    resourcehealth,
    resources,
    saas,
    scheduler,
    scom,
    scvmm,
    search,
    secretsynccontroller,
    security,
    securityandcompliance,
    securityinsights,
    serialconsole,
    servicebus,
    servicefabric,
    servicefabricmesh,
    servicelinker,
    servicenetworking,
    signalrservice,
    softwareplan,
    solutions,
    sovereign,
    sql,
    sqlvirtualmachine,
    standbypool,
    storage,
    storageactions,
    storagecache,
    storagediscovery,
    storagemover,
    storagepool,
    storagesync,
    streamanalytics,
    subscription,
    synapse,
    syntex,
    testbase,
    timeseriesinsights,
    trafficmanager,
    types,
    verifiedid,
    videoindexer,
    virtualmachineimages,
    vmwarecloudsimple,
    voiceservices,
    web,
    webpubsub,
    weightsandbiases,
    widget,
    windowsesu,
    windowsiot,
    workloads,
};
pulumi.runtime.registerResourcePackage("azure-native", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:azure-native") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
