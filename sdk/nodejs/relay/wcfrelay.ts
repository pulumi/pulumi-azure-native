// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Description of the WCF relay resource.
 *
 * Uses Azure REST API version 2024-01-01. In version 2.x of the Azure Native provider, it used API version 2021-11-01.
 *
 * Other available API versions: 2021-11-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native relay [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class WCFRelay extends pulumi.CustomResource {
    /**
     * Get an existing WCFRelay resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WCFRelay {
        return new WCFRelay(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:relay:WCFRelay';

    /**
     * Returns true if the given object is an instance of WCFRelay.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WCFRelay {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WCFRelay.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The time the WCF relay was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Returns true if the relay is dynamic; otherwise, false.
     */
    declare public /*out*/ readonly isDynamic: pulumi.Output<boolean>;
    /**
     * The number of listeners for this relay. Note that min :1 and max:25 are supported.
     */
    declare public /*out*/ readonly listenerCount: pulumi.Output<number>;
    /**
     * The geo-location where the resource lives
     */
    declare public /*out*/ readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * WCF relay type.
     */
    declare public readonly relayType: pulumi.Output<string | undefined>;
    /**
     * Returns true if client authorization is needed for this relay; otherwise, false.
     */
    declare public readonly requiresClientAuthorization: pulumi.Output<boolean | undefined>;
    /**
     * Returns true if transport security is needed for this relay; otherwise, false.
     */
    declare public readonly requiresTransportSecurity: pulumi.Output<boolean | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.relay.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The time the namespace was updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
     */
    declare public readonly userMetadata: pulumi.Output<string | undefined>;

    /**
     * Create a WCFRelay resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WCFRelayArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.namespaceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["namespaceName"] = args?.namespaceName;
            resourceInputs["relayName"] = args?.relayName;
            resourceInputs["relayType"] = args?.relayType;
            resourceInputs["requiresClientAuthorization"] = args?.requiresClientAuthorization;
            resourceInputs["requiresTransportSecurity"] = args?.requiresTransportSecurity;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["userMetadata"] = args?.userMetadata;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isDynamic"] = undefined /*out*/;
            resourceInputs["listenerCount"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isDynamic"] = undefined /*out*/;
            resourceInputs["listenerCount"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["relayType"] = undefined /*out*/;
            resourceInputs["requiresClientAuthorization"] = undefined /*out*/;
            resourceInputs["requiresTransportSecurity"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["userMetadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:relay/v20160701:WCFRelay" }, { type: "azure-native:relay/v20170401:WCFRelay" }, { type: "azure-native:relay/v20211101:WCFRelay" }, { type: "azure-native:relay/v20240101:WCFRelay" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WCFRelay.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WCFRelay resource.
 */
export interface WCFRelayArgs {
    /**
     * The namespace name
     */
    namespaceName: pulumi.Input<string>;
    /**
     * The relay name.
     */
    relayName?: pulumi.Input<string>;
    /**
     * WCF relay type.
     */
    relayType?: pulumi.Input<enums.relay.Relaytype>;
    /**
     * Returns true if client authorization is needed for this relay; otherwise, false.
     */
    requiresClientAuthorization?: pulumi.Input<boolean>;
    /**
     * Returns true if transport security is needed for this relay; otherwise, false.
     */
    requiresTransportSecurity?: pulumi.Input<boolean>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
     */
    userMetadata?: pulumi.Input<string>;
}
