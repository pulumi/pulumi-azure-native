// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Primary and Secondary ConnectionStrings to the WCFRelays.
 */
export function listWCFRelayKeys(args: ListWCFRelayKeysArgs, opts?: pulumi.InvokeOptions): Promise<ListWCFRelayKeysResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:relay/v20160701:listWCFRelayKeys", {
        "authorizationRuleName": args.authorizationRuleName,
        "namespaceName": args.namespaceName,
        "relayName": args.relayName,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

export interface ListWCFRelayKeysArgs {
    /**
     * The authorizationRule name.
     */
    authorizationRuleName: string;
    /**
     * The Namespace Name
     */
    namespaceName: string;
    /**
     * The relay name
     */
    relayName: string;
    /**
     * Name of the Resource group within the Azure subscription.
     */
    resourceGroupName: string;
}

/**
 * Namespace/Relay Connection String
 */
export interface ListWCFRelayKeysResult {
    /**
     * A string that describes the authorization rule
     */
    readonly keyName?: string;
    /**
     * PrimaryConnectionString of the created Namespace AuthorizationRule.
     */
    readonly primaryConnectionString?: string;
    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token
     */
    readonly primaryKey?: string;
    /**
     * SecondaryConnectionString of the created Namespace AuthorizationRule
     */
    readonly secondaryConnectionString?: string;
    /**
     * A base64-encoded 256-bit secondary key for signing and validating the SAS token
     */
    readonly secondaryKey?: string;
}
/**
 * Primary and Secondary ConnectionStrings to the WCFRelays.
 */
export function listWCFRelayKeysOutput(args: ListWCFRelayKeysOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ListWCFRelayKeysResult> {
    return pulumi.output(args).apply((a: any) => listWCFRelayKeys(a, opts))
}

export interface ListWCFRelayKeysOutputArgs {
    /**
     * The authorizationRule name.
     */
    authorizationRuleName: pulumi.Input<string>;
    /**
     * The Namespace Name
     */
    namespaceName: pulumi.Input<string>;
    /**
     * The relay name
     */
    relayName: pulumi.Input<string>;
    /**
     * Name of the Resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
}
