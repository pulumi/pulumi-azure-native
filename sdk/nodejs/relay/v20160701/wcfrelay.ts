// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Description of WcfRelays Resource.
 *
 * @deprecated Version 2016-07-01 will be removed in v2 of the provider.
 */
export class WCFRelay extends pulumi.CustomResource {
    /**
     * Get an existing WCFRelay resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WCFRelay {
        pulumi.log.warn("WCFRelay is deprecated: Version 2016-07-01 will be removed in v2 of the provider.")
        return new WCFRelay(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:relay/v20160701:WCFRelay';

    /**
     * Returns true if the given object is an instance of WCFRelay.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WCFRelay {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WCFRelay.__pulumiType;
    }

    /**
     * The time the WCFRelay was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * true if the relay is dynamic; otherwise, false.
     */
    public /*out*/ readonly isDynamic!: pulumi.Output<boolean>;
    /**
     * The number of listeners for this relay. min : 1 and max:25 supported
     */
    public /*out*/ readonly listenerCount!: pulumi.Output<number>;
    /**
     * Resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * WCFRelay Type.
     */
    public readonly relayType!: pulumi.Output<string | undefined>;
    /**
     * true if client authorization is needed for this relay; otherwise, false.
     */
    public readonly requiresClientAuthorization!: pulumi.Output<boolean | undefined>;
    /**
     * true if transport security is needed for this relay; otherwise, false.
     */
    public readonly requiresTransportSecurity!: pulumi.Output<boolean | undefined>;
    /**
     * Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The time the namespace was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
     */
    public readonly userMetadata!: pulumi.Output<string | undefined>;

    /**
     * Create a WCFRelay resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Version 2016-07-01 will be removed in v2 of the provider. */
    constructor(name: string, args: WCFRelayArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("WCFRelay is deprecated: Version 2016-07-01 will be removed in v2 of the provider.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["relayName"] = args ? args.relayName : undefined;
            resourceInputs["relayType"] = args ? args.relayType : undefined;
            resourceInputs["requiresClientAuthorization"] = args ? args.requiresClientAuthorization : undefined;
            resourceInputs["requiresTransportSecurity"] = args ? args.requiresTransportSecurity : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["userMetadata"] = args ? args.userMetadata : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isDynamic"] = undefined /*out*/;
            resourceInputs["listenerCount"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isDynamic"] = undefined /*out*/;
            resourceInputs["listenerCount"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["relayType"] = undefined /*out*/;
            resourceInputs["requiresClientAuthorization"] = undefined /*out*/;
            resourceInputs["requiresTransportSecurity"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["userMetadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:relay:WCFRelay" }, { type: "azure-native:relay/v20170401:WCFRelay" }, { type: "azure-native:relay/v20211101:WCFRelay" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WCFRelay.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WCFRelay resource.
 */
export interface WCFRelayArgs {
    /**
     * The Namespace Name
     */
    namespaceName: pulumi.Input<string>;
    /**
     * The relay name
     */
    relayName?: pulumi.Input<string>;
    /**
     * WCFRelay Type.
     */
    relayType?: pulumi.Input<string | enums.relay.v20160701.Relaytype>;
    /**
     * true if client authorization is needed for this relay; otherwise, false.
     */
    requiresClientAuthorization?: pulumi.Input<boolean>;
    /**
     * true if transport security is needed for this relay; otherwise, false.
     */
    requiresTransportSecurity?: pulumi.Input<boolean>;
    /**
     * Name of the Resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
     */
    userMetadata?: pulumi.Input<string>;
}
