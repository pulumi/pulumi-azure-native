// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { DataControllerArgs } from "./dataController";
export type DataController = import("./dataController").DataController;
export const DataController: typeof import("./dataController").DataController = null as any;
utilities.lazyLoad(exports, ["DataController"], () => require("./dataController"));

export { GetDataControllerArgs, GetDataControllerResult, GetDataControllerOutputArgs } from "./getDataController";
export const getDataController: typeof import("./getDataController").getDataController = null as any;
export const getDataControllerOutput: typeof import("./getDataController").getDataControllerOutput = null as any;
utilities.lazyLoad(exports, ["getDataController","getDataControllerOutput"], () => require("./getDataController"));

export { GetSqlManagedInstanceArgs, GetSqlManagedInstanceResult, GetSqlManagedInstanceOutputArgs } from "./getSqlManagedInstance";
export const getSqlManagedInstance: typeof import("./getSqlManagedInstance").getSqlManagedInstance = null as any;
export const getSqlManagedInstanceOutput: typeof import("./getSqlManagedInstance").getSqlManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSqlManagedInstance","getSqlManagedInstanceOutput"], () => require("./getSqlManagedInstance"));

export { GetSqlServerInstanceArgs, GetSqlServerInstanceResult, GetSqlServerInstanceOutputArgs } from "./getSqlServerInstance";
export const getSqlServerInstance: typeof import("./getSqlServerInstance").getSqlServerInstance = null as any;
export const getSqlServerInstanceOutput: typeof import("./getSqlServerInstance").getSqlServerInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSqlServerInstance","getSqlServerInstanceOutput"], () => require("./getSqlServerInstance"));

export { SqlManagedInstanceArgs } from "./sqlManagedInstance";
export type SqlManagedInstance = import("./sqlManagedInstance").SqlManagedInstance;
export const SqlManagedInstance: typeof import("./sqlManagedInstance").SqlManagedInstance = null as any;
utilities.lazyLoad(exports, ["SqlManagedInstance"], () => require("./sqlManagedInstance"));

export { SqlServerInstanceArgs } from "./sqlServerInstance";
export type SqlServerInstance = import("./sqlServerInstance").SqlServerInstance;
export const SqlServerInstance: typeof import("./sqlServerInstance").SqlServerInstance = null as any;
utilities.lazyLoad(exports, ["SqlServerInstance"], () => require("./sqlServerInstance"));


// Export enums:
export * from "../../types/enums/azurearcdata/v20211101";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:azurearcdata/v20211101:DataController":
                return new DataController(name, <any>undefined, { urn })
            case "azure-native:azurearcdata/v20211101:SqlManagedInstance":
                return new SqlManagedInstance(name, <any>undefined, { urn })
            case "azure-native:azurearcdata/v20211101:SqlServerInstance":
                return new SqlServerInstance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "azurearcdata/v20211101", _module)
