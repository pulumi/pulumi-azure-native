// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * A class representing a CommunicationService resource.
 */
export class CommunicationService extends pulumi.CustomResource {
    /**
     * Get an existing CommunicationService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CommunicationService {
        return new CommunicationService(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-nextgen:communication/v20200820preview:CommunicationService';

    /**
     * Returns true if the given object is an instance of CommunicationService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CommunicationService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CommunicationService.__pulumiType;
    }

    /**
     * The location where the communication service stores its data at rest.
     */
    public readonly dataLocation!: pulumi.Output<string>;
    /**
     * FQDN of the CommunicationService instance.
     */
    public /*out*/ readonly hostName!: pulumi.Output<string>;
    /**
     * The immutable resource Id of the communication service.
     */
    public /*out*/ readonly immutableResourceId!: pulumi.Output<string>;
    /**
     * The Azure location where the CommunicationService is running.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Resource ID of an Azure Notification Hub linked to this resource.
     */
    public /*out*/ readonly notificationHubId!: pulumi.Output<string>;
    /**
     * Provisioning state of the resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Tags of the service which is a list of key value pairs that describe the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the service - e.g. "Microsoft.Communication/CommunicationServices"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Version of the CommunicationService resource. Probably you need the same or higher version of client SDKs.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a CommunicationService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CommunicationServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.communicationServiceName === undefined) {
                throw new Error("Missing required property 'communicationServiceName'");
            }
            if (!args || args.dataLocation === undefined) {
                throw new Error("Missing required property 'dataLocation'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["communicationServiceName"] = args ? args.communicationServiceName : undefined;
            inputs["dataLocation"] = args ? args.dataLocation : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["hostName"] = undefined /*out*/;
            inputs["immutableResourceId"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["notificationHubId"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        } else {
            inputs["dataLocation"] = undefined /*out*/;
            inputs["hostName"] = undefined /*out*/;
            inputs["immutableResourceId"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["notificationHubId"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CommunicationService.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a CommunicationService resource.
 */
export interface CommunicationServiceArgs {
    /**
     * The name of the CommunicationService resource.
     */
    readonly communicationServiceName: pulumi.Input<string>;
    /**
     * The location where the communication service stores its data at rest.
     */
    readonly dataLocation: pulumi.Input<string>;
    /**
     * The Azure location where the CommunicationService is running.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Tags of the service which is a list of key value pairs that describe the resource.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
