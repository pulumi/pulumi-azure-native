// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Parameters to create and update an Azure Cosmos DB Gremlin Role Definition.
 *
 * Uses Azure REST API version 2025-05-01-preview.
 */
export class GremlinResourceGremlinRoleDefinition extends pulumi.CustomResource {
    /**
     * Get an existing GremlinResourceGremlinRoleDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GremlinResourceGremlinRoleDefinition {
        return new GremlinResourceGremlinRoleDefinition(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:cosmosdb:GremlinResourceGremlinRoleDefinition';

    /**
     * Returns true if the given object is an instance of GremlinResourceGremlinRoleDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GremlinResourceGremlinRoleDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GremlinResourceGremlinRoleDefinition.__pulumiType;
    }

    /**
     * A set of fully qualified Scopes at or below which Gremlin Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
     */
    public readonly assignableScopes!: pulumi.Output<string[] | undefined>;
    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The set of operations allowed through this Role Definition.
     */
    public readonly permissions!: pulumi.Output<outputs.cosmosdb.PermissionResponse[] | undefined>;
    /**
     * A user-friendly name for the Role Definition. Must be unique for the database account.
     */
    public readonly roleName!: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.cosmosdb.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a GremlinResourceGremlinRoleDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GremlinResourceGremlinRoleDefinitionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.accountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accountName"] = args?.accountName;
            resourceInputs["assignableScopes"] = args?.assignableScopes;
            resourceInputs["id"] = args?.id;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["roleDefinitionId"] = args?.roleDefinitionId;
            resourceInputs["roleName"] = args?.roleName;
            resourceInputs["type"] = args?.type;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
        } else {
            resourceInputs["assignableScopes"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["roleName"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:cosmosdb/v20250501preview:GremlinResourceGremlinRoleDefinition" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GremlinResourceGremlinRoleDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GremlinResourceGremlinRoleDefinition resource.
 */
export interface GremlinResourceGremlinRoleDefinitionArgs {
    /**
     * Cosmos DB database account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * A set of fully qualified Scopes at or below which Gremlin Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
     */
    assignableScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path id for the Role Definition.
     */
    id?: pulumi.Input<string>;
    /**
     * The set of operations allowed through this Role Definition.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.cosmosdb.PermissionArgs>[]>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The GUID for the Role Definition.
     */
    roleDefinitionId?: pulumi.Input<string>;
    /**
     * A user-friendly name for the Role Definition. Must be unique for the database account.
     */
    roleName?: pulumi.Input<string>;
    /**
     * Indicates whether the Role Definition was built-in or user created.
     */
    type?: pulumi.Input<enums.cosmosdb.RoleDefinitionType>;
}
