// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * An Azure Cosmos DB FleetAnalytics.
 *
 * Uses Azure REST API version 2025-05-01-preview.
 */
export class FleetAnalytic extends pulumi.CustomResource {
    /**
     * Get an existing FleetAnalytic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FleetAnalytic {
        return new FleetAnalytic(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:cosmosdb:FleetAnalytic';

    /**
     * Returns true if the given object is an instance of FleetAnalytic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FleetAnalytic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FleetAnalytic.__pulumiType;
    }

    /**
     * The Azure API version of the resource.
     */
    public /*out*/ readonly azureApiVersion!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * A provisioning state of the FleetAnalytics.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The type of the fleet analytics resource.
     */
    public readonly storageLocationType!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the fleet analytics resource.
     */
    public readonly storageLocationUri!: pulumi.Output<string | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.cosmosdb.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a FleetAnalytic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FleetAnalyticArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.fleetName === undefined && !opts.urn) {
                throw new Error("Missing required property 'fleetName'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["fleetAnalyticsName"] = args?.fleetAnalyticsName;
            resourceInputs["fleetName"] = args?.fleetName;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["storageLocationType"] = args?.storageLocationType;
            resourceInputs["storageLocationUri"] = args?.storageLocationUri;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["storageLocationType"] = undefined /*out*/;
            resourceInputs["storageLocationUri"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:cosmosdb/v20250501preview:FleetAnalytic" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(FleetAnalytic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a FleetAnalytic resource.
 */
export interface FleetAnalyticArgs {
    /**
     * Cosmos DB fleetAnalytics name.
     */
    fleetAnalyticsName?: pulumi.Input<string>;
    /**
     * Cosmos DB fleet name. Needs to be unique under a subscription.
     */
    fleetName: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The type of the fleet analytics resource.
     */
    storageLocationType?: pulumi.Input<string | enums.cosmosdb.StorageLocationType>;
    /**
     * The unique identifier of the fleet analytics resource.
     */
    storageLocationUri?: pulumi.Input<string>;
}
