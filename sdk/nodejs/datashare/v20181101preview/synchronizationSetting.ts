// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * A Synchronization Setting data transfer object.
 *
 * @deprecated Please use one of the variants: ScheduledSynchronizationSetting.
 */
export class SynchronizationSetting extends pulumi.CustomResource {
    /**
     * Get an existing SynchronizationSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SynchronizationSetting {
        pulumi.log.warn("SynchronizationSetting is deprecated: Please use one of the variants: ScheduledSynchronizationSetting.")
        return new SynchronizationSetting(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:datashare/v20181101preview:SynchronizationSetting';

    /**
     * Returns true if the given object is an instance of SynchronizationSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynchronizationSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynchronizationSetting.__pulumiType;
    }

    /**
     * Kind of synchronization setting.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Name of the azure resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Type of the azure resource
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a SynchronizationSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Please use one of the variants: ScheduledSynchronizationSetting. */
    constructor(name: string, args: SynchronizationSettingArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("SynchronizationSetting is deprecated: Please use one of the variants: ScheduledSynchronizationSetting.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.shareName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareName'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
            resourceInputs["synchronizationSettingName"] = args ? args.synchronizationSettingName : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:datashare:SynchronizationSetting" }, { type: "azure-native:datashare/v20191101:SynchronizationSetting" }, { type: "azure-native:datashare/v20200901:SynchronizationSetting" }, { type: "azure-native:datashare/v20201001preview:SynchronizationSetting" }, { type: "azure-native:datashare/v20210801:SynchronizationSetting" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SynchronizationSetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SynchronizationSetting resource.
 */
export interface SynchronizationSettingArgs {
    /**
     * The name of the share account.
     */
    accountName: pulumi.Input<string>;
    /**
     * Kind of synchronization setting.
     */
    kind: pulumi.Input<string | enums.datashare.v20181101preview.SynchronizationSettingKind>;
    /**
     * The resource group name.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the share to add the synchronization setting to.
     */
    shareName: pulumi.Input<string>;
    /**
     * The name of the synchronizationSetting.
     */
    synchronizationSettingName?: pulumi.Input<string>;
}
