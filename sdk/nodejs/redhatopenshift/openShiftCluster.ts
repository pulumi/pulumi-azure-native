// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * OpenShiftCluster represents an Azure Red Hat OpenShift cluster.
 *
 * Uses Azure REST API version 2023-11-22. In version 2.x of the Azure Native provider, it used API version 2022-09-04.
 *
 * Other available API versions: 2022-09-04, 2023-04-01, 2023-07-01-preview, 2023-09-04, 2024-08-12-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native redhatopenshift [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
 */
export class OpenShiftCluster extends pulumi.CustomResource {
    /**
     * Get an existing OpenShiftCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): OpenShiftCluster {
        return new OpenShiftCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:redhatopenshift:OpenShiftCluster';

    /**
     * Returns true if the given object is an instance of OpenShiftCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpenShiftCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenShiftCluster.__pulumiType;
    }

    /**
     * The cluster API server profile.
     */
    declare public readonly apiserverProfile: pulumi.Output<outputs.redhatopenshift.APIServerProfileResponse | undefined>;
    /**
     * The Azure API version of the resource.
     */
    declare public /*out*/ readonly azureApiVersion: pulumi.Output<string>;
    /**
     * The cluster profile.
     */
    declare public readonly clusterProfile: pulumi.Output<outputs.redhatopenshift.ClusterProfileResponse | undefined>;
    /**
     * The console profile.
     */
    declare public /*out*/ readonly consoleProfile: pulumi.Output<outputs.redhatopenshift.ConsoleProfileResponse | undefined>;
    /**
     * The cluster ingress profiles.
     */
    declare public readonly ingressProfiles: pulumi.Output<outputs.redhatopenshift.IngressProfileResponse[] | undefined>;
    /**
     * The geo-location where the resource lives
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * The cluster master profile.
     */
    declare public readonly masterProfile: pulumi.Output<outputs.redhatopenshift.MasterProfileResponse | undefined>;
    /**
     * The name of the resource
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The cluster network profile.
     */
    declare public readonly networkProfile: pulumi.Output<outputs.redhatopenshift.NetworkProfileResponse | undefined>;
    /**
     * The cluster provisioning state.
     */
    declare public readonly provisioningState: pulumi.Output<string | undefined>;
    /**
     * The cluster service principal profile.
     */
    declare public readonly servicePrincipalProfile: pulumi.Output<outputs.redhatopenshift.ServicePrincipalProfileResponse | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    declare public /*out*/ readonly systemData: pulumi.Output<outputs.redhatopenshift.SystemDataResponse>;
    /**
     * Resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The cluster worker profiles.
     */
    declare public readonly workerProfiles: pulumi.Output<outputs.redhatopenshift.WorkerProfileResponse[] | undefined>;
    /**
     * The cluster worker profiles status.
     */
    declare public /*out*/ readonly workerProfilesStatus: pulumi.Output<outputs.redhatopenshift.WorkerProfileResponse[]>;

    /**
     * Create a OpenShiftCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpenShiftClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["apiserverProfile"] = args?.apiserverProfile;
            resourceInputs["clusterProfile"] = args?.clusterProfile;
            resourceInputs["ingressProfiles"] = args?.ingressProfiles;
            resourceInputs["location"] = args?.location;
            resourceInputs["masterProfile"] = args?.masterProfile;
            resourceInputs["networkProfile"] = args?.networkProfile;
            resourceInputs["provisioningState"] = args?.provisioningState;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["resourceName"] = args?.resourceName;
            resourceInputs["servicePrincipalProfile"] = args?.servicePrincipalProfile;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["workerProfiles"] = args?.workerProfiles;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["consoleProfile"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workerProfilesStatus"] = undefined /*out*/;
        } else {
            resourceInputs["apiserverProfile"] = undefined /*out*/;
            resourceInputs["azureApiVersion"] = undefined /*out*/;
            resourceInputs["clusterProfile"] = undefined /*out*/;
            resourceInputs["consoleProfile"] = undefined /*out*/;
            resourceInputs["ingressProfiles"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["masterProfile"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkProfile"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["servicePrincipalProfile"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workerProfiles"] = undefined /*out*/;
            resourceInputs["workerProfilesStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:redhatopenshift/v20200430:OpenShiftCluster" }, { type: "azure-native:redhatopenshift/v20210901preview:OpenShiftCluster" }, { type: "azure-native:redhatopenshift/v20220401:OpenShiftCluster" }, { type: "azure-native:redhatopenshift/v20220904:OpenShiftCluster" }, { type: "azure-native:redhatopenshift/v20230401:OpenShiftCluster" }, { type: "azure-native:redhatopenshift/v20230701preview:OpenShiftCluster" }, { type: "azure-native:redhatopenshift/v20230904:OpenShiftCluster" }, { type: "azure-native:redhatopenshift/v20231122:OpenShiftCluster" }, { type: "azure-native:redhatopenshift/v20240812preview:OpenShiftCluster" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(OpenShiftCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a OpenShiftCluster resource.
 */
export interface OpenShiftClusterArgs {
    /**
     * The cluster API server profile.
     */
    apiserverProfile?: pulumi.Input<inputs.redhatopenshift.APIServerProfileArgs>;
    /**
     * The cluster profile.
     */
    clusterProfile?: pulumi.Input<inputs.redhatopenshift.ClusterProfileArgs>;
    /**
     * The cluster ingress profiles.
     */
    ingressProfiles?: pulumi.Input<pulumi.Input<inputs.redhatopenshift.IngressProfileArgs>[]>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The cluster master profile.
     */
    masterProfile?: pulumi.Input<inputs.redhatopenshift.MasterProfileArgs>;
    /**
     * The cluster network profile.
     */
    networkProfile?: pulumi.Input<inputs.redhatopenshift.NetworkProfileArgs>;
    /**
     * The cluster provisioning state.
     */
    provisioningState?: pulumi.Input<string | enums.redhatopenshift.ProvisioningState>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the OpenShift cluster resource.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The cluster service principal profile.
     */
    servicePrincipalProfile?: pulumi.Input<inputs.redhatopenshift.ServicePrincipalProfileArgs>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cluster worker profiles.
     */
    workerProfiles?: pulumi.Input<pulumi.Input<inputs.redhatopenshift.WorkerProfileArgs>[]>;
}
