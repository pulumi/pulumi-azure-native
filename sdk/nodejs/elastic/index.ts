// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetMonitorArgs, GetMonitorResult, GetMonitorOutputArgs } from "./getMonitor";
export const getMonitor: typeof import("./getMonitor").getMonitor = null as any;
export const getMonitorOutput: typeof import("./getMonitor").getMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getMonitor","getMonitorOutput"], () => require("./getMonitor"));

export { GetTagRuleArgs, GetTagRuleResult, GetTagRuleOutputArgs } from "./getTagRule";
export const getTagRule: typeof import("./getTagRule").getTagRule = null as any;
export const getTagRuleOutput: typeof import("./getTagRule").getTagRuleOutput = null as any;
utilities.lazyLoad(exports, ["getTagRule","getTagRuleOutput"], () => require("./getTagRule"));

export { ListDeploymentInfoArgs, ListDeploymentInfoResult, ListDeploymentInfoOutputArgs } from "./listDeploymentInfo";
export const listDeploymentInfo: typeof import("./listDeploymentInfo").listDeploymentInfo = null as any;
export const listDeploymentInfoOutput: typeof import("./listDeploymentInfo").listDeploymentInfoOutput = null as any;
utilities.lazyLoad(exports, ["listDeploymentInfo","listDeploymentInfoOutput"], () => require("./listDeploymentInfo"));

export { ListMonitoredResourceArgs, ListMonitoredResourceResult, ListMonitoredResourceOutputArgs } from "./listMonitoredResource";
export const listMonitoredResource: typeof import("./listMonitoredResource").listMonitoredResource = null as any;
export const listMonitoredResourceOutput: typeof import("./listMonitoredResource").listMonitoredResourceOutput = null as any;
utilities.lazyLoad(exports, ["listMonitoredResource","listMonitoredResourceOutput"], () => require("./listMonitoredResource"));

export { ListUpgradableVersionDetailsArgs, ListUpgradableVersionDetailsResult, ListUpgradableVersionDetailsOutputArgs } from "./listUpgradableVersionDetails";
export const listUpgradableVersionDetails: typeof import("./listUpgradableVersionDetails").listUpgradableVersionDetails = null as any;
export const listUpgradableVersionDetailsOutput: typeof import("./listUpgradableVersionDetails").listUpgradableVersionDetailsOutput = null as any;
utilities.lazyLoad(exports, ["listUpgradableVersionDetails","listUpgradableVersionDetailsOutput"], () => require("./listUpgradableVersionDetails"));

export { ListVMHostArgs, ListVMHostResult, ListVMHostOutputArgs } from "./listVMHost";
export const listVMHost: typeof import("./listVMHost").listVMHost = null as any;
export const listVMHostOutput: typeof import("./listVMHost").listVMHostOutput = null as any;
utilities.lazyLoad(exports, ["listVMHost","listVMHostOutput"], () => require("./listVMHost"));

export { MonitorArgs } from "./monitor";
export type Monitor = import("./monitor").Monitor;
export const Monitor: typeof import("./monitor").Monitor = null as any;
utilities.lazyLoad(exports, ["Monitor"], () => require("./monitor"));

export { TagRuleArgs } from "./tagRule";
export type TagRule = import("./tagRule").TagRule;
export const TagRule: typeof import("./tagRule").TagRule = null as any;
utilities.lazyLoad(exports, ["TagRule"], () => require("./tagRule"));


// Export enums:
export * from "../types/enums/elastic";

// Export sub-modules:
import * as v20200701 from "./v20200701";
import * as v20200701preview from "./v20200701preview";
import * as v20210901preview from "./v20210901preview";
import * as v20211001preview from "./v20211001preview";

export {
    v20200701,
    v20200701preview,
    v20210901preview,
    v20211001preview,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:elastic:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "azure-native:elastic:TagRule":
                return new TagRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "elastic", _module)
