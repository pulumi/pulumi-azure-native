// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetMonitorArgs, GetMonitorResult, GetMonitorOutputArgs } from "./getMonitor";
export const getMonitor: typeof import("./getMonitor").getMonitor = null as any;
export const getMonitorOutput: typeof import("./getMonitor").getMonitorOutput = null as any;

export { GetTagRuleArgs, GetTagRuleResult, GetTagRuleOutputArgs } from "./getTagRule";
export const getTagRule: typeof import("./getTagRule").getTagRule = null as any;
export const getTagRuleOutput: typeof import("./getTagRule").getTagRuleOutput = null as any;

export { ListDeploymentInfoArgs, ListDeploymentInfoResult, ListDeploymentInfoOutputArgs } from "./listDeploymentInfo";
export const listDeploymentInfo: typeof import("./listDeploymentInfo").listDeploymentInfo = null as any;
export const listDeploymentInfoOutput: typeof import("./listDeploymentInfo").listDeploymentInfoOutput = null as any;

export { ListMonitoredResourceArgs, ListMonitoredResourceResult, ListMonitoredResourceOutputArgs } from "./listMonitoredResource";
export const listMonitoredResource: typeof import("./listMonitoredResource").listMonitoredResource = null as any;
export const listMonitoredResourceOutput: typeof import("./listMonitoredResource").listMonitoredResourceOutput = null as any;

export { ListVMHostArgs, ListVMHostResult, ListVMHostOutputArgs } from "./listVMHost";
export const listVMHost: typeof import("./listVMHost").listVMHost = null as any;
export const listVMHostOutput: typeof import("./listVMHost").listVMHostOutput = null as any;

export { MonitorArgs } from "./monitor";
export type Monitor = import("./monitor").Monitor;
export const Monitor: typeof import("./monitor").Monitor = null as any;

export { TagRuleArgs } from "./tagRule";
export type TagRule = import("./tagRule").TagRule;
export const TagRule: typeof import("./tagRule").TagRule = null as any;

utilities.lazyLoad(exports, ["getMonitor","getMonitorOutput"], () => require("./getMonitor"));
utilities.lazyLoad(exports, ["getTagRule","getTagRuleOutput"], () => require("./getTagRule"));
utilities.lazyLoad(exports, ["listDeploymentInfo","listDeploymentInfoOutput"], () => require("./listDeploymentInfo"));
utilities.lazyLoad(exports, ["listMonitoredResource","listMonitoredResourceOutput"], () => require("./listMonitoredResource"));
utilities.lazyLoad(exports, ["listVMHost","listVMHostOutput"], () => require("./listVMHost"));
utilities.lazyLoad(exports, ["Monitor"], () => require("./monitor"));
utilities.lazyLoad(exports, ["TagRule"], () => require("./tagRule"));

// Export enums:
export * from "../../types/enums/elastic/v20210901preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:elastic/v20210901preview:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "azure-native:elastic/v20210901preview:TagRule":
                return new TagRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "elastic/v20210901preview", _module)
