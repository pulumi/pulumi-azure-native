package gen

import (
	"encoding/json"
	"os"
	"path"
	"strings"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/common/util/contract"
	"gopkg.in/yaml.v3"
)

type FilePath = string
type FileData = interface{}

type FileMap = map[FilePath]FileData

func EmitFiles(outDir string, files FileMap) ([]string, error) {
	var written []string
	for filename, data := range files {
		outPath := path.Join(outDir, filename)
		err := EmitFile(outPath, data)
		if err != nil {
			return nil, err
		}
		written = append(written, outPath)
	}
	return written, nil
}

func EmitFile(outputPath string, data FileData) error {
	var formatted []byte
	var err error
	if bytes, ok := data.([]byte); ok {
		formatted = bytes
	} else if strings.HasSuffix(outputPath, ".yaml") {
		formatted, err = yaml.Marshal(data)
		// Prepend with warning to not edit the file
		formatted = append([]byte("# WARNING: This file was generated by provider/pkg/gen/emitFiles.go. Edits might be overwritten.\n\n"), formatted...)
		if err != nil {
			return errors.Wrapf(err, "marshaling YAML for %v", outputPath)
		}
	} else {
		formatted, err = json.MarshalIndent(data, "", "  ")
		if err != nil {
			return errors.Wrapf(err, "marshaling JSON for %v", outputPath)
		}
	}

	if err := os.MkdirAll(path.Dir(outputPath), 0o700); err != nil {
		return errors.Wrapf(err, "creating directory %v", path.Dir(outputPath))
	}

	f, err := os.Create(outputPath)
	if err != nil {
		return errors.Wrapf(err, "creating file %v", outputPath)
	}
	defer contract.IgnoreClose(f)

	_, err = f.Write(formatted)
	if err != nil {
		return errors.Wrapf(err, "writing file %v", outputPath)
	}
	return err
}
